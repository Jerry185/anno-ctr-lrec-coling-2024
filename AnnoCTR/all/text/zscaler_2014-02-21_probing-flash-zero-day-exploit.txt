Probing Into The Flash Zero Day Exploit (CVE-2014-0502)
February 21, 2014
Yesterday, a targeted campaign leveraging a [Flash zero day exploit hit the news](http://www.zdnet.com/adobe-patches-zero-day-flash-flaw-7000026570/).
Adobe has now released a [security bulletin](http://helpx.adobe.com/security/products/flash-player/apsb14-07.html) regarding this vulnerability.
Based on the attack vector mentioned in prior research, we have concluded that recently observed .SWF exploitation is related to the recent zero-day threat flagged as [CVE-2014-0502](http://helpx.adobe.com/security/products/flash-player/apsb14-07.html).
Upon successful infection, the exploited victim is served a RAT (Remote Access Trojan).
While we were doing our daily review of logs, we found a significant number of transactions related to this campaign.
We specifically started looking for those compromised servers which have been mentioned in prior research.
We began investigating all suspicious transactions which used a known compromised site as a referral location.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-Xiustex6xAU/UwekD1_ddEI/AAAAAAAAAYk/goIOcnAU_h0/s1600/exploit.png)](/sites/default/files/images/blogs/-Xiustex6xAU/UwekD1_ddEI/AAAAAAAAAYk/goIOcnAU_h0/s1600/exploit.png)
After some brief inspection of this location, we found not only the malicious .SWF, but also all other connected malicious files detailed in the analysis below.
We will cover the dropped Flash file that exploits the vulnerability using an image that contained embedded shell code.
This shellcode is then used to download the malware.
The Flash file was found to be encrypted using the DoSWF flash encryptor.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-tjJpjCsrvIo/Uwd6LzRX4dI/AAAAAAAAAcg/JiYykNsjFlM/s1600/f2.png)](/sites/default/files/images/blogs/-tjJpjCsrvIo/Uwd6LzRX4dI/AAAAAAAAAcg/JiYykNsjFlM/s1600/f2.png)
Upon throwing the Flash file into an ActionScript viewer, we immediately see the script shown below.
The script tries to make a URL Request to a GIF Image file, which contains the embedded shellcode for an ROP exploit.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-MFZO4FH2BwQ/Uwd6XRRedLI/AAAAAAAAAc8/vzGl-exlU_A/s1600/f1.png)](/sites/default/files/images/blogs/-MFZO4FH2BwQ/Uwd6XRRedLI/AAAAAAAAAc8/vzGl-exlU_A/s1600/f1.png)
The script checks for the presence of a cookie labeled 'XPT2013111'.
If this cookie is not already present, it sets the same.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-bRxCjQac5HA/Uwd6Xepj0oI/AAAAAAAAAco/9d5gV9CORss/s1600/f3.png)](/sites/default/files/images/blogs/-bRxCjQac5HA/Uwd6Xepj0oI/AAAAAAAAAco/9d5gV9CORss/s1600/f3.png)
The script then checks the operating system version and in the case of Windows XP, further checks the OS language.
Details of the OS language and version are then used to determine the base address for the exploit.
In case of Windows 7, the script further probes for unpatched and outdated versions of Java (Web Start 1.6 and 1.7) or Microsoft Office (Sharepoint OpenDocuments 3 or 4).
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-xvl_b5OzKCk/Uwd6X03-V2I/AAAAAAAAAc0/TcYD-gesvxs/s1600/f5.png)](/sites/default/files/images/blogs/-xvl_b5OzKCk/Uwd6X03-V2I/AAAAAAAAAc0/TcYD-gesvxs/s1600/f5.png)
Here we can see on XP, based on the version and language, the base address for the exploit is determined by the script.
Then the ROP sled is built to carry out the exploit.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-RBxiTKi5VIY/Uwd6Xg4mTCI/AAAAAAAAAcs/Y5iG8VRzacM/s1600/f4.png)](/sites/default/files/images/blogs/-RBxiTKi5VIY/Uwd6Xg4mTCI/AAAAAAAAAcs/Y5iG8VRzacM/s1600/f4.png)
The GIF image used for embedding the shellcode is shown below, which of course seems innocuous to the victim.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-zyT1DbcLJU4/Uwd-b_aW9EI/AAAAAAAAAd0/uaoODAG2f94/s1600/f6.png)](/sites/default/files/images/blogs/-zyT1DbcLJU4/Uwd-b_aW9EI/AAAAAAAAAd0/uaoODAG2f94/s1600/f6.png)      
When opened in a hex editor, the magic bytes for a GIF image file can be seen.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-MZQKLb4Idao/Uwd-b1osP9I/AAAAAAAAAd8/ONPSlFybT6c/s1600/f7.png)](/sites/default/files/images/blogs/-MZQKLb4Idao/Uwd-b1osP9I/AAAAAAAAAd8/ONPSlFybT6c/s1600/f7.png)  
However, upon careful examination, we further see extra bytes appearing toward the end of the image as shown below.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-4i-MjGwPOKg/Uwd-b4hBpsI/AAAAAAAAAeE/Bp_4hHKLpCM/s1600/f8.png)](/sites/default/files/images/blogs/-4i-MjGwPOKg/Uwd-b4hBpsI/AAAAAAAAAeE/Bp_4hHKLpCM/s1600/f8.png)    
Using a shellcode emulator like libemu, we can see that this extra data represents the shellcode to be executed.
[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-4ukW1gXIynM/UweAZzbEgSI/AAAAAAAAAeQ/KIu3eYxXFlI/s1600/f9.png)](/sites/default/files/images/blogs/-4ukW1gXIynM/UweAZzbEgSI/AAAAAAAAAeQ/KIu3eYxXFlI/s1600/f9.png)  
Here we see that the shellcode makes a call to the *LoadLibraryA* function and then to *VirtualProtect* to allocate memory in which to place the shellcode.
It then checks for the /temp folder path and makes calls to *InternetOpenUrlA* to download the malware from a remote location http://[x.x.x.x]/common/update.exe and drops it into the /temp folder.
A sandbox analysis of the final dropped file can be seen here.
Browser plugins continue to be the Achilles heel of enterprise security.
While enterprises struggle to ensure that browser plugins are up to date on all end user systems to prevent browser exploit kits from targeting known vulnerabilities, here we see yet another demonstration where even that is not enough.
Attackers continue to identify and exploit 0day vulnerabilities in popular web browser plugins such as Adobe Flash, which unfortunately has a long history of dealing with such threats.