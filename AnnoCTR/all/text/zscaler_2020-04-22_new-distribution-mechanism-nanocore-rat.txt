New Distribution Mechanism for the NanoCore RAT
April 22, 2020
Bad actors have changed the distribution mechanism for the NanoCore RAT over time.
Previously, we saw the NanoCore payload being distributed via a DOC file with auto executable macros or via a malicious PDF file.
Then, we saw Nanocore being distributed via web downloads embedded in spam or phishing emails.
Recently, we wrote about Microsoft PowerPoint files being used [to spread NanoCore RAT](/blogs/research/multistage-freedom-loader-used-spread-azorult-and-nanocore-rat).
Now, we are observing the NanoCore RAT being distributed via web downloads.
(There have also been a [few mentions](https://blog.morphisec.com/nanocore-under-the-microscope) of the NanoCore RAT being distributed viat AutoIT and PowerShell.
Let's take a look at what we've been seeing in the Zscaler Cloud when it comes to the NanoCore RAT.
Figure 1 shows more than 100 payloads of the NanoCore RAT blocked by Zscaler in the month of March alone.
![](https://lh4.googleusercontent.com/-3nDS9i5Qqq39JDO3pGi4PWNA5O8Fc9409gu3pK6lniolkRTYv_bkF4BgnIC_XLMlqxD5zIBK4C_Qn6z791_empSPeeuDhGI2EmN61IccWHU5fZ1dH2aTSH3i0hRBm0Z36JCezb9)
*Figure 1: NanoCore hits in the Zscaler Cloud.*
Typically, NanoCore payloads are hosted on a compromised site, such as the one shown in Figure 2.
**![](https://lh4.googleusercontent.com/UFvi5BnHPFOKYgYeMfLBp6aEaKoevwpumsLCSKl2q_5ITVinUU_Tp5vH2u7lF2t_aC4VvEEkUf09ahuUUHW68oU_C3Cl7whpgbFp8uUKe-KVw8J9FJL8n6lpcI1BtO0ajAP-nI4L)**
*Figure 2: NanoCore shown in an open directory.*
**Technical Analysis**
Sample: 4AB9AF198F199A7CAFD1DF996562874C
The main file is built in Microsoft Intermediate Language (MSIL).
The source is quite obfuscated and encrypted with some custom routines.
It includes one encrypted file and one PNG file in its resources.
**Stage 1**
The encrypted resource file is getting decrypted by the Data Encryption Standard (DES) algorithm in the Cipher Block Chaining (CBC) mode of operation (DES-CBC) with a predefined key and initialization vector (IV).
![](https://lh5.googleusercontent.com/hx-ALGHWD5fj_DM94xgcUmOqWJhraPlrQzSS6Elvc3DkPjMUUx2VUJLP65xTyp76EUjin6-pq-W9AXZwiMPuVdxNEEtKXwsD_pRt4tSkjb3I6FK5h2qUp6hH--r3I9VMy7vqKOgj)
*Figure 3: Resource decryption with DES.*
The decrypted data is a Portable Executable (PE) file, which contains the code to extract and decode the hidden payload inside the PNG file.
This PE file is a .NET dynamic link library (DLL) file and has the name LibraryMethods.dll.
This is loaded at runtime with the argument as PNG resource data.
![](https://lh6.googleusercontent.com/WuRMCevGCCZkN-iHQ3Crv1folnKRIajBX1h0MQ7F2QJa8d0lIwdzFuOoQbYE_H_sTAINRw6lbDRvKFUZuY0jDQWT5AsIA34sbFCJ31-N-KYUeZLk9uNgRWVE07JIYC9_9pTNRKr2)
*Figure 4: The resource PNG file.*
This malware uses steganography techniques to hide the next stage payload in a plain image.
The steganography decryption routine is present in LibraryMethods.dll.
![](https://lh4.googleusercontent.com/tyMLf5z_DJX2JfoBJDHTS5Mds9L_yNEdNEwften-xioR652sNCjIalYRpr1Kl1VBaOK8BORB019sVixqdO5ACvNEkUMeSPcVGaex6ssR8z-nkTvl3JtGvHWXhcnlBqA68TDngbXC)
*Figure 5: The steganography decryption routine for the PNG resource.*
The data is extracted and decrypted from the PNG resource file, then it executes the next stage payload in the memory.
**Stage 2**
The second stage payload is again a .NET PE file.
This file contains two encrypted resources.
![](https://lh4.googleusercontent.com/e8D3GDpeKKhsDaOfLrmqAGNUZqFZBqozragYrYUgNRpCCwx32A6_WIXHMtD1Z88MeC8pW5yncXLeV91at-OgLLBuW3XUTVF8ZifhUkn2Ca07xptq_eFYES0y3h-VUU4uUgfeda_S)
*Figure 6: The encrypted resources.*
It decrypts the resources with the same DES-CBC algorithm but with a different key and IV.
The resource known as kFnU contains the command strings to weaken the infected system
![](https://lh5.googleusercontent.com/8jB1oa34NBLdQLseRyHMHnxKU1jAiD1UBg5Zll9_VQOnrtoVswYjbeUJYVApQlY31v6rGd3F6lY1fvqQYDjpsIMt9MTJZmAthffPLE6WhbQI8_n3YIPKe_VRQHrahANhoH-5Np9T)
*Figure 7: The decrypted resource known as kFnU.*
The resource known as AZvDEOH is also a PE file, which is directly loaded in the memory after decryption.
This PE file is the NanoCore binary.
**NanoCore binary**
NanoCore RAT is written in the .NET framework and first appeared in 2013.
The NanoCore RAT is powerful enough to perform a variety of malicious operations including:
* File manipulation
* Registry editing
* Process control
* File transfer
* Remote command execution
* Keylogger
* Password recovery
* Download and execute other payloads
The impact of this RAT is that it compromises a system with backdoor capabilities that can execute malicious commands, gather user credentials, log keystrokes and steal user information.
![](https://lh4.googleusercontent.com/L0Jaogx0EHu6QWRC0q3rc8KxoHc1YYiMHuy3dCIMYPTmCDOtAIbQ2r2KRNa_zeEFh_vpAVBSH7t_rn9_P4Q4_rkYzTRA1A7JBpwYfRp5zU4jTWbDzQ378XZnq72AUCUHfi8uWqTE)
*Figure 8: The NanoCore binary.*
The NanoCore binary has encrypted configuration data in the RCDATA resource.
![](https://lh3.googleusercontent.com/eC5W1hE8UvLQ4dunutR1VYVyCCjz40XK1y7FY7dEdY_mMGDmtRj0o9QR5L0LoF0BapYVo34WFLrJkRqA5JZ-A0kfuC-Dx-q7xo3nsMSo_0qdDLca1WoKR09aR5jURLKBk1ldKQ2_)
*Figure 9: The encrypted NanoCore configuration.*
This encrypted data is decrypted with the DES algorithm as shown in Figure 10.
![](https://lh4.googleusercontent.com/xuaGNM19snN3qh-wwerygoksWAl_neFaaI5dDnMbXF0UBLwWgTxkqC8zVmQbtxHOARs433tK2l39mdNhnqn2JkMIEohH6urSWexh8mBcl-yvjAAvy0FiKzVckPN4nNp7bgxSIOz_)
*Figure 10: The decryption routine for the encrypted configuration.*
The decrypted NanoCore configuration is shown in Figure 11.
![](https://lh5.googleusercontent.com/XFJYLpGrzrDO29_ir3lNDmch2X3-fwicSfGhM4Iqqd0tsQNT81t88IOUwFTjOYefgxv6FIaM2qR5YiADCLUFawSR41iaKqL1grUJ-mwLVrEviZMdsDrVyrxVgEXr1J_3N2sQ98EH)
*Figure 11: NanCore configurations.*
The NanoCore RAT uses a custom TCP protocol to connect to a server specified by the attacker on the specified port.
This sample uses the DES algorithm to encrypt the traffic, which is shown below.
This is nothing but a combination of machine name, user name, system guid, app version, and executable path.
This sample has a primary host as aboki0419.duckdns[.]org and backup host as abokijob.hopto[.]org.
It resolves one of the domains and sends customized TCP packets to its IP address.
![](https://lh5.googleusercontent.com/wHlxrN32acLKXWkEWzV7C1m5chrBHYLE4OIqhF8X2qP90g2FojV3KjrYTqyBgXxRgOTtT3W4i6KxJEKpugimkN6SwTLFHyJMpEgX9VozeLJweUV_nBjgwTZnMLwXMQN7g3jKLfyj)
*Figure 12: Network communication.*
![](https://lh5.googleusercontent.com/XCUfTZOR5eukoX_FMP53BWKI45kWdRDCIJubaLAT1fxmMnUVJHwk6A-06HMHeN7Ayh_kY77KTz_Ol2oiX701Wu1eucFPkFLlN1XEidOWXyKuTdQpKTXtvqldigDOS7arPSCd1xqu)
*Figure 13: NanoCore CnC commands.*
**Nanocore RAT capabilities**
This malware can steal browser and FTP credentials and send them to its command and control (CnC) server via a custom TCP protocol.
This RAT can also steal user’s email credentials.
All of this leads to a complete system compromise.
**Details from the Zscaler Cloud Sandbox**
**![](https://lh4.googleusercontent.com/lrB1jQvGeRHaxGpCJXfyLTivx3hWbgt-DgJa46_hluXcDSGq1o1xF5l_zMjIn5eTq-GUEaeMUKgo4_2TDXOpSggfAAQwKanXM-1BKkw9lAAQ7YOP7_t-gyIN4XXq74wzjIAQCmWn)**
*Figure 14: Zscaler Cloud Sandbox report.*
**Conclusion**
As we saw in the technical analysis section, this malware has lots of obfuscation methods involved to hide its actual payload.
The ThreatLabZ team continuously monitors ever-evolving advanced malware and places a detection for different layers of malware execution.
We will continue to monitor the NanoCore RAT and other threats to keep our customers safe.
**IOCs**
* aboki0419.duckdns[.]org
* abokijob.hopto[.]org
* oluwaboi.duckdns[.]org
* zafia[.]ro
* bigworldhomes[.]com
* audiosv[.]com
* tumercarpet[.]com
* Lapurisima[.]cl