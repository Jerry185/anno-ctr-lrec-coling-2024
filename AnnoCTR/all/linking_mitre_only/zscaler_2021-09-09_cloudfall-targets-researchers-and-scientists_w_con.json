{"mention": "CloudFall", "context_left": "", "context_right": "Targets Researchers and Scientists Invited to International Military Conferences in Central Asia and Eastern Europe September 09, 2021", "_context_left": "", "_context_right": " Targets Researchers and Scientists Invited to International Military Conferences in Central Asia and Eastern Europe", "sentence_left": "", "sentence_right": "September 09, 2021", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "malicious Microsoft Word documents", "context_left": "September 09, 2021 In August 2021, Zscaler ThreatLabz identified several", "context_right": "which used a multi-stage attack-chain abusing Cloudflare Workers and features of MS Office Word to target users in Central Asia and Eastern Europe. Based on the social engineering lures used in the decoy content, we conclude with a moderate confidence level that the targets of this campaign were scientists and researchers who were invited to International military conferences.", "_context_left": "In August 2021, Zscaler ThreatLabz identified several ", "_context_right": " which used a multi-stage attack-chain abusing Cloudflare Workers and features of MS Office Word to target users in Central Asia and Eastern Europe.", "sentence_left": "September 09, 2021", "sentence_right": "Based on the social engineering lures used in the decoy content, we conclude with a moderate confidence level that the targets of this campaign were scientists and researchers who were invited to International military conferences.", "label": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns. Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "label_id": 161, "label_title": "Phishing", "label_link": "https://attack.mitre.org/techniques/T1566", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "social engineering lures used in the decoy content", "context_left": "In August 2021, Zscaler ThreatLabz identified several malicious Microsoft Word documents which used a multi-stage attack-chain abusing Cloudflare Workers and features of MS Office Word to target users in Central Asia and Eastern Europe. Based on the", "context_right": ", we conclude with a moderate confidence level that the targets of this campaign were scientists and researchers who were invited to International military conferences. This multi-stage attack chain involves several new tactics, techniques, and procedures (TTPs) which have not been documented before.", "_context_left": "Based on the ", "_context_right": ", we conclude with a moderate confidence level that the targets of this campaign were scientists and researchers who were invited to International military conferences.", "sentence_left": "In August 2021, Zscaler ThreatLabz identified several malicious Microsoft Word documents which used a multi-stage attack-chain abusing Cloudflare Workers and features of MS Office Word to target users in Central Asia and Eastern Europe.", "sentence_right": "This multi-stage attack chain involves several new tactics, techniques, and procedures (TTPs) which have not been documented before.", "label": "Adversaries may gather information about the victim's identity that can be used during targeting. Information about identities may include a variety of details, including personal data (ex: employee names, email addresses, etc.) as well as sensitive details such as credentials. Adversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about victims may also be exposed to adversaries via online or other accessible data sets (ex: [Social Media](https://attack.mitre.org/techniques/T1593/001) or [Search Victim-Owned Websites](https://attack.mitre.org/techniques/T1594)).(Citation: OPM Leak)(Citation: Register Deloitte)(Citation: Register Uber)(Citation: Detectify Slack Tokens)(Citation: Forbes GitHub Creds)(Citation: GitHub truffleHog)(Citation: GitHub Gitrob)(Citation: CNET Leaks) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Phishing for Information](https://attack.mitre.org/techniques/T1598)), establishing operational resources (ex: [Compromise Accounts](https://attack.mitre.org/techniques/T1586)), and/or initial access (ex: [Phishing](https://attack.mitre.org/techniques/T1566) or [Valid Accounts](https://attack.mitre.org/techniques/T1078)).", "label_id": 25, "label_title": "Gather Victim Identity Information", "label_link": "https://attack.mitre.org/techniques/T1589", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "In the remainder of this blog, we'll share the technical details of the attack as well as threat attribution. We have named this threat actor", "context_right": "based on the network infrastructure used by them. There is also a strong overlap between this threat actor and the CloudAtlas APT group.", "_context_left": "We have named this threat actor ", "_context_right": " based on the network infrastructure used by them.", "sentence_left": "In the remainder of this blog, we'll share the technical details of the attack as well as threat attribution.", "sentence_right": "There is also a strong overlap between this threat actor and the CloudAtlas APT group.", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudAtlas APT", "context_left": "We have named this threat actor CloudFall based on the network infrastructure used by them. There is also a strong overlap between this threat actor and the", "context_right": "group. We will explain this in more detail in the threat attribution section of the blog.", "_context_left": "There is also a strong overlap between this threat actor and the ", "_context_right": " group.", "sentence_left": "We have named this threat actor CloudFall based on the network infrastructure used by them.", "sentence_right": "We will explain this in more detail in the threat attribution section of the blog.", "label": "CloudAtlas APT", "label_id": 1337, "label_title": "CloudAtlas APT", "label_link": "http://www.bosch.com#node1fq5p8ki8x2", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "macro-based document attacks,", "context_left": "We will explain this in more detail in the threat attribution section of the blog. Unlike common", "context_right": "in this targeted campaign we observed the threat actor abusing MS Office Word features to evade automated analysis systems. There were multiple variants of attack-chains used by this threat actor which highlight the adversary's deep understanding of the MS Office Word application.", "_context_left": "Unlike common ", "_context_right": " in this targeted campaign we observed the threat actor abusing MS Office Word features to evade automated analysis systems.", "sentence_left": "We will explain this in more detail in the threat attribution section of the blog.", "sentence_right": "There were multiple variants of attack-chains used by this threat actor which highlight the adversary's deep understanding of the MS Office Word application.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "threat actor abusing MS Office Word features to evade automated analysis systems.", "context_left": "We will explain this in more detail in the threat attribution section of the blog. Unlike common macro-based document attacks, in this targeted campaign we observed the", "context_right": "There were multiple variants of attack-chains used by this threat actor which highlight the adversary's deep understanding of the MS Office Word application.", "_context_left": "Unlike common macro-based document attacks, in this targeted campaign we observed the ", "_context_right": "", "sentence_left": "We will explain this in more detail in the threat attribution section of the blog.", "sentence_right": "There were multiple variants of attack-chains used by this threat actor which highlight the adversary's deep understanding of the MS Office Word application.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "1.Attack-chain 2.Naming convention of attacker-controlled", "context_right": "domains 3.Regions targeted and content of the decoy files", "_context_left": "2.Naming convention of attacker-controlled ", "_context_right": " domains", "sentence_left": "1.Attack-chain", "sentence_right": "3.Regions targeted and content of the decoy files", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "MS Office Word document was used to download a remote document template", "context_left": "4.Correlation of creation and compilation timestamp of all the artifacts (documents and payloads) **Attack-chain**: In all the cases, an", "context_right": "and carry out the attack in multiple stages. A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case.", "_context_left": "**Attack-chain**: In all the cases, an ", "_context_right": " and carry out the attack in multiple stages.", "sentence_left": "4.Correlation of creation and compilation timestamp of all the artifacts (documents and payloads)", "sentence_right": "A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case. **Naming conventions of attacker-controlled", "context_right": "domains**: We observed a consistent pattern across all the C2 domains used in this targeted campaign. All the C2 servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365.", "_context_left": "**Naming conventions of attacker-controlled ", "_context_right": " domains**: We observed a consistent pattern across all the C2 domains used in this targeted campaign.", "sentence_left": "A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case.", "sentence_right": "All the C2 servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case. **Naming conventions of attacker-controlled C2 domains**: We observed a consistent pattern across all the", "context_right": "domains used in this targeted campaign. All the C2 servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365.", "_context_left": "**Naming conventions of attacker-controlled C2 domains**: We observed a consistent pattern across all the ", "_context_right": " domains used in this targeted campaign.", "sentence_left": "A lot of TTPs in this attack-chain have not been seen before and are unique to the threat actor in this case.", "sentence_right": "All the C2 servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "**Naming conventions of attacker-controlled C2 domains**: We observed a consistent pattern across all the C2 domains used in this targeted campaign. All the", "context_right": "servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365. office365.dc-microsoft.workers[.]dev", "_context_left": "All the ", "_context_right": " servers used Cloudflare Worker domains and most of the subdomain names were crafted to spoof Microsoft service names such as Office 365.", "sentence_left": "**Naming conventions of attacker-controlled C2 domains**: We observed a consistent pattern across all the C2 domains used in this targeted campaign.", "sentence_right": "office365.dc-microsoft.workers[.]dev", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudAtlas APT", "context_left": "Based on this, we can say with a moderate confidence level that the threat actor was located in the eastern part of the world. By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with", "context_right": "threat actor. CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates.", "_context_left": "By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with ", "_context_right": " threat actor.", "sentence_left": "Based on this, we can say with a moderate confidence level that the threat actor was located in the eastern part of the world.", "sentence_right": "CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates.", "label": "CloudAtlas APT", "label_id": 1337, "label_title": "CloudAtlas APT", "label_link": "http://www.bosch.com#node1fq5p8ki8x2", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudAtlas APT", "context_left": "By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with CloudAtlas APT threat actor.", "context_right": "has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates. CloudAtlas has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services.", "_context_left": "", "_context_right": " has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates.", "sentence_left": "By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with CloudAtlas APT threat actor.", "sentence_right": "CloudAtlas has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services.", "label": "CloudAtlas APT", "label_id": 1337, "label_title": "CloudAtlas APT", "label_link": "http://www.bosch.com#node1fq5p8ki8x2", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "documents sent in spear-phishing emails and downloaded remote templates", "context_left": "By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with CloudAtlas APT threat actor. CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with", "context_right": ". CloudAtlas has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services.", "_context_left": "CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with ", "_context_right": ".", "sentence_left": "By combining all of the above observations, we can say with a moderate confidence level that there is an overlap with CloudAtlas APT threat actor.", "sentence_right": "CloudAtlas has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services.", "label": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns. Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "label_id": 161, "label_title": "Phishing", "label_link": "https://attack.mitre.org/techniques/T1566", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudAtlas", "context_left": "CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates.", "context_right": "has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services. The tactics, techniques, and procedures (TTPs) are very unique in this instance so we cannot use them to specifically attribute to any threat actor.", "_context_left": "", "_context_right": " has also abused legitimate cloud-based services, such as CloudMe, in the past and used domain names that spoof legitimate Microsoft services.", "sentence_left": "CloudAtlas APT has targeted users in Central Asia and Eastern Europe in the past with documents sent in spear-phishing emails and downloaded remote templates.", "sentence_right": "The tactics, techniques, and procedures (TTPs) are very unique in this instance so we cannot use them to specifically attribute to any threat actor.", "label": "CloudAtlas APT", "label_id": 1337, "label_title": "CloudAtlas APT", "label_link": "http://www.bosch.com#node1fq5p8ki8x2", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "For the document with MD5 hash: 4cf8b660a79fc1b7cc4ea6422a02347d, seen in Figure 1, the cover image is the logo of the German Federal Foreign Office. ![Figure 1](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%201.png) *Figure 1: Cover image displayed in Stage-1 document*", "_context_left": "![Figure 1](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%201.png)", "sentence_left": "For the document with MD5 hash: 4cf8b660a79fc1b7cc4ea6422a02347d, seen in Figure 1, the cover image is the logo of the German Federal Foreign Office.", "sentence_right": "*Figure 1: Cover image displayed in Stage-1 document*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "The text content behind this overlay image is as shown in Figure 2. ![Figure 2](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%202.png) *Figure 2: Text present inside the document behind the cover image*", "_context_left": "![Figure 2](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%202.png)", "sentence_left": "The text content behind this overlay image is as shown in Figure 2.", "sentence_right": "*Figure 2: Text present inside the document behind the cover image*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**Variant #1** ![Figure 3](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%203.jpg) *Figure 3: Attack-chain of first variant*", "_context_left": "![Figure 3](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%203.jpg)", "sentence_left": "**Variant #1**", "sentence_right": "*Figure 3: Attack-chain of first variant*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "template injection", "context_left": "Stage-1 document fetches a macro-based template document hosted on the attacker-controlled website and lures the user to enable the macros. The interesting thing to note here is that the attacker doesn’t use the standard DOCX file format (OOXML) for", "context_right": "where we have the XML file referencing the document template from a network path. Instead, in this case, the template injection is performed using the DOC file format.", "_context_left": "The interesting thing to note here is that the attacker doesn’t use the standard DOCX file format (OOXML) for ", "_context_right": " where we have the XML file referencing the document template from a network path.", "sentence_left": "Stage-1 document fetches a macro-based template document hosted on the attacker-controlled website and lures the user to enable the macros.", "sentence_right": "Instead, in this case, the template injection is performed using the DOC file format.", "label": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017) Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017) This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)", "label_id": 444, "label_title": "Template Injection", "label_link": "https://attack.mitre.org/techniques/T1221", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Macro-based template document", "context_left": "As a result, static analysis tools like olevba cannot be used to extract the URL. #### **Stage-2:", "context_right": "** Once macros are enabled by the user, the VBA macro code inside the downloaded template is executed.", "_context_left": "#### **Stage-2: ", "_context_right": "**", "sentence_left": "As a result, static analysis tools like olevba cannot be used to extract the URL.", "sentence_right": "Once macros are enabled by the user, the VBA macro code inside the downloaded template is executed.", "label": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017) Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017) This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)", "label_id": 444, "label_title": "Template Injection", "label_link": "https://attack.mitre.org/techniques/T1221", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Once macros are enabled by the user, the VBA macro code inside the downloaded template is executed.", "context_left": "#### **Stage-2: Macro-based template document**", "context_right": "The macro code performs the following operations:", "_context_left": "", "_context_right": "", "sentence_left": "#### **Stage-2: Macro-based template document**", "sentence_right": "The macro code performs the following operations:", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "The macro code performs the following operations:", "context_left": "Once macros are enabled by the user, the VBA macro code inside the downloaded template is executed.", "context_right": "**1.** When the document is opened, it hides the decoy image shown to the user.", "_context_left": "", "_context_right": "", "sentence_left": "Once macros are enabled by the user, the VBA macro code inside the downloaded template is executed.", "sentence_right": "**1.** When the document is opened, it hides the decoy image shown to the user.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Below is the relevant VBA macro code responsible for this.", "context_left": "The image is an overlay for the text content which is displayed to the user once the macros are enabled.", "context_right": "**Sub Document\\_Open()**", "_context_left": "", "_context_right": "", "sentence_left": "The image is an overlay for the text content which is displayed to the user once the macros are enabled.", "sentence_right": "**Sub Document\\_Open()**", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "it checks whether a document template file is present in the path", "context_left": "**End Sub** **2.** When the document is closed,", "context_right": ": \"%appdata%\\Microsoft\\Word\\STARTUP\\Main.dotm\". If this file is not found, then it will be downloaded and saved in this location.", "_context_left": "**2.** When the document is closed, ", "_context_right": ": \"%appdata%\\Microsoft\\Word\\STARTUP\\Main.dotm\".", "sentence_left": "**End Sub**", "sentence_right": "If this file is not found, then it will be downloaded and saved in this location.", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "directory path corresponds to STARTUP location used by Microsoft Office Word application to load global templates", "context_left": "If this file is not found, then it will be downloaded and saved in this location. It's important to note that the above", "context_right": ". The template file is downloaded as base64-encoded data from the URL: \"https://cloud.digitalstorage.workers[.]dev/old/data\".", "_context_left": "It's important to note that the above ", "_context_right": ".", "sentence_left": "If this file is not found, then it will be downloaded and saved in this location.", "sentence_right": "The template file is downloaded as base64-encoded data from the URL: \"https://cloud.digitalstorage.workers[.]dev/old/data\".", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "The template file is downloaded", "context_left": "It's important to note that the above directory path corresponds to STARTUP location used by Microsoft Office Word application to load global templates.", "context_right": "as base64-encoded data from the URL: \"https://cloud.digitalstorage.workers[.]dev/old/data\". The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding.", "_context_left": "", "_context_right": " as base64-encoded data from the URL: \"https://cloud.digitalstorage.workers[.]dev/old/data\".", "sentence_left": "It's important to note that the above directory path corresponds to STARTUP location used by Microsoft Office Word application to load global templates.", "sentence_right": "The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Macro replaces  \"$\" with \"A\" and \"#\" with \"Q\"", "context_left": "The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding.", "context_right": "in the mangled response before base64-decoding. Below is the relevant VBA macro code responsible for this.", "_context_left": "", "_context_right": " in the mangled response before base64-decoding.", "sentence_left": "The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding.", "sentence_right": "Below is the relevant VBA macro code responsible for this.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "before base64-decoding", "context_left": "The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding. Macro replaces  \"$\" with \"A\" and \"#\" with \"Q\" in the mangled response", "context_right": ". Below is the relevant VBA macro code responsible for this.", "_context_left": "Macro replaces  \"$\" with \"A\" and \"#\" with \"Q\" in the mangled response ", "_context_right": ".", "sentence_left": "The downloaded base64-encoded data is mangled and it requires a simple character substitution before decoding.", "sentence_right": "Below is the relevant VBA macro code responsible for this.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "VBA macro code", "context_left": "Macro replaces  \"$\" with \"A\" and \"#\" with \"Q\" in the mangled response before base64-decoding. Below is the relevant", "context_right": "responsible for this. **Sub Document\\_Close()**", "_context_left": "Below is the relevant ", "_context_right": " responsible for this.", "sentence_left": "Macro replaces  \"$\" with \"A\" and \"#\" with \"Q\" in the mangled response before base64-decoding.", "sentence_right": "**Sub Document\\_Close()**", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "template file \"Main.dotm\" acts as a persistence template since it is loaded whenever the Microsoft Word application is started.", "context_left": "#### **Stage-3: Persistence template** The", "context_right": "Similar to Stage-2, this is also a macro-based template.", "_context_left": "The ", "_context_right": "", "sentence_left": "#### **Stage-3: Persistence template**", "sentence_right": "Similar to Stage-2, this is also a macro-based template.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "macro-based template", "context_left": "The template file \"Main.dotm\" acts as a persistence template since it is loaded whenever the Microsoft Word application is started. Similar to Stage-2, this is also a", "context_right": ". The malicious macro code is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded.", "_context_left": "Similar to Stage-2, this is also a ", "_context_right": ".", "sentence_left": "The template file \"Main.dotm\" acts as a persistence template since it is loaded whenever the Microsoft Word application is started.", "sentence_right": "The malicious macro code is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded.", "label": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017) Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017) This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)", "label_id": 444, "label_title": "Template Injection", "label_link": "https://attack.mitre.org/techniques/T1221", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "malicious macro code", "context_left": "Similar to Stage-2, this is also a macro-based template. The", "context_right": "is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded. Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed.", "_context_left": "The ", "_context_right": " is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded.", "sentence_left": "Similar to Stage-2, this is also a macro-based template.", "sentence_right": "Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "macro code downloads a base64-encoded binary", "context_left": "The malicious macro code is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded. Upon execution, the", "context_right": "either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed. Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "_context_left": "Upon execution, the ", "_context_right": " either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed.", "sentence_left": "The malicious macro code is defined under the AutoExit function which is executed when the Microsoft Word application is closed or the global template defining it is unloaded.", "sentence_right": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "the base64-encoded binary", "context_left": "Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed. Similar to Stage-2,", "context_right": "is mangled and requires character substitution before decoding. Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "_context_left": "Similar to Stage-2, ", "_context_right": " is mangled and requires character substitution before decoding.", "sentence_left": "Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed.", "sentence_right": "Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "requires character substitution before decoding", "context_left": "Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed. Similar to Stage-2, the base64-encoded binary is mangled and", "context_right": ". Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "_context_left": "Similar to Stage-2, the base64-encoded binary is mangled and ", "_context_right": ".", "sentence_left": "Upon execution, the macro code downloads a base64-encoded binary either from \"mirror.advancestore.workers[.]dev/max/bs\" or \"mirror.advancestore.workers[.]dev/min/bs\" based on the checks performed.", "sentence_right": "Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "executes", "context_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding. Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and", "context_right": "it. **Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "_context_left": "Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and ", "_context_right": " it.", "sentence_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "sentence_right": "**Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "label": "The adversary is trying to run malicious code. Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.", "label_id": 588, "label_title": "Execution", "label_link": "https://attack.mitre.org/tactics/TA0002", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Once decoded", "context_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "context_right": ", the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it. **Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "_context_left": "", "_context_right": ", the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "sentence_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "sentence_right": "**Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "the macro code drops it as", "context_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding. Once decoded,", "context_right": "the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it. **Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "_context_left": "Once decoded, ", "_context_right": " the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "sentence_left": "Similar to Stage-2, the base64-encoded binary is mangled and requires character substitution before decoding.", "sentence_right": "**Note**: The dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "dropped file name spoofs legitimate Windows binary for Microsoft Photos.", "context_left": "Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it. **Note**: The", "context_right": "Relevant code is shown in Figure 4.", "_context_left": "**Note**: The ", "_context_right": "", "sentence_left": "Once decoded, the macro code drops it as the next stage payload in the path %localappdata%\\Photos\\Microsoft.Photos.exe and executes it.", "sentence_right": "Relevant code is shown in Figure 4.", "label": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names. Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)", "label_id": 142, "label_title": "Masquerading", "label_link": "https://attack.mitre.org/techniques/T1036", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "Relevant code is shown in Figure 4. ![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%204.png) *Figure 4: VBA macro code of Stage-3 persistence document template*", "_context_left": "![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%204.png)", "sentence_left": "Relevant code is shown in Figure 4.", "sentence_right": "*Figure 4: VBA macro code of Stage-3 persistence document template*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "VBA macro code", "context_left": "![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%204.png) *Figure 4:", "context_right": "of Stage-3 persistence document template* #### **Stage-4: Dropped binary**", "_context_left": "*Figure 4: ", "_context_right": " of Stage-3 persistence document template*", "sentence_left": "![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%204.png)", "sentence_right": "#### **Stage-4: Dropped binary**", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "persistence document template", "context_left": "![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%204.png) *Figure 4: VBA macro code of Stage-3", "context_right": "* #### **Stage-4: Dropped binary**", "_context_left": "*Figure 4: VBA macro code of Stage-3 ", "_context_right": "*", "sentence_left": "![Figure 4](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%204.png)", "sentence_right": "#### **Stage-4: Dropped binary**", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "dropped binary is heavily obfuscated using control flow obfuscation", "context_left": "#### **Stage-4: Dropped binary** The Stage-4", "context_right": ", function inlining, stack-based strings generation, strings encoding, etc which makes the dynamic analysis of the binary inside a debugger difficult. To further hinder the dynamic analysis using debugger, the binary performs self checksum check to detect any attached debugger.", "_context_left": "The Stage-4 ", "_context_right": ", function inlining, stack-based strings generation, strings encoding, etc which makes the dynamic analysis of the binary inside a debugger difficult.", "sentence_left": "#### **Stage-4: Dropped binary**", "sentence_right": "To further hinder the dynamic analysis using debugger, the binary performs self checksum check to detect any attached debugger.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "which makes the dynamic analysis of the binary inside a debugger difficult.", "context_left": "#### **Stage-4: Dropped binary** The Stage-4 dropped binary is heavily obfuscated using control flow obfuscation, function inlining, stack-based strings generation, strings encoding, etc", "context_right": "To further hinder the dynamic analysis using debugger, the binary performs self checksum check to detect any attached debugger.", "_context_left": "The Stage-4 dropped binary is heavily obfuscated using control flow obfuscation, function inlining, stack-based strings generation, strings encoding, etc ", "_context_right": "", "sentence_left": "#### **Stage-4: Dropped binary**", "sentence_right": "To further hinder the dynamic analysis using debugger, the binary performs self checksum check to detect any attached debugger.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "To further hinder the dynamic analysis using debugger, the binary performs self checksum check to detect any attached debugger.", "context_left": "The Stage-4 dropped binary is heavily obfuscated using control flow obfuscation, function inlining, stack-based strings generation, strings encoding, etc which makes the dynamic analysis of the binary inside a debugger difficult.", "context_right": "It also hooks the ZwProtectVirtualMemory API.", "_context_left": "", "_context_right": "", "sentence_left": "The Stage-4 dropped binary is heavily obfuscated using control flow obfuscation, function inlining, stack-based strings generation, strings encoding, etc which makes the dynamic analysis of the binary inside a debugger difficult.", "sentence_right": "It also hooks the ZwProtectVirtualMemory API.", "label": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.   Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "label_id": 1675, "label_title": "Process Injection: Ptrace System Calls", "label_link": "https://attack.mitre.org/techniques/T1631/001", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "Figure 5 below shows the trampoline code. ![Figure 5](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%205.jpg) *Figure 5: API hook added for ZwProtectVirtualMemory with an unconditional JMP trampoline*", "_context_left": "![Figure 5](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%205.jpg)", "sentence_left": "Figure 5 below shows the trampoline code.", "sentence_right": "*Figure 5: API hook added for ZwProtectVirtualMemory with an unconditional JMP trampoline*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "checks for the presence of the file conf.h in the current working directory.", "context_left": "*Figure 5: API hook added for ZwProtectVirtualMemory with an unconditional JMP trampoline* Executing further, the malicious binary", "context_right": "If the file exists, it tries to read and parse it.", "_context_left": "Executing further, the malicious binary ", "_context_right": "", "sentence_left": "*Figure 5: API hook added for ZwProtectVirtualMemory with an unconditional JMP trampoline*", "sentence_right": "If the file exists, it tries to read and parse it.", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "Figure 6 below shows the code which performs string generation and does the file existence check for conf.h ![Conf Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Conf%20Check.jpg) *Figure 6: Code section which performs conf.h string generation and file existence check*", "_context_left": "![Conf Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Conf%20Check.jpg)", "sentence_left": "Figure 6 below shows the code which performs string generation and does the file existence check for conf.h", "sentence_right": "*Figure 6: Code section which performs conf.h string generation and file existence check*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "conf.h string generation and file existence check*", "context_left": "![Conf Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Conf%20Check.jpg) *Figure 6: Code section which performs", "context_right": "**Note:**  The file is likely fetched and dropped by the binary as part of C2 communication", "_context_left": "*Figure 6: Code section which performs ", "_context_right": "", "sentence_left": "![Conf Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Conf%20Check.jpg)", "sentence_right": "**Note:**  The file is likely fetched and dropped by the binary as part of C2 communication", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "*Figure 6: Code section which performs conf.h string generation and file existence check* **Note:**  The file is likely fetched and dropped by the binary as part of", "context_right": "communication If the conf.h file doesn’t exist, then it checks the following browser directories for the presence of specific files one at a time:", "_context_left": "**Note:**  The file is likely fetched and dropped by the binary as part of ", "_context_right": " communication", "sentence_left": "*Figure 6: Code section which performs conf.h string generation and file existence check*", "sentence_right": "If the conf.h file doesn’t exist, then it checks the following browser directories for the presence of specific files one at a time:", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "then it checks the following browser directories for the presence of specific files", "context_left": "**Note:**  The file is likely fetched and dropped by the binary as part of C2 communication If the conf.h file doesn’t exist,", "context_right": "one at a time: **1.** %appdata%\\Mozilla\\Firefox\\Profiles", "_context_left": "If the conf.h file doesn’t exist, ", "_context_right": " one at a time:", "sentence_left": "**Note:**  The file is likely fetched and dropped by the binary as part of C2 communication", "sentence_right": "**1.** %appdata%\\Mozilla\\Firefox\\Profiles", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "calculated size is less than the threshold value or if none of the browser directory mentioned above exists, the binary terminates.", "context_left": "For the files found, it adds up the size of all these files and checks if it is greater than or equal to the specified threshold value. In case the", "context_right": "**Note:** The size check is likely performed to detect analysis environments like Sandbox and Virtual Machine", "_context_left": "In case the ", "_context_right": "", "sentence_left": "For the files found, it adds up the size of all these files and checks if it is greater than or equal to the specified threshold value.", "sentence_right": "**Note:** The size check is likely performed to detect analysis environments like Sandbox and Virtual Machine", "label": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.   Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "label_id": 1675, "label_title": "Process Injection: Ptrace System Calls", "label_link": "https://attack.mitre.org/techniques/T1631/001", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "The size check is likely performed to detect analysis environments like Sandbox and Virtual Machine", "context_left": "In case the calculated size is less than the threshold value or if none of the browser directory mentioned above exists, the binary terminates. **Note:**", "context_right": "Following files are used for calculating the size in case of Chrome browser:", "_context_left": "**Note:** ", "_context_right": "", "sentence_left": "In case the calculated size is less than the threshold value or if none of the browser directory mentioned above exists, the binary terminates.", "sentence_right": "Following files are used for calculating the size in case of Chrome browser:", "label": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.   Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "label_id": 1675, "label_title": "Process Injection: Ptrace System Calls", "label_link": "https://attack.mitre.org/techniques/T1631/001", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "Figure 7 below shows the code responsible for performing the threshold check. ![Threshold Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Threshold%20Check.jpg) *Figure 7: Code section which performs the threshold check*", "_context_left": "![Threshold Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Threshold%20Check.jpg)", "sentence_left": "Figure 7 below shows the code responsible for performing the threshold check.", "sentence_right": "*Figure 7: Code section which performs the threshold check*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Code section which performs the threshold check", "context_left": "![Threshold Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Threshold%20Check.jpg) *Figure 7:", "context_right": "* If the check passes for any of the three browser directories mentioned above then it starts the network communication.", "_context_left": "*Figure 7: ", "_context_right": "*", "sentence_left": "![Threshold Check](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Threshold%20Check.jpg)", "sentence_right": "If the check passes for any of the three browser directories mentioned above then it starts the network communication.", "label": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.   Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "label_id": 1675, "label_title": "Process Injection: Ptrace System Calls", "label_link": "https://attack.mitre.org/techniques/T1631/001", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "If the check passes for any of the three browser directories mentioned above then it starts the network", "context_left": "*Figure 7: Code section which performs the threshold check*", "context_right": "communication. ### **Network Communication**", "_context_left": "", "_context_right": " communication.", "sentence_left": "*Figure 7: Code section which performs the threshold check*", "sentence_right": "### **Network Communication**", "label": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.   Ptrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.[1] Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using malloc) then invoking that memory with PTRACE_SETREGS to set the register containing the next instruction to execute. Ptrace system call injection can also be done with PTRACE_POKETEXT/PTRACE_POKEDATA, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).[1][2]  Ptrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.[3]  Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.", "label_id": 1675, "label_title": "Process Injection: Ptrace System Calls", "label_link": "https://attack.mitre.org/techniques/T1631/001", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "network communication is performed over standard TCP/IP protocol.", "context_left": "### **Network Communication** The", "context_right": "The details for the C2 server communication are mentioned below:", "_context_left": "The ", "_context_right": "", "sentence_left": "### **Network Communication**", "sentence_right": "The details for the C2 server communication are mentioned below:", "label": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server. Adversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS. For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are SMB, SSH, or RDP.", "label_id": 452, "label_title": "Application Layer Protocol", "label_link": "https://attack.mitre.org/techniques/T1071", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "The network communication is performed over standard TCP/IP protocol. The details for the", "context_right": "server communication are mentioned below: **C2 Domain:** curly-waterfall-360d.fetrikekke531.workers.dev", "_context_left": "The details for the ", "_context_right": " server communication are mentioned below:", "sentence_left": "The network communication is performed over standard TCP/IP protocol.", "sentence_right": "**C2 Domain:** curly-waterfall-360d.fetrikekke531.workers.dev", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "The details for the C2 server communication are mentioned below: **", "context_right": "Domain:** curly-waterfall-360d.fetrikekke531.workers.dev **Beacon request URI:** auth/local/register", "_context_left": "**", "_context_right": " Domain:** curly-waterfall-360d.fetrikekke531.workers.dev", "sentence_left": "The details for the C2 server communication are mentioned below:", "sentence_right": "**Beacon request URI:** auth/local/register", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Beacon", "context_left": "**C2 Domain:** curly-waterfall-360d.fetrikekke531.workers.dev **", "context_right": "request URI:** auth/local/register **Request Type:** POST", "_context_left": "**", "_context_right": " request URI:** auth/local/register", "sentence_left": "**C2 Domain:** curly-waterfall-360d.fetrikekke531.workers.dev", "sentence_right": "**Request Type:** POST", "label": "[Cobalt Strike](https://attack.mitre.org/software/S0154) is a commercial, full-featured, remote access tool that bills itself as “adversary simulation software designed to execute targeted attacks and emulate the post-exploitation actions of advanced threat actors”. Cobalt Strike’s interactive post-exploit capabilities cover the full range of ATT&CK tactics, all executed within a single, integrated system.(Citation: cobaltstrike manual) In addition to its own capabilities, [Cobalt Strike](https://attack.mitre.org/software/S0154) leverages the capabilities of other well-known tools such as Metasploit and [Mimikatz](https://attack.mitre.org/software/S0002).(Citation: cobaltstrike manual)", "label_id": 1049, "label_title": "Cobalt Strike", "label_link": "https://attack.mitre.org/software/S0154", "entity_class": "CE", "entity_type": "MALWARE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "**username** - {encoded %USERPROFILE% creation timestamp}\\_{random\\_data} **Note:** During analysis we didn’t get any active response from the", "context_right": "server. As a result, we couldn’t analyse the full behaviour of the malicious binary.", "_context_left": "**Note:** During analysis we didn’t get any active response from the ", "_context_right": " server.", "sentence_left": "**username** - {encoded %USERPROFILE% creation timestamp}\\_{random\\_data}", "sentence_right": "As a result, we couldn’t analyse the full behaviour of the malicious binary.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "**[+] SSL Certificate** The thumbprint of the SSL certificate of the", "context_right": "domain is: 5cdf93a4081898d99a686ad472b553cddaa9f3bf **Below are some important details of this SSL certificate:**", "_context_left": "The thumbprint of the SSL certificate of the ", "_context_right": " domain is: 5cdf93a4081898d99a686ad472b553cddaa9f3bf", "sentence_left": "**[+] SSL Certificate**", "sentence_right": "**Below are some important details of this SSL certificate:**", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "**Subject:** CN=*.fetrikekke531.workers[.]dev Using the thumbprint of the SSL certificate as a pivot, we discovered another", "context_right": "domain: virustotall-360d.fetrikekke531.workers[.]dev As we can see, the subdomain in above domain spoofs VirusTotal.", "_context_left": "Using the thumbprint of the SSL certificate as a pivot, we discovered another ", "_context_right": " domain: virustotall-360d.fetrikekke531.workers[.]dev", "sentence_left": "**Subject:** CN=*.fetrikekke531.workers[.]dev", "sentence_right": "As we can see, the subdomain in above domain spoofs VirusTotal.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "macro", "context_left": "### **Attack-chain: Variant 2** The second variant of this attack, which we observed in August 2021 made significant changes to the", "context_right": "code used in the document to deploy the payload on the machine. MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612", "_context_left": "The second variant of this attack, which we observed in August 2021 made significant changes to the ", "_context_right": " code used in the document to deploy the payload on the machine.", "sentence_left": "### **Attack-chain: Variant 2**", "sentence_right": "MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "document to deploy the payload on the machine.", "context_left": "### **Attack-chain: Variant 2** The second variant of this attack, which we observed in August 2021 made significant changes to the macro code used in the", "context_right": "MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612", "_context_left": "The second variant of this attack, which we observed in August 2021 made significant changes to the macro code used in the ", "_context_right": "", "sentence_left": "### **Attack-chain: Variant 2**", "sentence_right": "MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612", "label": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566). While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).", "label_id": 260, "label_title": "User Execution", "label_link": "https://attack.mitre.org/techniques/T1204", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "document template", "context_left": "MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612 Similar to variant 1, variant 2 also downloads a remote", "context_right": "hosted on an attacker-controlled Cloudflare Worker instance. However, unlike variant 1, in this case, the persistence document template as well as the final payload—both are embedded inside the stage-2 document itself.", "_context_left": "Similar to variant 1, variant 2 also downloads a remote ", "_context_right": " hosted on an attacker-controlled Cloudflare Worker instance.", "sentence_left": "MD5 hash of the document: 2043b7129bfbe83c95a27c0a20d10612", "sentence_right": "However, unlike variant 1, in this case, the persistence document template as well as the final payload—both are embedded inside the stage-2 document itself.", "label": "Adversaries may create or modify references in Office document templates to conceal malicious code or force authentication attempts. Microsoft’s Office Open XML (OOXML) specification defines an XML-based format for Office documents (.docx, xlsx, .pptx) to replace older binary formats (.doc, .xls, .ppt). OOXML files are packed together ZIP archives compromised of various XML files, referred to as parts, containing properties that collectively define how a document is rendered. (Citation: Microsoft Open XML July 2017) Properties within parts may reference shared public resources accessed via online URLs. For example, template properties reference a file, serving as a pre-formatted document blueprint, that is fetched when the document is loaded. Adversaries may abuse this technology to initially conceal malicious code to be executed via documents. Template references injected into a document may enable malicious payloads to be fetched and executed when the document is loaded. (Citation: SANS Brian Wiltse Template Injection) These documents can be delivered via other techniques such as [Phishing](https://attack.mitre.org/techniques/T1566) and/or [Taint Shared Content](https://attack.mitre.org/techniques/T1080) and may evade static detections since no typical indicators (VBA macro, script, etc.) are present until after the malicious payload is fetched. (Citation: Redxorblue Remote Template Injection) Examples have been seen in the wild where template injection was used to load malicious code containing an exploit. (Citation: MalwareBytes Template Injection OCT 2017) This technique may also enable [Forced Authentication](https://attack.mitre.org/techniques/T1187) by injecting a SMB/HTTPS (or other credential prompting) URL and triggering an authentication attempt. (Citation: Anomali Template Injection MAR 2018) (Citation: Talos Template Injection July 2017) (Citation: ryhanson phishery SEPT 2016)", "label_id": 444, "label_title": "Template Injection", "label_link": "https://attack.mitre.org/techniques/T1221", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "the persistence document template", "context_left": "Similar to variant 1, variant 2 also downloads a remote document template hosted on an attacker-controlled Cloudflare Worker instance. However, unlike variant 1, in this case,", "context_right": "as well as the final payload—both are embedded inside the stage-2 document itself. It uses a clever technique to extract these contents and drop them on the machine.", "_context_left": "However, unlike variant 1, in this case, ", "_context_right": " as well as the final payload—both are embedded inside the stage-2 document itself.", "sentence_left": "Similar to variant 1, variant 2 also downloads a remote document template hosted on an attacker-controlled Cloudflare Worker instance.", "sentence_right": "It uses a clever technique to extract these contents and drop them on the machine.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "payload—both are embedded inside the stage-2 document itself.", "context_left": "Similar to variant 1, variant 2 also downloads a remote document template hosted on an attacker-controlled Cloudflare Worker instance. However, unlike variant 1, in this case, the persistence document template as well as the final", "context_right": "It uses a clever technique to extract these contents and drop them on the machine.", "_context_left": "However, unlike variant 1, in this case, the persistence document template as well as the final ", "_context_right": "", "sentence_left": "Similar to variant 1, variant 2 also downloads a remote document template hosted on an attacker-controlled Cloudflare Worker instance.", "sentence_right": "It uses a clever technique to extract these contents and drop them on the machine.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**Variant #2** ![Figure 7](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%207.jpg) *Figure 8: Attack-chain of the second variant*", "_context_left": "![Figure 7](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%207.jpg)", "sentence_left": "**Variant #2**", "sentence_right": "*Figure 8: Attack-chain of the second variant*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "document template", "context_left": "Below is the description of attack flow. **1.** Stage-1 document downloads remote", "context_right": "(Stage-2) **2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory.", "_context_left": "**1.** Stage-1 document downloads remote ", "_context_right": " (Stage-2)", "sentence_left": "Below is the description of attack flow.", "sentence_right": "**2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "MS Office Word was used to download the document template", "context_left": "**1.** Stage-1 document downloads remote document template (Stage-2) **2.** Since", "context_right": "(Stage-2), by default it will be present inside the INetCache directory. The VBA macro code uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9.", "_context_left": "**2.** Since ", "_context_right": " (Stage-2), by default it will be present inside the INetCache directory.", "sentence_left": "**1.** Stage-1 document downloads remote document template (Stage-2)", "sentence_right": "The VBA macro code uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "VBA macro code", "context_left": "**2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory. The", "context_right": "uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9. ![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png)", "_context_left": "The ", "_context_right": " uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9.", "sentence_left": "**2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory.", "sentence_right": "![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png)", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\"", "context_left": "**2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory. The VBA macro code uses a clever technique to", "context_right": "as shown in Figure 9. ![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png)", "_context_left": "The VBA macro code uses a clever technique to ", "_context_right": " as shown in Figure 9.", "sentence_left": "**2.** Since MS Office Word was used to download the document template (Stage-2), by default it will be present inside the INetCache directory.", "sentence_right": "![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png)", "label": "Adversaries may attempt to manipulate features of their artifacts to make them appear legitimate or benign to users and/or security tools. Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names. Renaming abusable system utilities to evade security monitoring is also a form of [Masquerading](https://attack.mitre.org/techniques/T1036).(Citation: LOLBAS Main Site)", "label_id": 142, "label_title": "Masquerading", "label_link": "https://attack.mitre.org/techniques/T1036", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "The VBA macro code uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9. ![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%208.png) *Figure 9: VBA macro code of Stage-2 document template of variant 2*", "_context_left": "![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%208.png)", "sentence_left": "The VBA macro code uses a clever technique to locate this file in the path: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" as shown in Figure 9.", "sentence_right": "*Figure 9: VBA macro code of Stage-2 document template of variant 2*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "VBA macro code", "context_left": "![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png) *Figure 9:", "context_right": "of Stage-2 document template of variant 2* **a)** This code enumerates the files in the directory: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated)", "_context_left": "*Figure 9: ", "_context_right": " of Stage-2 document template of variant 2*", "sentence_left": "![Figure 8](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%208.png)", "sentence_right": "**a)** This code enumerates the files in the directory: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated)", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "enumerates the files in the directory", "context_left": "*Figure 9: VBA macro code of Stage-2 document template of variant 2* **a)** This code", "context_right": ": \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated) **b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\".", "_context_left": "**a)** This code ", "_context_right": ": \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated)", "sentence_left": "*Figure 9: VBA macro code of Stage-2 document template of variant 2*", "sentence_right": "**b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\".", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Unzip the contents to the directory path", "context_left": "**a)** This code enumerates the files in the directory: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated) **b)** Once it finds the file, it will", "context_right": ": \"%localappdata%\\VirtualEnv\". OOXML file format is essentially an archive file format, and that’s why the macro unzips it.", "_context_left": "**b)** Once it finds the file, it will ", "_context_right": ": \"%localappdata%\\VirtualEnv\".", "sentence_left": "**a)** This code enumerates the files in the directory: \"%localappdata%\\Microsoft\\Windows\\INetCache\\Content.MSO\\\" until it finds a file with size 70400 (truncated)", "sentence_right": "OOXML file format is essentially an archive file format, and that’s why the macro unzips it.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "OOXML file format is essentially an archive file format", "context_left": "**b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\".", "context_right": ", and that’s why the macro unzips it. **c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template.", "_context_left": "", "_context_right": ", and that’s why the macro unzips it.", "sentence_left": "**b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\".", "sentence_right": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "and that’s why the macro unzips it.", "context_left": "**b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\". OOXML file format is essentially an archive file format,", "context_right": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template.", "_context_left": "OOXML file format is essentially an archive file format, ", "_context_right": "", "sentence_left": "**b)** Once it finds the file, it will Unzip the contents to the directory path: \"%localappdata%\\VirtualEnv\".", "sentence_right": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "contains an encoded", "context_left": "OOXML file format is essentially an archive file format, and that’s why the macro unzips it. **c)** Inside the OOXML file, there is an XML file called Archive.xml which", "context_right": "version of the persistence template. This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "_context_left": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which ", "_context_right": " version of the persistence template.", "sentence_left": "OOXML file format is essentially an archive file format, and that’s why the macro unzips it.", "sentence_right": "This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "persistence template.", "context_left": "OOXML file format is essentially an archive file format, and that’s why the macro unzips it. **c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the", "context_right": "This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "_context_left": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the ", "_context_right": "", "sentence_left": "OOXML file format is essentially an archive file format, and that’s why the macro unzips it.", "sentence_right": "This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "decoded", "context_left": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template. This is", "context_right": "and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm **d)** In order to decode the contents of Archive.xml it performs character substitution to restore the original characters of the base64-encoded string.", "_context_left": "This is ", "_context_right": " and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "sentence_left": "**c)** Inside the OOXML file, there is an XML file called Archive.xml which contains an encoded version of the persistence template.", "sentence_right": "**d)** In order to decode the contents of Archive.xml it performs character substitution to restore the original characters of the base64-encoded string.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "In order to decode the contents of Archive.xml it performs character substitution to restore the original characters of the base64-encoded string", "context_left": "This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm **d)**", "context_right": ". Then it adds the prefix: \"UEs\" and base64 decodes it.", "_context_left": "**d)** ", "_context_right": ".", "sentence_left": "This is decoded and dropped to the path: %appdata%\\Microsoft\\Word\\STARTUP\\Settings.dotm", "sentence_right": "Then it adds the prefix: \"UEs\" and base64 decodes it.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "custom base64 decoding", "context_left": "**Code:** Base64Decode(\"UEs\" + Replace(Replace(data, \"#\", \"A\"), \"@\", \"Q\")) This type of", "context_right": "is similar to variant 1 **3.** Once a new instance of the Word application is started on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10.", "_context_left": "This type of ", "_context_right": " is similar to variant 1", "sentence_left": "**Code:** Base64Decode(\"UEs\" + Replace(Replace(data, \"#\", \"A\"), \"@\", \"Q\"))", "sentence_right": "**3.** Once a new instance of the Word application is started on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "instance of the Word application is started", "context_left": "This type of custom base64 decoding is similar to variant 1 **3.** Once a new", "context_right": "on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10. ![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "_context_left": "**3.** Once a new ", "_context_right": " on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10.", "sentence_left": "This type of custom base64 decoding is similar to variant 1", "sentence_right": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "persistence template", "context_left": "This type of custom base64 decoding is similar to variant 1 **3.** Once a new instance of the Word application is started on the machine, this", "context_right": "is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10. ![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "_context_left": "**3.** Once a new instance of the Word application is started on the machine, this ", "_context_right": " is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10.", "sentence_left": "This type of custom base64 decoding is similar to variant 1", "sentence_right": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**3.** Once a new instance of the Word application is started on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10. ![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%209.png) *Figure 10: VBA macro code of persistence template of variant 2*", "_context_left": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%209.png)", "sentence_left": "**3.** Once a new instance of the Word application is started on the machine, this persistence template is loaded and the next sequence of steps are carried out to drop the final payload as shown in Figure 10.", "sentence_right": "*Figure 10: VBA macro code of persistence template of variant 2*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "VBA macro code", "context_left": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png) *Figure 10:", "context_right": "of persistence template of variant 2* **a)** Decodes and extracts the payload from WebArchive.xml file.", "_context_left": "*Figure 10: ", "_context_right": " of persistence template of variant 2*", "sentence_left": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "sentence_right": "**a)** Decodes and extracts the payload from WebArchive.xml file.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "persistence template", "context_left": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png) *Figure 10: VBA macro code of", "context_right": "of variant 2* **a)** Decodes and extracts the payload from WebArchive.xml file.", "_context_left": "*Figure 10: VBA macro code of ", "_context_right": " of variant 2*", "sentence_left": "![Figure 9](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/CloudFall/Picture%209.png)", "sentence_right": "**a)** Decodes and extracts the payload from WebArchive.xml file.", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "Decodes and extracts the payload from WebArchive.xml file", "context_left": "*Figure 10: VBA macro code of persistence template of variant 2* **a)**", "context_right": ". The method for decoding is similar to the one described previously.", "_context_left": "**a)** ", "_context_right": ".", "sentence_left": "*Figure 10: VBA macro code of persistence template of variant 2*", "sentence_right": "The method for decoding is similar to the one described previously.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "The method for decoding", "context_left": "**a)** Decodes and extracts the payload from WebArchive.xml file.", "context_right": "is similar to the one described previously. **b)** The decoded file is the final payload which will be dropped to the path: %localappdata%\\VirtualEnv\\word\\Virtual.exe", "_context_left": "", "_context_right": " is similar to the one described previously.", "sentence_left": "**a)** Decodes and extracts the payload from WebArchive.xml file.", "sentence_right": "**b)** The decoded file is the final payload which will be dropped to the path: %localappdata%\\VirtualEnv\\word\\Virtual.exe", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "decoded file", "context_left": "The method for decoding is similar to the one described previously. **b)** The", "context_right": "is the final payload which will be dropped to the path: %localappdata%\\VirtualEnv\\word\\Virtual.exe **4.** Finally the payload Virtual.exe will be executed.", "_context_left": "**b)** The ", "_context_right": " is the final payload which will be dropped to the path: %localappdata%\\VirtualEnv\\word\\Virtual.exe", "sentence_left": "The method for decoding is similar to the one described previously.", "sentence_right": "**4.** Finally the payload Virtual.exe will be executed.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "Figure 11 shows the sandbox detection for the final payload. ![Figure 14](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%2014.png) *Figure 11: Zscaler Cloud Sandbox detection*", "_context_left": "![Figure 14](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%2014.png)", "sentence_left": "Figure 11 shows the sandbox detection for the final payload.", "sentence_right": "*Figure 11: Zscaler Cloud Sandbox detection*", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "| abe0b037dfa52d895c1cd8148988fcc1 | Virtual.exe | **[+]", "context_right": "Domains - Documents** documents.publicserver[.]workers.dev", "_context_left": "**[+] ", "_context_right": " Domains - Documents**", "sentence_left": "| abe0b037dfa52d895c1cd8148988fcc1 | Virtual.exe |", "sentence_right": "documents.publicserver[.]workers.dev", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "api.office365online.workers[.]dev **[+]", "context_right": "Domains - Dropped binary** curly-waterfall-360d.fetrikekke531.workers[.]dev", "_context_left": "**[+] ", "_context_right": " Domains - Dropped binary**", "sentence_left": "api.office365online.workers[.]dev", "sentence_right": "curly-waterfall-360d.fetrikekke531.workers[.]dev", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "C2", "context_left": "falling-haze-1812.jerkufetra754.workers[.]dev **[+]", "context_right": "domains - Additional** virustotall-360d.fetrikekke531.workers[.]dev", "_context_left": "**[+] ", "_context_right": " domains - Additional**", "sentence_left": "falling-haze-1812.jerkufetra754.workers[.]dev", "sentence_right": "virustotall-360d.fetrikekke531.workers[.]dev", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "persistence template", "context_left": "| Stage-2 marco doc | documents.publicserver[.]workers.dev/docs/latesoffice365.dc-microsoft.workers[.]dev/main/docoffice365.microsoft-cloud.workers[.]dev/encoding/data/officeasia.office365-cloud.workers[.]dev/office/online | | Stage-3", "context_right": "| cloud.digitalstorage.workers[.]dev/old/dataplug.repository.workers[.]dev/modules/private | | Stage-4 exe payload | mirror.advancestore.workers[.]dev/max/bsmirror.advancestore.workers[.]dev/min/bspublic.datastore.workers[.]dev/strong/bs |", "_context_left": "| Stage-3 ", "_context_right": " | cloud.digitalstorage.workers[.]dev/old/dataplug.repository.workers[.]dev/modules/private |", "sentence_left": "| Stage-2 marco doc | documents.publicserver[.]workers.dev/docs/latesoffice365.dc-microsoft.workers[.]dev/main/docoffice365.microsoft-cloud.workers[.]dev/encoding/data/officeasia.office365-cloud.workers[.]dev/office/online |", "sentence_right": "| Stage-4 exe payload | mirror.advancestore.workers[.]dev/max/bsmirror.advancestore.workers[.]dev/min/bspublic.datastore.workers[.]dev/strong/bs |", "label": "Adversaries may leverage Microsoft Office-based applications for persistence between startups. Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started; this can include the use of Office Template Macros and add-ins. A variety of features have been discovered in Outlook that can be abused to obtain persistence, such as Outlook rules, forms, and Home Page.(Citation: SensePost Ruler GitHub) These persistence mechanisms can work within Outlook or be used through Office 365.(Citation: TechNet O365 Outlook Rules)", "label_id": 264, "label_title": "Office Application Startup", "label_link": "https://attack.mitre.org/techniques/T1137", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**[+] Decoy #2** ![Figure 10](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%2010.png) **[+] Decoy #3**", "_context_left": "![Figure 10](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%2010.png)", "sentence_left": "**[+] Decoy #2**", "sentence_right": "**[+] Decoy #3**", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**[+] Decoy #3** ![Figure 11](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%2011.png) **[+] Decoy #4**", "_context_left": "![Figure 11](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%2011.png)", "sentence_left": "**[+] Decoy #3**", "sentence_right": "**[+] Decoy #4**", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**[+] Decoy #4** ![Figure 12](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%2012.png) **[+] Decoy #5**", "_context_left": "![Figure 12](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%2012.png)", "sentence_left": "**[+] Decoy #4**", "sentence_right": "**[+] Decoy #5**", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}
{"mention": "CloudFall", "context_left": "**[+] Decoy #5** ![Figure 13](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "context_right": "/Picture%2013.png) ###", "_context_left": "![Figure 13](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/", "_context_right": "/Picture%2013.png)", "sentence_left": "**[+] Decoy #5**", "sentence_right": "###", "label": "CloudFall", "label_id": 1369, "label_title": "CloudFall", "label_link": "http://www.bosch.com#node1fq5p8ki8x1", "entity_class": "CE", "entity_type": "GROUP", "document": "zscaler_2021-09-09_cloudfall-targets-researchers-and-scientists"}