{"mention": "DLL files, and launched with this commands", "context_left": "We have been tracking this activity since December 27th of 2019 The main tools of this threat actor, are built as", "context_right": ": * “C:\\Windows\\System32\\rundll32.exe” shell32.dll,ShellExec\\_RunDLL regsvr32 /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "_context_left": "The main tools of this threat actor, are built as ", "_context_right": ":", "sentence_left": "We have been tracking this activity since December 27th of 2019", "sentence_right": "* “C:\\Windows\\System32\\rundll32.exe” shell32.dll,ShellExec\\_RunDLL regsvr32 /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "C:\\Windows\\System32\\rundll32.exe”", "context_left": "The main tools of this threat actor, are built as DLL files, and launched with this commands: * “", "context_right": "shell32.dll,ShellExec\\_RunDLL regsvr32 /s C:\\ProgramData\\pubpool.dll /i:process104.dll * “C:\\WINDOWS\\system32\\regsvr32.exe” /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "_context_left": "* “", "_context_right": " shell32.dll,ShellExec\\_RunDLL regsvr32 /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "sentence_left": "The main tools of this threat actor, are built as DLL files, and launched with this commands:", "sentence_right": "* “C:\\WINDOWS\\system32\\regsvr32.exe” /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "ShellExec\\_RunDLL regsvr32 /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "context_left": "The main tools of this threat actor, are built as DLL files, and launched with this commands: * “C:\\Windows\\System32\\rundll32.exe” shell32.dll,", "context_right": "* “C:\\WINDOWS\\system32\\regsvr32.exe” /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "_context_left": "* “C:\\Windows\\System32\\rundll32.exe” shell32.dll,", "_context_right": "", "sentence_left": "The main tools of this threat actor, are built as DLL files, and launched with this commands:", "sentence_right": "* “C:\\WINDOWS\\system32\\regsvr32.exe” /s C:\\ProgramData\\pubpool.dll /i:process104.dll", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "decrypt and load files", "context_left": "**1. pubpool.dll file** Lab52 has analyzed pubpool.dll and this component has code to", "context_right": ", working as a dll loader. In the next picture, you can see one example of a dll being decrypted by pubpool in memory:", "_context_left": "Lab52 has analyzed pubpool.dll and this component has code to ", "_context_right": ", working as a dll loader.", "sentence_left": "**1. pubpool.dll file**", "sentence_right": "In the next picture, you can see one example of a dll being decrypted by pubpool in memory:", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "dll being decrypted by pubpool in memory", "context_left": "Lab52 has analyzed pubpool.dll and this component has code to decrypt and load files, working as a dll loader. In the next picture, you can see one example of a", "context_right": ": ![](https://lab52.io/blog/wp-content/uploads/2020/02/image-1024x444.png)library loaded in memory.", "_context_left": "In the next picture, you can see one example of a ", "_context_right": ":", "sentence_left": "Lab52 has analyzed pubpool.dll and this component has code to decrypt and load files, working as a dll loader.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-1024x444.png)library loaded in memory.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "main purpose is to infect USB devices", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-1.png) process104.dll is decrypted and mapped as inject\\_usb.dll. It’s", "context_right": ". This library exports a function named “done”.", "_context_left": "It’s ", "_context_right": ".", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-1.png) process104.dll is decrypted and mapped as inject\\_usb.dll.", "sentence_right": "This library exports a function named “done”.", "label": "Adversaries may move onto systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into a system and executes. In the case of Lateral Movement, this may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system. In the case of Initial Access, this may occur through manual manipulation of the media, modification of systems used to initially format the media, or modification to the media's firmware itself.", "label_id": 349, "label_title": "Replication Through Removable Media", "label_link": "https://attack.mitre.org/techniques/T1091", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "process100.dll is decrypted and mapped as inject\\_host.dll.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-4.png)", "context_right": "This module execute the malware.", "_context_left": "", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-4.png)", "sentence_right": "This module execute the malware.", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "*runtime\\_report.dll** is decrypted and mapped as **TinyMet.dll**", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-7.png) *", "context_right": ". This module deploys TinyMET[1], a “tiny” meterpreter stager.", "_context_left": "*", "_context_right": ".", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-7.png)", "sentence_right": "This module deploys TinyMET[1], a “tiny” meterpreter stager.", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "meterpreter", "context_left": "**runtime\\_report.dll** is decrypted and mapped as **TinyMet.dll**. This module deploys TinyMET[1], a “tiny”", "context_right": "stager. This TinyMet version has a Mutex TEST\\_9I89JNDBPWQ9ND:", "_context_left": "This module deploys TinyMET[1], a “tiny” ", "_context_right": " stager.", "sentence_left": "**runtime\\_report.dll** is decrypted and mapped as **TinyMet.dll**.", "sentence_right": "This TinyMet version has a Mutex TEST\\_9I89JNDBPWQ9ND:", "label": "Meterpreter", "label_id": 1286, "label_title": "Meterpreter", "label_link": "http://www.bosch.com#node1fvup9pj1x11", "entity_class": "CE", "entity_type": "TOOL", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "TinyMet", "context_left": "This module deploys TinyMET[1], a “tiny” meterpreter stager. This", "context_right": "version has a Mutex TEST\\_9I89JNDBPWQ9ND: ![](https://lab52.io/blog/wp-content/uploads/2020/02/image-8.png)", "_context_left": "This ", "_context_right": " version has a Mutex TEST\\_9I89JNDBPWQ9ND:", "sentence_left": "This module deploys TinyMET[1], a “tiny” meterpreter stager.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-8.png)", "label": "Meterpreter", "label_id": 1286, "label_title": "Meterpreter", "label_link": "http://www.bosch.com#node1fvup9pj1x11", "entity_class": "CE", "entity_type": "TOOL", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}
{"mention": "TinyMet", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-8.png)", "context_right": "connects to Internet using a Hardcoded domain and User-Agent that can be seen in the next picture: ![](https://lab52.io/blog/wp-content/uploads/2020/02/image-9-1024x440.png)", "_context_left": "", "_context_right": " connects to Internet using a Hardcoded domain and User-Agent that can be seen in the next picture:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-8.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/02/image-9-1024x440.png)", "label": "Meterpreter", "label_id": 1286, "label_title": "Meterpreter", "label_link": "http://www.bosch.com#node1fvup9pj1x11", "entity_class": "CE", "entity_type": "TOOL", "document": "lab52_2020-02-12_intelligence-operation-against-targets-in"}