{"mention": "Malware Leveraging XML-RPC Vulnerability to Exploit", "context_left": "", "context_right": "WordPress Sites September 16, 2020", "_context_left": "", "_context_right": " WordPress Sites", "sentence_left": "", "sentence_right": "September 16, 2020", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "vulnerabilities within](/blogs/research/cybercriminals-targeting-multiple-vulnerabilities-wordpress-plugins) and [attacks on](/blogs/research/compromised-wordpress-sites-used-distribute-adwind-rat) sites built with WordPress.", "context_left": "September 16, 2020 We have written a number of blogs about [", "context_right": "And, when you consider that [34 percent of all websites](https://hostingtribunal.com/blog/wordpress-statistics/) in the world are built with WordPress, it’s understandable that cybercriminals will continue to focus their attention on this popular platform.", "_context_left": "We have written a number of blogs about [", "_context_right": "", "sentence_left": "September 16, 2020", "sentence_right": "And, when you consider that [34 percent of all websites](https://hostingtribunal.com/blog/wordpress-statistics/) in the world are built with WordPress, it’s understandable that cybercriminals will continue to focus their attention on this popular platform.", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "XML-RPC attack", "context_left": "And, when you consider that [34 percent of all websites](https://hostingtribunal.com/blog/wordpress-statistics/) in the world are built with WordPress, it’s understandable that cybercriminals will continue to focus their attention on this popular platform. One of the most common attack vectors employed by these bad actors is to launch an", "context_right": ". XML-RPC on WordPress, which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser.", "_context_left": "One of the most common attack vectors employed by these bad actors is to launch an ", "_context_right": ".", "sentence_left": "And, when you consider that [34 percent of all websites](https://hostingtribunal.com/blog/wordpress-statistics/) in the world are built with WordPress, it’s understandable that cybercriminals will continue to focus their attention on this popular platform.", "sentence_right": "XML-RPC on WordPress, which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser.", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "XML-RPC on WordPress", "context_left": "One of the most common attack vectors employed by these bad actors is to launch an XML-RPC attack.", "context_right": ", which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser. Attackers use this channel to establish a remote connection to a WordPress site and make modifications without being directly logged in to your WordPress system.", "_context_left": "", "_context_right": ", which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser.", "sentence_left": "One of the most common attack vectors employed by these bad actors is to launch an XML-RPC attack.", "sentence_right": "Attackers use this channel to establish a remote connection to a WordPress site and make modifications without being directly logged in to your WordPress system.", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "establish a remote connection to a WordPress site and make modifications without being directly logged in to your WordPress", "context_left": "XML-RPC on WordPress, which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser. Attackers use this channel to", "context_right": "system. However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access.", "_context_left": "Attackers use this channel to ", "_context_right": " system.", "sentence_left": "XML-RPC on WordPress, which is enabled by default, is actually an API that provides third-party applications and services the ability to interact with WordPress sites, rather than through a browser.", "sentence_right": "However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access.", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access", "context_left": "Attackers use this channel to establish a remote connection to a WordPress site and make modifications without being directly logged in to your WordPress system. However, if a WordPress site didn’t disable XML-RPC,", "context_right": ". Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a C&C server which then are attacked leveraging the XML-RPC pingback method to fingerprint the existing vulnerabilities on the listed WordPress sites.", "_context_left": "However, if a WordPress site didn’t disable XML-RPC, ", "_context_right": ".", "sentence_left": "Attackers use this channel to establish a remote connection to a WordPress site and make modifications without being directly logged in to your WordPress system.", "sentence_right": "Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a C&C server which then are attacked leveraging the XML-RPC pingback method to fingerprint the existing vulnerabilities on the listed WordPress sites.", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access. Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a", "context_right": "server which then are attacked leveraging the XML-RPC pingback method to fingerprint the existing vulnerabilities on the listed WordPress sites. Even though we saw a payload used in this attack in our Zscaler cloud and also found a campaign of similar files on [VirusTotal](https://www.virustotal.com/graph/g4f708a8a274f4ef1a8727d0c6e00d5a5f5d879652067434797084e53f5d37bef), we haven’t found any specific spam templates used for this campaign.", "_context_left": "Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a ", "_context_right": " server which then are attacked leveraging the XML-RPC pingback method to fingerprint the existing vulnerabilities on the listed WordPress sites.", "sentence_left": "However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access.", "sentence_right": "Even though we saw a payload used in this attack in our Zscaler cloud and also found a campaign of similar files on [VirusTotal](https://www.virustotal.com/graph/g4f708a8a274f4ef1a8727d0c6e00d5a5f5d879652067434797084e53f5d37bef), we haven’t found any specific spam templates used for this campaign.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "XML-RPC pingback method to fingerprint the existing vulnerabilities on the listed WordPress sites.", "context_left": "However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access. Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a C&C server which then are attacked leveraging the", "context_right": "Even though we saw a payload used in this attack in our Zscaler cloud and also found a campaign of similar files on [VirusTotal](https://www.virustotal.com/graph/g4f708a8a274f4ef1a8727d0c6e00d5a5f5d879652067434797084e53f5d37bef), we haven’t found any specific spam templates used for this campaign.", "_context_left": "Recently, the Zscaler ThreatLabZ team came across a scheme to attack WordPress sites where a malicious program gets a list of WordPress sites from a C&C server which then are attacked leveraging the ", "_context_right": "", "sentence_left": "However, if a WordPress site didn’t disable XML-RPC, there is no limit to the number of login attempts that can be made by a hacker, meaning it is just a matter of time before a cybercriminal can gain access.", "sentence_right": "Even though we saw a payload used in this attack in our Zscaler cloud and also found a campaign of similar files on [VirusTotal](https://www.virustotal.com/graph/g4f708a8a274f4ef1a8727d0c6e00d5a5f5d879652067434797084e53f5d37bef), we haven’t found any specific spam templates used for this campaign.", "label": "Adversaries may attempt to take advantage of a weakness in an Internet-facing computer or program using software, data, or commands in order to cause unintended or unanticipated behavior. The weakness in the system can be a bug, a glitch, or a design vulnerability. These applications are often websites, but can include databases (like SQL)(Citation: NVD CVE-2016-6662), standard services (like SMB(Citation: CIS Multiple SMB Vulnerabilities) or SSH), network device administration and management protocols (like SNMP and Smart Install(Citation: US-CERT TA18-106A Network Infrastructure Devices 2018)(Citation: Cisco Blog Legacy Device Attacks)), and any other applications with Internet accessible open sockets, such as web servers and related services.(Citation: NVD CVE-2014-7169) Depending on the flaw being exploited this may include [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211). If an application is hosted on cloud-based infrastructure and/or is containerized, then exploiting it may lead to compromise of the underlying instance or container. This can allow an adversary a path to access the cloud or container APIs, exploit container host access via [Escape to Host](https://attack.mitre.org/techniques/T1611), or take advantage of weak identity and access management policies. For websites and databases, the OWASP top 10 and CWE top 25 highlight the most common web-based vulnerabilities.(Citation: OWASP Top 10)(Citation: CWE top 25)", "label_id": 8, "label_title": "Exploit Public-Facing Application", "label_link": "https://attack.mitre.org/techniques/T1190", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "Unfortunately, we weren’t able to conclude if this was intentional or not. The initial layer of the malware is for decoding the URIs used to make initial contact with the", "context_right": "server. The first section is unpacked as shown in Figure 2:", "_context_left": "The initial layer of the malware is for decoding the URIs used to make initial contact with the ", "_context_right": " server.", "sentence_left": "Unfortunately, we weren’t able to conclude if this was intentional or not.", "sentence_right": "The first section is unpacked as shown in Figure 2:", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "decoding the URIs used to make initial", "context_left": "Unfortunately, we weren’t able to conclude if this was intentional or not. The initial layer of the malware is for", "context_right": "contact with the C&C server. The first section is unpacked as shown in Figure 2:", "_context_left": "The initial layer of the malware is for ", "_context_right": " contact with the C&C server.", "sentence_left": "Unfortunately, we weren’t able to conclude if this was intentional or not.", "sentence_right": "The first section is unpacked as shown in Figure 2:", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "section is unpacked as shown", "context_left": "The initial layer of the malware is for decoding the URIs used to make initial contact with the C&C server. The first", "context_right": "in Figure 2: ![Figure 2: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png)", "_context_left": "The first ", "_context_right": " in Figure 2:", "sentence_left": "The initial layer of the malware is for decoding the URIs used to make initial contact with the C&C server.", "sentence_right": "![Figure 2: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png)", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Decryption Loop", "context_left": "The first section is unpacked as shown in Figure 2: ![Figure 2:", "context_right": "](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png) *Figure 2: The decryption loop of this program.*", "_context_left": "![Figure 2: ", "_context_right": "](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png)", "sentence_left": "The first section is unpacked as shown in Figure 2:", "sentence_right": "*Figure 2: The decryption loop of this program.*", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "decryption loop of this program", "context_left": "![Figure 2: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png) *Figure 2: The", "context_right": ".* This decryption loop is a simple XOR decryption that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php.", "_context_left": "*Figure 2: The ", "_context_right": ".*", "sentence_left": "![Figure 2: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%202.png)", "sentence_right": "This decryption loop is a simple XOR decryption that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "decryption loop is a simple XOR decryption", "context_left": "*Figure 2: The decryption loop of this program.* This", "context_right": "that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php. Figure 3 shows the debugger dump.", "_context_left": "This ", "_context_right": " that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php.", "sentence_left": "*Figure 2: The decryption loop of this program.*", "sentence_right": "Figure 3 shows the debugger dump.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The decrypted string of this program", "context_left": "![Figure 3: Decrypted String](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%203.png) *Figure 3:", "context_right": ".* Next, the domain is generated using another XOR-based decryption where the key goes from B5 to C0.", "_context_left": "*Figure 3: ", "_context_right": ".*", "sentence_left": "![Figure 3: Decrypted String](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%203.png)", "sentence_right": "Next, the domain is generated using another XOR-based decryption where the key goes from B5 to C0.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "domain is generated using another XOR-based decryption", "context_left": "*Figure 3: The decrypted string of this program.* Next, the", "context_right": "where the key goes from B5 to C0. ![Figure 4: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%204.png)", "_context_left": "Next, the ", "_context_right": " where the key goes from B5 to C0.", "sentence_left": "*Figure 3: The decrypted string of this program.*", "sentence_right": "![Figure 4: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%204.png)", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The decryption loop for this program", "context_left": "![Figure 4: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%204.png) *Figure 4:", "context_right": ".* The domain generated is k6239847[.]lib.", "_context_left": "*Figure 4: ", "_context_right": ".*", "sentence_left": "![Figure 4: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%204.png)", "sentence_right": "The domain generated is k6239847[.]lib.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "DNS URI is decrypted using a similar XOR loop", "context_left": "*Figure 5: The DNS query.* The blockchain", "context_right": "as shown in Figure 6. The value compared depends on the size of the blockchain DNS URI.", "_context_left": "The blockchain ", "_context_right": " as shown in Figure 6.", "sentence_left": "*Figure 5: The DNS query.*", "sentence_right": "The value compared depends on the size of the blockchain DNS URI.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "decryption loop", "context_left": "![Figure 6: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%206.png) *Figure 6: The", "context_right": ".* These are first assembled in heap using **RtlAllocateHeap**.", "_context_left": "*Figure 6: The ", "_context_right": ".*", "sentence_left": "![Figure 6: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%206.png)", "sentence_right": "These are first assembled in heap using **RtlAllocateHeap**.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The decrypted strings", "context_left": "![Figure 7: Decrypted Strings](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%207.png) *Figure 7:", "context_right": ".* The code shown in Figure 8 is called several times to allocate heap to save decrypted strings that are used later to perform network activity or for creating files.", "_context_left": "*Figure 7: ", "_context_right": ".*", "sentence_left": "![Figure 7: Decrypted Strings](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%207.png)", "sentence_right": "The code shown in Figure 8 is called several times to allocate heap to save decrypted strings that are used later to perform network activity or for creating files.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "*Figure 10: The concatenated URL.* The DNS request generated produces a", "context_right": "IP of 217.8.117[.]48, which can be confirmed online at explorer.emercoin[.]com/nvs/dns. ![Figure 11: Domains found at emercoin.com](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2011.png)", "_context_left": "The DNS request generated produces a ", "_context_right": " IP of 217.8.117[.]48, which can be confirmed online at explorer.emercoin[.]com/nvs/dns.", "sentence_left": "*Figure 10: The concatenated URL.*", "sentence_right": "![Figure 11: Domains found at emercoin.com](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2011.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "*Figure 11: The domains found at emercoin.com.* The segment of a URL created during the first decryption loop (as shown above) is then used with the IP address to contact the", "context_right": ". The URL created is 217.8.117[.]48/lk4238fh317/update.", "_context_left": "The segment of a URL created during the first decryption loop (as shown above) is then used with the IP address to contact the ", "_context_right": ".", "sentence_left": "*Figure 11: The domains found at emercoin.com.*", "sentence_right": "The URL created is 217.8.117[.]48/lk4238fh317/update.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "during the first decryption loop", "context_left": "*Figure 11: The domains found at emercoin.com.* The segment of a URL created", "context_right": "(as shown above) is then used with the IP address to contact the C&C. The URL created is 217.8.117[.]48/lk4238fh317/update.", "_context_left": "The segment of a URL created ", "_context_right": " (as shown above) is then used with the IP address to contact the C&C.", "sentence_left": "*Figure 11: The domains found at emercoin.com.*", "sentence_right": "The URL created is 217.8.117[.]48/lk4238fh317/update.", "label": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system. One such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016) Sometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)", "label_id": 514, "label_title": "Deobfuscate/Decode Files or Information", "label_link": "https://attack.mitre.org/techniques/T1140", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "The URL created is 217.8.117[.]48/lk4238fh317/update. The", "context_right": "then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload. The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "_context_left": "The ", "_context_right": " then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload.", "sentence_left": "The URL created is 217.8.117[.]48/lk4238fh317/update.", "sentence_right": "The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload", "context_left": "The URL created is 217.8.117[.]48/lk4238fh317/update. The", "context_right": ". The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "_context_left": "The ", "_context_right": ".", "sentence_left": "The URL created is 217.8.117[.]48/lk4238fh317/update.", "sentence_right": "The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe", "context_left": "The C&C then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload. The", "context_right": ". ![Figure 12: Downloading updated version of itself](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2012.png)", "_context_left": "The ", "_context_right": ".", "sentence_left": "The C&C then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload.", "sentence_right": "![Figure 12: Downloading updated version of itself](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2012.png)", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The program downloading an updated version of itself.", "context_left": "![Figure 12: Downloading updated version of itself](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2012.png) *Figure 12:", "context_right": "* The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample, which downloads itself to ensure that the latest version of the malicious program is running on the system.", "_context_left": "*Figure 12: ", "_context_right": "*", "sentence_left": "![Figure 12: Downloading updated version of itself](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2012.png)", "sentence_right": "The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample, which downloads itself to ensure that the latest version of the malicious program is running on the system.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "which downloads itself", "context_left": "*Figure 12: The program downloading an updated version of itself.* The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample,", "context_right": "to ensure that the latest version of the malicious program is running on the system. This sample also performs a DNS query on k6239847[.]lib.", "_context_left": "The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample, ", "_context_right": " to ensure that the latest version of the malicious program is running on the system.", "sentence_left": "*Figure 12: The program downloading an updated version of itself.*", "sentence_right": "This sample also performs a DNS query on k6239847[.]lib.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "obfuscated by breaking the string in two parts—k623", "context_left": "This sample also performs a DNS query on k6239847[.]lib. The string is", "context_right": "and 9847.lib, which are concatenated in memory. This time, a command is run using cmd.exe */C ping 1.1.1.1 -n 1 -w.*, where *-n* means the number of echo requests to send and *-w* is the timeout in milliseconds to wait for each reply.", "_context_left": "The string is ", "_context_right": " and 9847.lib, which are concatenated in memory.", "sentence_left": "This sample also performs a DNS query on k6239847[.]lib.", "sentence_right": "This time, a command is run using cmd.exe */C ping 1.1.1.1 -n 1 -w.*, where *-n* means the number of echo requests to send and *-w* is the timeout in milliseconds to wait for each reply.", "label": "Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. Payloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Sometimes a user's action may be required to open and [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) for [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016) Adversaries may also used compressed or archived scripts, such as JavaScript. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis) Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled. (Citation: Carbon Black Obfuscation Sept 2016) Adversaries may also obfuscate commands executed from payloads or directly via a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059). Environment variables, aliases, characters, and other platform/language specific semantics can be used to evade signature based detections and application control mechanisms. (Citation: FireEye Obfuscation June 2017) (Citation: FireEye Revoke-Obfuscation July 2017)(Citation: PaloAlto EncodedCommand March 2017)", "label_id": 544, "label_title": "Obfuscated Files or Information", "label_link": "https://attack.mitre.org/techniques/T1027", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "enumerates system information including information such as user name, processor architecture", "context_left": "The full command is cmd.exe /C ping 1.1.1.1 -n 1 -w -n 1 -w3000 > Nul & Del /f /q \\\"%s. The program then", "context_right": ", and more. ![Figure 13:Algorithm to initiate /xmlrpc.php attack](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2013.png)", "_context_left": "The program then ", "_context_right": ", and more.", "sentence_left": "The full command is cmd.exe /C ping 1.1.1.1 -n 1 -w -n 1 -w3000 > Nul & Del /f /q \\\"%s.", "sentence_right": "![Figure 13:Algorithm to initiate /xmlrpc.php attack](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2013.png)", "label": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Tools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques) Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)", "label_id": 550, "label_title": "System Information Discovery", "label_link": "https://attack.mitre.org/techniques/T1082", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "execute a brute force attack", "context_left": "*Figure 14: The attack vectors found in the file.* Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to", "context_right": "via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS. Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "_context_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to ", "_context_right": " via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS.", "sentence_left": "*Figure 14: The attack vectors found in the file.*", "sentence_right": "Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "*Figure 14: The attack vectors found in the file.* Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the", "context_right": "and is looking for all the available methods on the corresponding DNS. Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "_context_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the ", "_context_right": " and is looking for all the available methods on the corresponding DNS.", "sentence_left": "*Figure 14: The attack vectors found in the file.*", "sentence_right": "Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "is looking for all the available methods on the corresponding DNS.", "context_left": "*Figure 14: The attack vectors found in the file.* Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and", "context_right": "Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "_context_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and ", "_context_right": "", "sentence_left": "*Figure 14: The attack vectors found in the file.*", "sentence_right": "Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "label": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system. Within cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.", "label_id": 117, "label_title": "Network Service Scanning", "label_link": "https://attack.mitre.org/techniques/T1046", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "cURL", "context_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS. Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using", "context_right": ", authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site. Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload:", "_context_left": "Once found, it attempts to gain the login via cookie-based authentication by logging into WordPress using ", "_context_right": ", authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "sentence_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS.", "sentence_right": "Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload:", "label": "curl", "label_id": 1272, "label_title": "curl", "label_link": "http://www.bosch.com#node1fuu313m0x6", "entity_class": "CE", "entity_type": "TOOL", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "login via cookie-based authentication by logging into WordPress", "context_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS. Once found, it attempts to gain the", "context_right": "using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site. Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload:", "_context_left": "Once found, it attempts to gain the ", "_context_right": " using cURL, authenticating the server (which ran the cURL script) and providing the username/password to the login page of the desired WordPress site.", "sentence_left": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS.", "sentence_right": "Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload:", "label": "The adversary is trying to steal account names and passwords. Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals.", "label_id": 585, "label_title": "Credential Access", "label_link": "https://attack.mitre.org/tactics/TA0006", "entity_class": "CI", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Brute Force attack on wordPress sites", "context_left": "Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload: ![Figure 15:", "context_right": "](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2015.png) *Figure 15: The list of WordPress sites targeted for a brute force attack.*", "_context_left": "![Figure 15: ", "_context_right": "](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2015.png)", "sentence_left": "Here is a redacted list of a few WordPress sites the attacker is trying to attack leveraging this malware payload:", "sentence_right": "*Figure 15: The list of WordPress sites targeted for a brute force attack.*", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "targeted for a brute force attack.", "context_left": "![Figure 15: Brute Force attack on wordPress sites](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2015.png) *Figure 15: The list of WordPress sites", "context_right": "* We then went on hunting for similar samples.", "_context_left": "*Figure 15: The list of WordPress sites ", "_context_right": "*", "sentence_left": "![Figure 15: Brute Force attack on wordPress sites](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2015.png)", "sentence_right": "We then went on hunting for similar samples.", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "C&C", "context_left": "We were able to unearth more samples connecting to the same domains (k6239847.lib) and IP address (217.8.117.48). The samples we found had similar activity but used a .space TLD domain as one of its", "context_right": ". **Cloud Sandbox detection**", "_context_left": "The samples we found had similar activity but used a .space TLD domain as one of its ", "_context_right": ".", "sentence_left": "We were able to unearth more samples connecting to the same domains (k6239847.lib) and IP address (217.8.117.48).", "sentence_right": "**Cloud Sandbox detection**", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "refrain from using logins from third-party applications.", "context_left": "As such, WordPress admins need to be on alert to reports of newly found vulnerabilities and attacks. In addition, WordPress admin should keep the XML-RPC option disabled and", "context_right": "Zscaler continues to protect our customers from such attacks and detects these malicious programs in our Cloud Sandbox in real time.", "_context_left": "In addition, WordPress admin should keep the XML-RPC option disabled and ", "_context_right": "", "sentence_left": "As such, WordPress admins need to be on alert to reports of newly found vulnerabilities and attacks.", "sentence_right": "Zscaler continues to protect our customers from such attacks and detects these malicious programs in our Cloud Sandbox in real time.", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Brute Force", "context_left": "| **T1212** | **Credential Access** | | **T1110** | **", "context_right": "** | | **T1556** | **Modify Authentication Process** |", "_context_left": "| **T1110** | **", "_context_right": "** |", "sentence_left": "| **T1212** | **Credential Access** |", "sentence_right": "| **T1556** | **Modify Authentication Process** |", "label": "Adversaries may use brute force techniques to gain access to accounts when passwords are unknown or when password hashes are obtained. Without knowledge of the password for an account or set of accounts, an adversary may systematically guess the password using a repetitive or iterative mechanism. Brute forcing passwords can take place via interaction with a service that will check the validity of those credentials or offline against previously acquired credential data, such as password hashes. Brute forcing credentials may take place at various points during a breach. For example, adversaries may attempt to brute force access to [Valid Accounts](https://attack.mitre.org/techniques/T1078) within a victim environment leveraging knowledge gathered from other post-compromise behaviors such as [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), [Account Discovery](https://attack.mitre.org/techniques/T1087), or [Password Policy Discovery](https://attack.mitre.org/techniques/T1201). Adversaries may also combine brute forcing activity with behaviors such as [External Remote Services](https://attack.mitre.org/techniques/T1133) as part of Initial Access.", "label_id": 434, "label_title": "Brute Force", "label_link": "https://attack.mitre.org/techniques/T1110", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Modify Authentication Process", "context_left": "| **T1110** | **Brute Force** | | **T1556** | **", "context_right": "** | | **T1497** | **Sandbox Evasion** |", "_context_left": "| **T1556** | **", "_context_right": "** |", "sentence_left": "| **T1110** | **Brute Force** |", "sentence_right": "| **T1497** | **Sandbox Evasion** |", "label": "Adversaries may modify authentication mechanisms and processes to access user credentials or enable otherwise unwarranted access to accounts. The authentication process is handled by mechanisms, such as the Local Security Authentication Server (LSASS) process and the Security Accounts Manager (SAM) on Windows, pluggable authentication modules (PAM) on Unix-based systems, and authorization plugins on MacOS systems, responsible for gathering, storing, and validating credentials. By modifying an authentication process, an adversary may be able to authenticate to a service or system without using [Valid Accounts](https://attack.mitre.org/techniques/T1078). Adversaries may maliciously modify a part of this process to either reveal credentials or bypass authentication mechanisms. Compromised credentials or access may be used to bypass access controls placed on various resources on systems within the network and may even be used for persistent access to remote systems and externally available services, such as VPNs, Outlook Web Access and remote desktop.", "label_id": 145, "label_title": "Modify Authentication Process", "label_link": "https://attack.mitre.org/techniques/T1556", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Sandbox Evasion", "context_left": "| **T1556** | **Modify Authentication Process** | | **T1497** | **", "context_right": "** | | **T1055** | **Process Injection** |", "_context_left": "| **T1497** | **", "_context_right": "** |", "sentence_left": "| **T1556** | **Modify Authentication Process** |", "sentence_right": "| **T1055** | **Process Injection** |", "label": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness) Adversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) such as checking for security monitoring tools (e.g., Sysinternals, Wireshark, etc.) or other system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. Additional methods include use of sleep timers or loops within malware code to avoid operating within a temporary sandbox.(Citation: Unit 42 Pirpi July 2015)", "label_id": 291, "label_title": "Virtualization/Sandbox Evasion", "label_link": "https://attack.mitre.org/techniques/T1497", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Process Injection", "context_left": "| **T1497** | **Sandbox Evasion** | | **T1055** | **", "context_right": "** | | **T1003** | **OS Credential Dumping** |", "_context_left": "| **T1055** | **", "_context_right": "** |", "sentence_left": "| **T1497** | **Sandbox Evasion** |", "sentence_right": "| **T1003** | **OS Credential Dumping** |", "label": "Adversaries may inject code into processes in order to evade process-based defenses as well as possibly elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. There are many different ways to inject code into a process, many of which abuse legitimate functionalities. These implementations exist for every major OS but are typically platform specific. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.", "label_id": 318, "label_title": "Process Injection", "label_link": "https://attack.mitre.org/techniques/T1055", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "OS Credential Dumping", "context_left": "| **T1055** | **Process Injection** | | **T1003** | **", "context_right": "** | | **T1491** | **Defacement** |", "_context_left": "| **T1003** | **", "_context_right": "** |", "sentence_left": "| **T1055** | **Process Injection** |", "sentence_right": "| **T1491** | **Defacement** |", "label": "Adversaries may attempt to dump credentials to obtain account login and credential material, normally in the form of a hash or a clear text password, from the operating system and software. Credentials can then be used to perform [Lateral Movement](https://attack.mitre.org/tactics/TA0008) and access restricted information. Several of the tools mentioned in associated sub-techniques may be used by both adversaries and professional security testers. Additional custom tools likely exist as well.", "label_id": 576, "label_title": "OS Credential Dumping", "label_link": "https://attack.mitre.org/techniques/T1003", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Defacement", "context_left": "| **T1003** | **OS Credential Dumping** | | **T1491** | **", "context_right": "** | **IOCs**", "_context_left": "| **T1491** | **", "_context_right": "** |", "sentence_left": "| **T1003** | **OS Credential Dumping** |", "sentence_right": "**IOCs**", "label": "Adversaries may modify visual content available internally or externally to an enterprise network. Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491) in order to cause user discomfort, or to pressure compliance with accompanying messages.", "label_id": 500, "label_title": "Defacement", "label_link": "https://attack.mitre.org/techniques/T1491", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "In our research, we found several samples pertaining to this campaign but we analyzed one sample here for brevity and as an example.", "context_left": "**Technical analysis**", "context_right": "In the sample set we worked on, we found that almost all samples used Microsoft-version information, but all of them lack a legitimate Windows Digital Signature and left the company name as TODO, which implies that these files are being generated through a script and this section is still a work in progress.", "_context_left": "", "_context_right": "", "sentence_left": "**Technical analysis**", "sentence_right": "In the sample set we worked on, we found that almost all samples used Microsoft-version information, but all of them lack a legitimate Windows Digital Signature and left the company name as TODO, which implies that these files are being generated through a script and this section is still a work in progress.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Another feature we found was that InternalName was always a sequence of 2s.", "context_left": "*Figure 1: The common metadata used in most files in this campaign.*", "context_right": "Unfortunately, we weren’t able to conclude if this was intentional or not.", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 1: The common metadata used in most files in this campaign.*", "sentence_right": "Unfortunately, we weren’t able to conclude if this was intentional or not.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Hashes:", "context_left": "**IOCs**", "context_right": "2ed7662ec8e2022d9cebec3a8ebaf838", "_context_left": "", "_context_right": "", "sentence_left": "**IOCs**", "sentence_right": "2ed7662ec8e2022d9cebec3a8ebaf838", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "2ed7662ec8e2022d9cebec3a8ebaf838", "context_left": "Hashes:", "context_right": "c09cf4312167fa9683d8e8733004b7e6", "_context_left": "", "_context_right": "", "sentence_left": "Hashes:", "sentence_right": "c09cf4312167fa9683d8e8733004b7e6", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 1: Common metadata used in most files in this campaign](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%201.png)", "context_left": "In the sample set we worked on, we found that almost all samples used Microsoft-version information, but all of them lack a legitimate Windows Digital Signature and left the company name as TODO, which implies that these files are being generated through a script and this section is still a work in progress.", "context_right": "*Figure 1: The common metadata used in most files in this campaign.*", "_context_left": "", "_context_right": "", "sentence_left": "In the sample set we worked on, we found that almost all samples used Microsoft-version information, but all of them lack a legitimate Windows Digital Signature and left the company name as TODO, which implies that these files are being generated through a script and this section is still a work in progress.", "sentence_right": "*Figure 1: The common metadata used in most files in this campaign.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "a54fa899a524f0cd34ae90f9820b41e0", "context_left": "74f5107acd2e51dc407253f15d718be3", "context_right": "IPs:", "_context_left": "", "_context_right": "", "sentence_left": "74f5107acd2e51dc407253f15d718be3", "sentence_right": "IPs:", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The domain generated is k6239847[.]lib.", "context_left": "*Figure 4: The decryption loop for this program.*", "context_right": "This URL is then used with blockchain DNS.", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 4: The decryption loop for this program.*", "sentence_right": "This URL is then used with blockchain DNS.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The value compared depends on the size of the blockchain DNS URI.", "context_left": "The blockchain DNS URI is decrypted using a similar XOR loop as shown in Figure 6.", "context_right": "![Figure 6: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%206.png)", "_context_left": "", "_context_right": "", "sentence_left": "The blockchain DNS URI is decrypted using a similar XOR loop as shown in Figure 6.", "sentence_right": "![Figure 6: Decryption Loop](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%206.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "**Cloud Sandbox detection**", "context_left": "The samples we found had similar activity but used a .space TLD domain as one of its C&C.", "context_right": "The malware payload was successfully detected and blocked by the Zscaler Cloud Sandbox as seen in the Figure 16.", "_context_left": "", "_context_right": "", "sentence_left": "The samples we found had similar activity but used a .space TLD domain as one of its C&C.", "sentence_right": "The malware payload was successfully detected and blocked by the Zscaler Cloud Sandbox as seen in the Figure 16.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "**IOCs**", "context_left": "| **T1491** | **Defacement** |", "context_right": "Hashes:", "_context_left": "", "_context_right": "", "sentence_left": "| **T1491** | **Defacement** |", "sentence_right": "Hashes:", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 14: Attack vectors found in file](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2014.png)", "context_left": "*Figure 13: The algorithm to initiate the /xmlrpc.php attack.*", "context_right": "*Figure 14: The attack vectors found in the file.*", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 13: The algorithm to initiate the /xmlrpc.php attack.*", "sentence_right": "*Figure 14: The attack vectors found in the file.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "This sample also performs a DNS query on k6239847[.]lib.", "context_left": "The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample, which downloads itself to ensure that the latest version of the malicious program is running on the system.", "context_right": "The string is obfuscated by breaking the string in two parts—k623 and 9847.lib, which are concatenated in memory.", "_context_left": "", "_context_right": "", "sentence_left": "The downloaded sample (MD5:86374F27C1A915D970BE3103D22512B9) is an updated version of the parent sample, which downloads itself to ensure that the latest version of the malicious program is running on the system.", "sentence_right": "The string is obfuscated by breaking the string in two parts—k623 and 9847.lib, which are concatenated in memory.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "**Technical analysis**", "context_left": "Additionally, the payloads appear to be new and had no specific attribution, so we have given a new name to this program based on its activity—Win32.Backdoor.WPbrutebot.", "context_right": "In our research, we found several samples pertaining to this campaign but we analyzed one sample here for brevity and as an example.", "_context_left": "", "_context_right": "", "sentence_left": "Additionally, the payloads appear to be new and had no specific attribution, so we have given a new name to this program based on its activity—Win32.Backdoor.WPbrutebot.", "sentence_right": "In our research, we found several samples pertaining to this campaign but we analyzed one sample here for brevity and as an example.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 9: User-Agents used](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%209.png)", "context_left": "This same code is reused to assemble user-agent strings, which are later used for making internet connections.", "context_right": "*Figure 9: The user-agents employed in this attack.*", "_context_left": "", "_context_right": "", "sentence_left": "This same code is reused to assemble user-agent strings, which are later used for making internet connections.", "sentence_right": "*Figure 9: The user-agents employed in this attack.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "*Figure 8: The API call details.*", "context_left": "![Figure 8: Api Call](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%208.png)", "context_right": "This same code is reused to assemble user-agent strings, which are later used for making internet connections.", "_context_left": "", "_context_right": "", "sentence_left": "![Figure 8: Api Call](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%208.png)", "sentence_right": "This same code is reused to assemble user-agent strings, which are later used for making internet connections.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "**MITRE ATT&CK TTP Mapping**", "context_left": "Zscaler continues to protect our customers from such attacks and detects these malicious programs in our Cloud Sandbox in real time.", "context_right": "| **T1212** | **Credential Access** |", "_context_left": "", "_context_right": "", "sentence_left": "Zscaler continues to protect our customers from such attacks and detects these malicious programs in our Cloud Sandbox in real time.", "sentence_right": "| **T1212** | **Credential Access** |", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "September 16, 2020", "context_left": "Malware Leveraging XML-RPC Vulnerability to Exploit WordPress Sites", "context_right": "We have written a number of blogs about [vulnerabilities within](/blogs/research/cybercriminals-targeting-multiple-vulnerabilities-wordpress-plugins) and [attacks on](/blogs/research/compromised-wordpress-sites-used-distribute-adwind-rat) sites built with WordPress.", "_context_left": "", "_context_right": "", "sentence_left": "Malware Leveraging XML-RPC Vulnerability to Exploit WordPress Sites", "sentence_right": "We have written a number of blogs about [vulnerabilities within](/blogs/research/cybercriminals-targeting-multiple-vulnerabilities-wordpress-plugins) and [attacks on](/blogs/research/compromised-wordpress-sites-used-distribute-adwind-rat) sites built with WordPress.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The code shown in Figure 8 is called several times to allocate heap to save decrypted strings that are used later to perform network activity or for creating files.", "context_left": "*Figure 7: The decrypted strings.*", "context_right": "![Figure 8: Api Call](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%208.png)", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 7: The decrypted strings.*", "sentence_right": "![Figure 8: Api Call](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%208.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "*Figure 5: The DNS query.*", "context_left": "![Figure 5: DNS Query](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%205.png)", "context_right": "The blockchain DNS URI is decrypted using a similar XOR loop as shown in Figure 6.", "_context_left": "", "_context_right": "", "sentence_left": "![Figure 5: DNS Query](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%205.png)", "sentence_right": "The blockchain DNS URI is decrypted using a similar XOR loop as shown in Figure 6.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "*Figure 13: The algorithm to initiate the /xmlrpc.php attack.*", "context_left": "![Figure 13:Algorithm to initiate /xmlrpc.php attack](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2013.png)", "context_right": "![Figure 14: Attack vectors found in file](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2014.png)", "_context_left": "", "_context_right": "", "sentence_left": "![Figure 13:Algorithm to initiate /xmlrpc.php attack](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2013.png)", "sentence_right": "![Figure 14: Attack vectors found in file](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2014.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 11: Domains found at emercoin.com](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2011.png)", "context_left": "The DNS request generated produces a C&C IP of 217.8.117[.]48, which can be confirmed online at explorer.emercoin[.]com/nvs/dns.", "context_right": "*Figure 11: The domains found at emercoin.com.*", "_context_left": "", "_context_right": "", "sentence_left": "The DNS request generated produces a C&C IP of 217.8.117[.]48, which can be confirmed online at explorer.emercoin[.]com/nvs/dns.", "sentence_right": "*Figure 11: The domains found at emercoin.com.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "We were able to unearth more samples connecting to the same domains (k6239847.lib) and IP address (217.8.117.48).", "context_left": "We then went on hunting for similar samples.", "context_right": "The samples we found had similar activity but used a .space TLD domain as one of its C&C.", "_context_left": "", "_context_right": "", "sentence_left": "We then went on hunting for similar samples.", "sentence_right": "The samples we found had similar activity but used a .space TLD domain as one of its C&C.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Advanced Threat Signature name:", "context_left": "*Figure 16: The Zscaler Cloud Sandbox successfully detected the malware.*", "context_right": "[Win32.Backdoor.Wpbrutebot](https://threatlibrary.zscaler.com/?keyword=wpbrutebot)", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 16: The Zscaler Cloud Sandbox successfully detected the malware.*", "sentence_right": "[Win32.Backdoor.Wpbrutebot](https://threatlibrary.zscaler.com/?keyword=wpbrutebot)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "c09cf4312167fa9683d8e8733004b7e6", "context_left": "2ed7662ec8e2022d9cebec3a8ebaf838", "context_right": "86374f27c1a915d970be3103d22512b9", "_context_left": "", "_context_right": "", "sentence_left": "2ed7662ec8e2022d9cebec3a8ebaf838", "sentence_right": "86374f27c1a915d970be3103d22512b9", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 13:Algorithm to initiate /xmlrpc.php attack](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2013.png)", "context_left": "The program then enumerates system information including information such as user name, processor architecture, and more.", "context_right": "*Figure 13: The algorithm to initiate the /xmlrpc.php attack.*", "_context_left": "", "_context_right": "", "sentence_left": "The program then enumerates system information including information such as user name, processor architecture, and more.", "sentence_right": "*Figure 13: The algorithm to initiate the /xmlrpc.php attack.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Figure 3 shows the debugger dump.", "context_left": "This decryption loop is a simple XOR decryption that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php.", "context_right": "![Figure 3: Decrypted String](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%203.png)", "_context_left": "", "_context_right": "", "sentence_left": "This decryption loop is a simple XOR decryption that sequentially runs from B5 to C7, which gives us /lk4238fh317/update.php.", "sentence_right": "![Figure 3: Decrypted String](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%203.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "IPs:", "context_left": "a54fa899a524f0cd34ae90f9820b41e0", "context_right": "207.148.83[.]241", "_context_left": "", "_context_right": "", "sentence_left": "a54fa899a524f0cd34ae90f9820b41e0", "sentence_right": "207.148.83[.]241", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The URL created is 217.8.117[.]48/lk4238fh317/update.", "context_left": "The segment of a URL created during the first decryption loop (as shown above) is then used with the IP address to contact the C&C.", "context_right": "The C&C then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload.", "_context_left": "", "_context_right": "", "sentence_left": "The segment of a URL created during the first decryption loop (as shown above) is then used with the IP address to contact the C&C.", "sentence_right": "The C&C then replies back with 217.8.117[.]48/j537djjlhg763/svchst.exe, which is the downloaded payload.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "Unfortunately, we weren’t able to conclude if this was intentional or not.", "context_left": "Another feature we found was that InternalName was always a sequence of 2s.", "context_right": "The initial layer of the malware is for decoding the URIs used to make initial contact with the C&C server.", "_context_left": "", "_context_right": "", "sentence_left": "Another feature we found was that InternalName was always a sequence of 2s.", "sentence_right": "The initial layer of the malware is for decoding the URIs used to make initial contact with the C&C server.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "This same code is reused to assemble user-agent strings, which are later used for making internet connections.", "context_left": "*Figure 8: The API call details.*", "context_right": "![Figure 9: User-Agents used](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%209.png)", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 8: The API call details.*", "sentence_right": "![Figure 9: User-Agents used](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%209.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "03caf1cf96f95b82536fc8b7d94c5a61", "context_left": "d88a7fca98e89aaf593163b787165766", "context_right": "74f5107acd2e51dc407253f15d718be3", "_context_left": "", "_context_right": "", "sentence_left": "d88a7fca98e89aaf593163b787165766", "sentence_right": "74f5107acd2e51dc407253f15d718be3", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "5.132.191[.]104", "context_left": "207.148.83[.]241", "context_right": "66.70.228[.]164", "_context_left": "", "_context_right": "", "sentence_left": "207.148.83[.]241", "sentence_right": "66.70.228[.]164", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "*Figure 9: The user-agents employed in this attack.*", "context_left": "![Figure 9: User-Agents used](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%209.png)", "context_right": "This is then used to create a DNS request for the blockchain DNS server.", "_context_left": "", "_context_right": "", "sentence_left": "![Figure 9: User-Agents used](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%209.png)", "sentence_right": "This is then used to create a DNS request for the blockchain DNS server.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 12: Downloading updated version of itself](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2012.png)", "context_left": "The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "context_right": "*Figure 12: The program downloading an updated version of itself.*", "_context_left": "", "_context_right": "", "sentence_left": "The payload is downloaded at C:\\Users\\User-Name\\AppData\\Roaming\\svchst.exe.", "sentence_right": "*Figure 12: The program downloading an updated version of itself.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "1.1.1.1 is popular DNS service by Cloudflare.", "context_left": "This time, a command is run using cmd.exe */C ping 1.1.1.1 -n 1 -w.*, where *-n* means the number of echo requests to send and *-w* is the timeout in milliseconds to wait for each reply.", "context_right": "The full command is cmd.exe /C ping 1.1.1.1 -n 1 -w -n 1 -w3000 > Nul & Del /f /q \\\"%s.", "_context_left": "", "_context_right": "", "sentence_left": "This time, a command is run using cmd.exe */C ping 1.1.1.1 -n 1 -w.*, where *-n* means the number of echo requests to send and *-w* is the timeout in milliseconds to wait for each reply.", "sentence_right": "The full command is cmd.exe /C ping 1.1.1.1 -n 1 -w -n 1 -w3000 > Nul & Del /f /q \\\"%s.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "207.148.83[.]241", "context_left": "IPs:", "context_right": "5.132.191[.]104", "_context_left": "", "_context_right": "", "sentence_left": "IPs:", "sentence_right": "5.132.191[.]104", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "The full command is cmd.exe /C ping 1.1.1.1 -n 1 -w -n 1 -w3000 > Nul & Del /f /q \\\"%s.", "context_left": "1.1.1.1 is popular DNS service by Cloudflare.", "context_right": "The program then enumerates system information including information such as user name, processor architecture, and more.", "_context_left": "", "_context_right": "", "sentence_left": "1.1.1.1 is popular DNS service by Cloudflare.", "sentence_right": "The program then enumerates system information including information such as user name, processor architecture, and more.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "These are first assembled in heap using **RtlAllocateHeap**.", "context_left": "*Figure 6: The decryption loop.*", "context_right": "![Figure 7: Decrypted Strings](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%207.png)", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 6: The decryption loop.*", "sentence_right": "![Figure 7: Decrypted Strings](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%207.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "This URL is then used with blockchain DNS.", "context_left": "The domain generated is k6239847[.]lib.", "context_right": "![Figure 5: DNS Query](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%205.png)", "_context_left": "", "_context_right": "", "sentence_left": "The domain generated is k6239847[.]lib.", "sentence_right": "![Figure 5: DNS Query](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%205.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "d88a7fca98e89aaf593163b787165766", "context_left": "86374f27c1a915d970be3103d22512b9", "context_right": "03caf1cf96f95b82536fc8b7d94c5a61", "_context_left": "", "_context_right": "", "sentence_left": "86374f27c1a915d970be3103d22512b9", "sentence_right": "03caf1cf96f95b82536fc8b7d94c5a61", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 3: Decrypted String](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%203.png)", "context_left": "Figure 3 shows the debugger dump.", "context_right": "*Figure 3: The decrypted string of this program.*", "_context_left": "", "_context_right": "", "sentence_left": "Figure 3 shows the debugger dump.", "sentence_right": "*Figure 3: The decrypted string of this program.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "86374f27c1a915d970be3103d22512b9", "context_left": "c09cf4312167fa9683d8e8733004b7e6", "context_right": "d88a7fca98e89aaf593163b787165766", "_context_left": "", "_context_right": "", "sentence_left": "c09cf4312167fa9683d8e8733004b7e6", "sentence_right": "d88a7fca98e89aaf593163b787165766", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "*Figure 14: The attack vectors found in the file.*", "context_left": "![Figure 14: Attack vectors found in file](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2014.png)", "context_right": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS.", "_context_left": "", "_context_right": "", "sentence_left": "![Figure 14: Attack vectors found in file](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2014.png)", "sentence_right": "Here, the malicious program is using ***<methodName>wp.getUsersBlogs</methodName>*** to execute a brute force attack via the “*wp.getUsersBlogs*” method of xmlrpc.php where an attacker is actually doing a reverse IP lookup for the IPs fetched from the C&C and is looking for all the available methods on the corresponding DNS.", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "![Figure 10: Concatenated URL](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2010.png)", "context_left": "This is then used to create a DNS request for the blockchain DNS server.", "context_right": "*Figure 10: The concatenated URL.*", "_context_left": "", "_context_right": "", "sentence_left": "This is then used to create a DNS request for the blockchain DNS server.", "sentence_right": "*Figure 10: The concatenated URL.*", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}
{"mention": "This is then used to create a DNS request for the blockchain DNS server.", "context_left": "*Figure 9: The user-agents employed in this attack.*", "context_right": "![Figure 10: Concatenated URL](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2010.png)", "_context_left": "", "_context_right": "", "sentence_left": "*Figure 9: The user-agents employed in this attack.*", "sentence_right": "![Figure 10: Concatenated URL](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/WPbrutebot/Figure%2010.png)", "label": "No Annotation", "label_id": 1906, "label_title": "No Annotation", "label_link": "No Annotation", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "zscaler_2020-09-16_malware-leveraging-xml-rpc-vulnerability"}