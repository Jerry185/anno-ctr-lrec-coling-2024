{"mention": "TokyoX", "context_left": "", "context_right": ": DLL side-loading an unknown artifact (Part 2) January 12, 2022", "_context_left": "", "_context_right": ": DLL side-loading an unknown artifact (Part 2)", "sentence_left": "", "sentence_right": "January 12, 2022", "label": "TokyoX", "label_id": 1279, "label_title": "TokyoX", "label_link": "http://www.bosch.com#node1fvup9pj1x39", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "TokyoX", "context_left": "As we mentioned in [the previous post](https://lab52.io/blog/tokyox-dll-side-loading-an-unknown-artifact/), we have performed an analysis of the threat which, lacking further information, we have not been able to identify it as a known threat. Thus, for the moment, we will keep referring to it as", "context_right": ". This threat can only be found in memory, since it is encrypted on disk and its loading is performed as described in the previous post.", "_context_left": "Thus, for the moment, we will keep referring to it as ", "_context_right": ".", "sentence_left": "As we mentioned in [the previous post](https://lab52.io/blog/tokyox-dll-side-loading-an-unknown-artifact/), we have performed an analysis of the threat which, lacking further information, we have not been able to identify it as a known threat.", "sentence_right": "This threat can only be found in memory, since it is encrypted on disk and its loading is performed as described in the previous post.", "label": "TokyoX", "label_id": 1279, "label_title": "TokyoX", "label_link": "http://www.bosch.com#node1fvup9pj1x39", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "check for the existence of a mutex in the system with the name “aftdoslm”", "context_left": "This threat can only be found in memory, since it is encrypted on disk and its loading is performed as described in the previous post. After the whole loading process, the first thing the threat does is to", "context_right": "and if it finds it, it terminates its execution in order to avoid multiple instances of the threat running in parallel. ![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png)", "_context_left": "After the whole loading process, the first thing the threat does is to ", "_context_right": " and if it finds it, it terminates its execution in order to avoid multiple instances of the threat running in parallel.", "sentence_left": "This threat can only be found in memory, since it is encrypted on disk and its loading is performed as described in the previous post.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png)", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "computer’s file system and Volume information", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png) It then generates a 32-character string similar to a md5 hash from the", "context_right": ", which is used as the victim ID and placed at the beginning of every packet it sends to the command and control server: ![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "_context_left": "It then generates a 32-character string similar to a md5 hash from the ", "_context_right": ", which is used as the victim ID and placed at the beginning of every packet it sends to the command and control server:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "label": "Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Many command shell utilities can be used to obtain this information. Examples include <code>dir</code>, <code>tree</code>, <code>ls</code>, <code>find</code>, and <code>locate</code>.(Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the [Native API](https://attack.mitre.org/techniques/T1106).", "label_id": 75, "label_title": "File and Directory Discovery", "label_link": "https://attack.mitre.org/techniques/T1083", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "every packet it sends to the command and control server:", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png) It then generates a 32-character string similar to a md5 hash from the computer’s file system and Volume information, which is used as the victim ID and placed at the beginning of", "context_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "_context_left": "It then generates a 32-character string similar to a md5 hash from the computer’s file system and Volume information, which is used as the victim ID and placed at the beginning of ", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/1.png)", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CI", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "computer name", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png) It then obtains the user name,", "context_right": ", local IP and operating system version, with which it builds a string and generates a first packet for the C2: At the time of the analysis the command and control server was not available.", "_context_left": "It then obtains the user name, ", "_context_right": ", local IP and operating system version, with which it builds a string and generates a first packet for the C2:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "sentence_right": "At the time of the analysis the command and control server was not available.", "label": "An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1082) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Tools such as [Systeminfo](https://attack.mitre.org/software/S0096) can be used to gather detailed system information. If running with privileged access, a breakdown of system data can be gathered through the <code>systemsetup</code> configuration tool on macOS. As an example, adversaries with user-level access can execute the <code>df -aH</code> command to obtain currently mounted disks and associated freely available space. [System Information Discovery](https://attack.mitre.org/techniques/T1082) combined with information gathered from other forms of discovery and reconnaissance can drive payload development and concealment.(Citation: OSX.FairyTale)(Citation: 20 macOS Common Tools and Techniques) Infrastructure as a Service (IaaS) cloud providers such as AWS, GCP, and Azure allow access to instance and virtual machine information via APIs. Successful authenticated API calls can return data such as the operating system platform and status of a particular instance or the model view of a virtual machine.(Citation: Amazon Describe Instance)(Citation: Google Instances Resource)(Citation: Microsoft Virutal Machine API)", "label_id": 550, "label_title": "System Information Discovery", "label_link": "https://attack.mitre.org/techniques/T1082", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "first packet for the C2", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png) It then obtains the user name, computer name, local IP and operating system version, with which it builds a string and generates a", "context_right": ": At the time of the analysis the command and control server was not available.", "_context_left": "It then obtains the user name, computer name, local IP and operating system version, with which it builds a string and generates a ", "_context_right": ":", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "sentence_right": "At the time of the analysis the command and control server was not available.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "obtains the user name", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png) It then", "context_right": ", computer name, local IP and operating system version, with which it builds a string and generates a first packet for the C2: At the time of the analysis the command and control server was not available.", "_context_left": "It then ", "_context_right": ", computer name, local IP and operating system version, with which it builds a string and generates a first packet for the C2:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "sentence_right": "At the time of the analysis the command and control server was not available.", "label": "Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using [OS Credential Dumping](https://attack.mitre.org/techniques/T1003). The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs. Adversaries may use the information from [System Owner/User Discovery](https://attack.mitre.org/techniques/T1033) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. Various utilities and commands may acquire this information, including <code>whoami</code>. In macOS and Linux, the currently logged in user can be identified with <code>w</code> and <code>who</code>. On macOS the <code>dscl . list /Users | grep -v '_'</code> command can also be used to enumerate user accounts. Environment variables, such as <code>%USERNAME%</code> and <code>$USER</code>, may also be used to access this information.", "label_id": 78, "label_title": "System Owner/User Discovery", "label_link": "https://attack.mitre.org/techniques/T1033", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "local IP and operating system version", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png) It then obtains the user name, computer name,", "context_right": ", with which it builds a string and generates a first packet for the C2: At the time of the analysis the command and control server was not available.", "_context_left": "It then obtains the user name, computer name, ", "_context_right": ", with which it builds a string and generates a first packet for the C2:", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/2.png)", "sentence_right": "At the time of the analysis the command and control server was not available.", "label": "Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. An adversary who gains access to a system that is part of a cloud-based environment may map out Virtual Private Clouds or Virtual Networks in order to determine what systems and services are connected. The actions performed are likely the same types of discovery techniques depending on the operating system, but the resulting information may include details about the networked cloud environment relevant to the adversary's goals. Cloud providers may have different ways in which their virtual networks operate.(Citation: Amazon AWS VPC Guide)(Citation: Microsoft Azure Virtual Network Overview)(Citation: Google VPC Overview) Utilities and commands that acquire this information include [netstat](https://attack.mitre.org/software/S0104), \"net use,\" and \"net session\" with [Net](https://attack.mitre.org/software/S0039). In Mac and Linux, [netstat](https://attack.mitre.org/software/S0104) and <code>lsof</code> can be used to list current connections. <code>who -a</code> and <code>w</code> can be used to show which users are currently logged in, similar to \"net session\".", "label_id": 242, "label_title": "System Network Connections Discovery", "label_link": "https://attack.mitre.org/techniques/T1049", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "command and control server was not available.", "context_left": "It then obtains the user name, computer name, local IP and operating system version, with which it builds a string and generates a first packet for the C2: At the time of the analysis the", "context_right": "For that reason, some fields of the packets a priori not used by the threat, could not be identified.", "_context_left": "At the time of the analysis the ", "_context_right": "", "sentence_left": "It then obtains the user name, computer name, local IP and operating system version, with which it builds a string and generates a first packet for the C2:", "sentence_right": "For that reason, some fields of the packets a priori not used by the threat, could not be identified.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "response of the C2", "context_left": "For that reason, some fields of the packets a priori not used by the threat, could not be identified. However, from the analysis of the threat assembly, it has been possible to observe that the", "context_right": "is very similar to those sent by the threat, since it most likely contains the first 44 bytes of the threat request or a very similar content: the victim ID (in red) , the first three dwords (in green). After that part, it will have a fourth dword (in blue) that consists of a command code supported by the threat, after which, depending on the command, it may contain one information or another (in yellow).", "_context_left": "However, from the analysis of the threat assembly, it has been possible to observe that the ", "_context_right": " is very similar to those sent by the threat, since it most likely contains the first 44 bytes of the threat request or a very similar content: the victim ID (in red) , the first three dwords (in green).", "sentence_left": "For that reason, some fields of the packets a priori not used by the threat, could not be identified.", "sentence_right": "After that part, it will have a fourth dword (in blue) that consists of a command code supported by the threat, after which, depending on the command, it may contain one information or another (in yellow).", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "sends the first packet to the command and control server", "context_left": "The first one is “6010”, which can be seen in the screenshot along with the contents of the network packet. This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it", "context_right": ", and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a new request to C2 after this time. Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat.", "_context_left": "This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it ", "_context_right": ", and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a new request to C2 after this time.", "sentence_left": "The first one is “6010”, which can be seen in the screenshot along with the contents of the network packet.", "sentence_right": "Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "new request to C2", "context_left": "The first one is “6010”, which can be seen in the screenshot along with the contents of the network packet. This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it sends the first packet to the command and control server, and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a", "context_right": "after this time. Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat.", "_context_left": "This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it sends the first packet to the command and control server, and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a ", "_context_right": " after this time.", "sentence_left": "The first one is “6010”, which can be seen in the screenshot along with the contents of the network packet.", "sentence_right": "Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "calls a function that will delete all the infection files", "context_left": "This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it sends the first packet to the command and control server, and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a new request to C2 after this time. Second comes the “6011” command which is relatively interesting since it first", "context_right": "and terminate the execution of the threat. The fact that makes it interesting to us is that after this call, inside the switch that controls each command, it appears again as a command to perform no action (in this case it should be the 6010 probably) and make another request to C2, although this code will never be executed because the initial function will close the process.", "_context_left": "Second comes the “6011” command which is relatively interesting since it first ", "_context_right": " and terminate the execution of the threat.", "sentence_left": "This command is not among the options accepted by the threat, but it is the one that the threat itself uses when it sends the first packet to the command and control server, and we assume that it is the one used as a beacon when it does not intend to do anything, since a command that is not supported by the switch statement will simply cause a 5-minute sleep and a new request to C2 after this time.", "sentence_right": "The fact that makes it interesting to us is that after this call, inside the switch that controls each command, it appears again as a command to perform no action (in this case it should be the 6010 probably) and make another request to C2, although this code will never be executed because the initial function will close the process.", "label": "Adversaries may delete or alter generated artifacts on a host system, including logs or captured files such as quarantined malware. Locations and format of logs are platform or product-specific, however standard operating system logs are captured as Windows events or Linux/macOS files such as [Bash History](https://attack.mitre.org/techniques/T1552/003) and /var/log/*. These actions may interfere with event collection, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of security solutions by causing notable events to go unreported. This activity may also impede forensic analysis and incident response, due to lack of sufficient data to determine what occurred.", "label_id": 327, "label_title": "Indicator Removal on Host", "label_link": "https://attack.mitre.org/techniques/T1070", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2", "context_left": "Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat. The fact that makes it interesting to us is that after this call, inside the switch that controls each command, it appears again as a command to perform no action (in this case it should be the 6010 probably) and make another request to", "context_right": ", although this code will never be executed because the initial function will close the process. ![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png)", "_context_left": "The fact that makes it interesting to us is that after this call, inside the switch that controls each command, it appears again as a command to perform no action (in this case it should be the 6010 probably) and make another request to ", "_context_right": ", although this code will never be executed because the initial function will close the process.", "sentence_left": "Second comes the “6011” command which is relatively interesting since it first calls a function that will delete all the infection files and terminate the execution of the threat.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "API and sends the results to the command and control server.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png) The next command is “7010” which scans the disks installed in the computer using the “GetLogicalDriveStringsW”", "context_right": "The command “7011” imitates the “Dir” command as it receives after the code a folder path, and allows it to list the content of a folder, showing hidden and system files too.", "_context_left": "The next command is “7010” which scans the disks installed in the computer using the “GetLogicalDriveStringsW” ", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png)", "sentence_right": "The command “7011” imitates the “Dir” command as it receives after the code a folder path, and allows it to list the content of a folder, showing hidden and system files too.", "label": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "label_id": 195, "label_title": "Exfiltration Over C2 Channel", "label_link": "https://attack.mitre.org/techniques/T1041", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "scans the disks installed in the computer", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png) The next command is “7010” which", "context_right": "using the “GetLogicalDriveStringsW” API and sends the results to the command and control server. The command “7011” imitates the “Dir” command as it receives after the code a folder path, and allows it to list the content of a folder, showing hidden and system files too.", "_context_left": "The next command is “7010” which ", "_context_right": " using the “GetLogicalDriveStringsW” API and sends the results to the command and control server.", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/5.png)", "sentence_right": "The command “7011” imitates the “Dir” command as it receives after the code a folder path, and allows it to list the content of a folder, showing hidden and system files too.", "label": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106), which has functionality to interact with the file system to gather information. Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.", "label_id": 326, "label_title": "Data from Local System", "label_link": "https://attack.mitre.org/techniques/T1005", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "allows it to list the content of a folder, showing hidden and system files too.", "context_left": "The next command is “7010” which scans the disks installed in the computer using the “GetLogicalDriveStringsW” API and sends the results to the command and control server. The command “7011” imitates the “Dir” command as it receives after the code a folder path, and", "context_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/6.png)", "_context_left": "The command “7011” imitates the “Dir” command as it receives after the code a folder path, and ", "_context_right": "", "sentence_left": "The next command is “7010” which scans the disks installed in the computer using the “GetLogicalDriveStringsW” API and sends the results to the command and control server.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/6.png)", "label": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to Exfiltration. Adversaries may do this using a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), such as [cmd](https://attack.mitre.org/software/S0106), which has functionality to interact with the file system to gather information. Some adversaries may also use [Automated Collection](https://attack.mitre.org/techniques/T1119) on the local system.", "label_id": 326, "label_title": "Data from Local System", "label_link": "https://attack.mitre.org/techniques/T1005", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "allows to upload a file from the attacking computer to the victim machine.", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/6.png) The next command “7017” expects, after the command code, a structure with three dwords followed by a path with a filename, and", "context_right": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server.", "_context_left": "The next command “7017” expects, after the command code, a structure with three dwords followed by a path with a filename, and ", "_context_right": "", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/6.png)", "sentence_right": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server.", "label": "Adversaries may transfer tools or other files from an external system into a compromised environment. Files may be copied from an external adversary controlled system through the command and control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.", "label_id": 202, "label_title": "Ingress Tool Transfer", "label_link": "https://attack.mitre.org/techniques/T1105", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "second request to the command and control server.", "context_left": "The next command “7017” expects, after the command code, a structure with three dwords followed by a path with a filename, and allows to upload a file from the attacking computer to the victim machine. In order to do so, it first creates an empty file and then generates a new thread that will make a", "context_right": "Within the response from the C2, this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread.", "_context_left": "In order to do so, it first creates an empty file and then generates a new thread that will make a ", "_context_right": "", "sentence_left": "The next command “7017” expects, after the command code, a structure with three dwords followed by a path with a filename, and allows to upload a file from the attacking computer to the victim machine.", "sentence_right": "Within the response from the C2, this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2", "context_left": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server. Within the response from the", "context_right": ", this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread. ![](https://lab52.io/blog/wp-content/uploads/2022/01/7.png)", "_context_left": "Within the response from the ", "_context_right": ", this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread.", "sentence_left": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/7.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "Within the response from the C2", "context_left": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server.", "context_right": ", this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread. ![](https://lab52.io/blog/wp-content/uploads/2022/01/7.png)", "_context_left": "", "_context_right": ", this request expects the contents of the file to be uploaded, which the requesting thread will store in the file generated by the main thread.", "sentence_left": "In order to do so, it first creates an empty file and then generates a new thread that will make a second request to the command and control server.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/7.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CI", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2", "context_left": "Similarly, the command “7018” also expects after the command code a structure with three dwords, identical to the “7017” command, followed by a path with a filename. In this case, it generates a new thread that tries to read that file within the victim computer and makes a second request to the", "context_right": "containing the raw content, allowing the attacker to exfiltrate files from the infected computer. With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk.", "_context_left": "In this case, it generates a new thread that tries to read that file within the victim computer and makes a second request to the ", "_context_right": " containing the raw content, allowing the attacker to exfiltrate files from the infected computer.", "sentence_left": "Similarly, the command “7018” also expects after the command code a structure with three dwords, identical to the “7017” command, followed by a path with a filename.", "sentence_right": "With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "second request to the C2 containing the raw content, allowing the attacker to exfiltrate files from the infected computer.", "context_left": "Similarly, the command “7018” also expects after the command code a structure with three dwords, identical to the “7017” command, followed by a path with a filename. In this case, it generates a new thread that tries to read that file within the victim computer and makes a", "context_right": "With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk.", "_context_left": "In this case, it generates a new thread that tries to read that file within the victim computer and makes a ", "_context_right": "", "sentence_left": "Similarly, the command “7018” also expects after the command code a structure with three dwords, identical to the “7017” command, followed by a path with a filename.", "sentence_right": "With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk.", "label": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.", "label_id": 195, "label_title": "Exfiltration Over C2 Channel", "label_link": "https://attack.mitre.org/techniques/T1041", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "command string to be run in a cmd.exe shell", "context_left": "With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk. Finally, there is the “8001” command with a", "context_right": ", since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself. Then, it executes the command received in the request and replies to the C2 with the output of that command, thus forming a remote Shell of the victim machine.", "_context_left": "Finally, there is the “8001” command with a ", "_context_right": ", since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself.", "sentence_left": "With respect to the three dwords received before the file path, it has only been possible to identify the third one for the moment, which consists of the total size of the file to be sent or received and is used before obtaining the file to reserve a buffer of that size, plus one in the Heap of the application in order to recover the content there before dumping it to disk or reading it from disk.", "sentence_right": "Then, it executes the command received in the request and replies to the C2 with the output of that command, thus forming a remote Shell of the victim machine.", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2", "context_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself. Then, it executes the command received in the request and replies to the", "context_right": "with the output of that command, thus forming a remote Shell of the victim machine. ![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "_context_left": "Then, it executes the command received in the request and replies to the ", "_context_right": " with the output of that command, thus forming a remote Shell of the victim machine.", "sentence_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "it executes the command received in the request", "context_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself. Then,", "context_right": "and replies to the C2 with the output of that command, thus forming a remote Shell of the victim machine. ![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "_context_left": "Then, ", "_context_right": " and replies to the C2 with the output of that command, thus forming a remote Shell of the victim machine.", "sentence_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2 with the output of that command, thus forming a remote Shell of the victim machine.", "context_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself. Then, it executes the command received in the request and replies to the", "context_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "_context_left": "Then, it executes the command received in the request and replies to the ", "_context_right": "", "sentence_left": "Finally, there is the “8001” command with a command string to be run in a cmd.exe shell, since it calls CreateProcessW for “cmd.exe” with the input and output redirected by anonymous pipes to the executable itself.", "sentence_right": "![](https://lab52.io/blog/wp-content/uploads/2022/01/8.png)", "label": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, macOS and Linux distributions include some flavor of [Unix Shell](https://attack.mitre.org/techniques/T1059/004) while Windows installations include the [Windows Command Shell](https://attack.mitre.org/techniques/T1059/003) and [PowerShell](https://attack.mitre.org/techniques/T1059/001). There are also cross-platform interpreters such as [Python](https://attack.mitre.org/techniques/T1059/006), as well as those commonly associated with client applications such as [JavaScript](https://attack.mitre.org/techniques/T1059/007) and [Visual Basic](https://attack.mitre.org/techniques/T1059/005). Adversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0001) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells, as well as utilize various [Remote Services](https://attack.mitre.org/techniques/T1021) in order to achieve remote Execution.(Citation: Powershell Remote Commands)(Citation: Cisco IOS Software Integrity Assurance - Command History)(Citation: Remote Shell Execution in Python)", "label_id": 368, "label_title": "Command and Scripting Interpreter", "label_link": "https://attack.mitre.org/techniques/T1059", "entity_class": "CI", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "using a Dll-sideload with a legitimate binary and a library", "context_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/9.png) Although **we do not have enough evidence to make any kind of attribution**, there are some characteristic TTPs in the infection chain: the attacker", "context_right": ", the fact that the library is responsible for decrypting and executing a third encrypted file in memory, and the fact of removing the MZ characters from the beginning of the binary and replacing them with another string. This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "_context_left": "Although **we do not have enough evidence to make any kind of attribution**, there are some characteristic TTPs in the infection chain: the attacker ", "_context_right": ", the fact that the library is responsible for decrypting and executing a third encrypted file in memory, and the fact of removing the MZ characters from the beginning of the binary and replacing them with another string.", "sentence_left": "![](https://lab52.io/blog/wp-content/uploads/2022/01/9.png)", "sentence_right": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "label": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run programs. Hijacking execution flow can be for the purposes of persistence, since this hijacked execution may reoccur over time. Adversaries may also use these mechanisms to elevate privileges or evade defenses, such as application control or other restrictions on execution. There are many ways an adversary may hijack the flow of execution, including by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs/resources, such as file directories and in the case of Windows the Registry, could also be poisoned to include malicious payloads.", "label_id": 185, "label_title": "Hijack Execution Flow", "label_link": "https://attack.mitre.org/techniques/T1574", "entity_class": "CE", "entity_type": "TECHNIQUE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "PlugX", "context_left": "Although **we do not have enough evidence to make any kind of attribution**, there are some characteristic TTPs in the infection chain: the attacker using a Dll-sideload with a legitimate binary and a library, the fact that the library is responsible for decrypting and executing a third encrypted file in memory, and the fact of removing the MZ characters from the beginning of the binary and replacing them with another string. This last characteristic is very common in APT groups that use", "context_right": "as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat. All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities.", "_context_left": "This last characteristic is very common in APT groups that use ", "_context_right": " as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "sentence_left": "Although **we do not have enough evidence to make any kind of attribution**, there are some characteristic TTPs in the infection chain: the attacker using a Dll-sideload with a legitimate binary and a library, the fact that the library is responsible for decrypting and executing a third encrypted file in memory, and the fact of removing the MZ characters from the beginning of the binary and replacing them with another string.", "sentence_right": "All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities.", "label": "[PlugX](https://attack.mitre.org/software/S0013) is a remote access tool (RAT) that uses modular plugins. It has been used by multiple threat groups. (Citation: Lastline PlugX Analysis) (Citation: FireEye Clandestine Fox Part 2) (Citation: New DragonOK) (Citation: Dell TG-3390)", "label_id": 861, "label_title": "PlugX", "label_link": "https://attack.mitre.org/software/S0013", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "PlugX", "context_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat. All of this explains [the attribution of this hash to", "context_right": "](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities. However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "_context_left": "All of this explains [the attribution of this hash to ", "_context_right": "](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities.", "sentence_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "sentence_right": "However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "label": "[PlugX](https://attack.mitre.org/software/S0013) is a remote access tool (RAT) that uses modular plugins. It has been used by multiple threat groups. (Citation: Lastline PlugX Analysis) (Citation: FireEye Clandestine Fox Part 2) (Citation: New DragonOK) (Citation: Dell TG-3390)", "label_id": 861, "label_title": "PlugX", "label_link": "https://attack.mitre.org/software/S0013", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "plugx", "context_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat. All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as", "context_right": "and that keeps a greater resemblance to HttpBrowser in terms of capabilities. However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "_context_left": "All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as ", "_context_right": " and that keeps a greater resemblance to HttpBrowser in terms of capabilities.", "sentence_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "sentence_right": "However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "label": "[PlugX](https://attack.mitre.org/software/S0013) is a remote access tool (RAT) that uses modular plugins. It has been used by multiple threat groups. (Citation: Lastline PlugX Analysis) (Citation: FireEye Clandestine Fox Part 2) (Citation: New DragonOK) (Citation: Dell TG-3390)", "label_id": 861, "label_title": "PlugX", "label_link": "https://attack.mitre.org/software/S0013", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "HttpBrowser", "context_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat. All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to", "context_right": "in terms of capabilities. However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "_context_left": "All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to ", "_context_right": " in terms of capabilities.", "sentence_left": "This last characteristic is very common in APT groups that use PlugX as the main threat, where instead of using “tokyo” to replace MZ, they usually add “plug” at the beginning, which has motivated the name of the threat.", "sentence_right": "However, HttpBrowser does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "label": "[HTTPBrowser](https://attack.mitre.org/software/S0070) is malware that has been used by several threat groups. (Citation: ThreatStream Evasion Analysis) (Citation: Dell TG-3390) It is believed to be of Chinese origin. (Citation: ThreatConnect Anthem)", "label_id": 1108, "label_title": "HTTPBrowser", "label_link": "https://attack.mitre.org/software/S0070", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "HttpBrowser", "context_left": "All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities. However,", "context_right": "does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage. | aftdoslma | Mutex |", "_context_left": "However, ", "_context_right": " does not share code or style of command codes with this sample, so it is most likely a different tool for the first infection stage.", "sentence_left": "All of this explains [the attribution of this hash to PlugX](https://www.virustotal.com/gui/file/382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc/detection) by some antivirus engines, although as it has been observed in the post, it is a somewhat smaller threat, which is not developed in Delphi as plugx and that keeps a greater resemblance to HttpBrowser in terms of capabilities.", "sentence_right": "| aftdoslma | Mutex |", "label": "[HTTPBrowser](https://attack.mitre.org/software/S0070) is malware that has been used by several threat groups. (Citation: ThreatStream Evasion Analysis) (Citation: Dell TG-3390) It is believed to be of Chinese origin. (Citation: ThreatConnect Anthem)", "label_id": 1108, "label_title": "HTTPBrowser", "label_link": "https://attack.mitre.org/software/S0070", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "TokyoX", "context_left": "| 382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc | Dll | | 3493331e8f6151a37a48d11243e0fa32e756e8ca78a454912630865b48a43693 |", "context_right": "ciphered | | 6370aa86e4bd2079913553bf34a5fe983b54d4907d168b278d6fe3caaf278d13 | Zip File |", "_context_left": "| 3493331e8f6151a37a48d11243e0fa32e756e8ca78a454912630865b48a43693 | ", "_context_right": " ciphered |", "sentence_left": "| 382b3d3bb1be4f14dbc1e82a34946a52795288867ed86c6c43e4f981729be4fc | Dll |", "sentence_right": "| 6370aa86e4bd2079913553bf34a5fe983b54d4907d168b278d6fe3caaf278d13 | Zip File |", "label": "TokyoX", "label_id": 1279, "label_title": "TokyoX", "label_link": "http://www.bosch.com#node1fvup9pj1x39", "entity_class": "CE", "entity_type": "MALWARE", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}
{"mention": "C2", "context_left": "| 6370aa86e4bd2079913553bf34a5fe983b54d4907d168b278d6fe3caaf278d13 | Zip File | | 31.192.107[.]187:443 |", "context_right": "| Customers with Lab52’s APT intelligence private feed service already have more tools and means of detection for this campaign.", "_context_left": "| 31.192.107[.]187:443 | ", "_context_right": " |", "sentence_left": "| 6370aa86e4bd2079913553bf34a5fe983b54d4907d168b278d6fe3caaf278d13 | Zip File |", "sentence_right": "Customers with Lab52’s APT intelligence private feed service already have more tools and means of detection for this campaign.", "label": "The adversary is trying to communicate with compromised systems to control them. Command and Control consists of techniques that adversaries may use to communicate with systems under their control within a victim network. Adversaries commonly attempt to mimic normal, expected traffic to avoid detection. There are many ways an adversary can establish command and control with various levels of stealth depending on the victim’s network structure and defenses.", "label_id": 581, "label_title": "Command and Control", "label_link": "https://attack.mitre.org/tactics/TA0011", "entity_class": "CE", "entity_type": "TACTIC", "document": "lab52_2022-01-12_tokyox-dll-side-loading-an"}