<?xml version="1.0"?>
<TimeML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://timeml.org/timeMLdocs/TimeML_1.2.1.xsd">
<DCT><TIMEX3 functionInDocument="CREATION_TIME" temporalFunction="false" tid="t0" type="DATE" value="2013-06-01">2013-06-01</TIMEX3></DCT>
<TEXT>
Rise In Red Kit Exploit Kit Activity   <TIMEX3 tid="t1" type="DATE" value="2013-06-01">June 01, 2013</TIMEX3>       This week, a malicious pattern of activity was observed in websites being compromised, which in turn redirected to a Red Kit exploit kit (EK) landing page.  Some infected websites that were seen:  * *neptunebenson[dot]com*  * *route66marathon[dot]com*  * *whitesteeple[dot]com*  (Warning.these sites may still be infected).  Two different mechanisms were used to infect the websites.  The first one being a standard iframe injection, which leads to the Red Kit EK landing page through URL redirections.  The other mechanism leverages SEO based techniques to carry out HTTP 302 redirections that lead to the RedKit EK landing page.  The snapshot below shows some of the sample URLs/SEO redirections that were seen.  Please refer to this URLQuery search in order to identify other URLs exhibiting the redirection patterns.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-DGkwrti8x58/UakimYm3xcI/AAAAAAAAAUU/U6Q4iXWHiWo/s640/r1.png)](/sites/default/files/images/blogs/-DGkwrti8x58/UakimYm3xcI/AAAAAAAAAUU/U6Q4iXWHiWo/s640/r1.png)    Upon visiting the infected webpage, it sends the user to a malicious redirection (HTTP 302).  The actual exploit code as shown below is then ultimately delivered.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-XOQ-b2vKRzA/UakyIeTeR4I/AAAAAAAAAVQ/3XgI6pGS-OM/s640/r3.png)](/sites/default/files/images/blogs/-XOQ-b2vKRzA/UakyIeTeR4I/AAAAAAAAAVQ/3XgI6pGS-OM/s640/r3.png)  The first landing page uses a typical RedKit Exploit, which contains the obfuscated URL that is used to fetch the payload as shown in the highlighted box below.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-BNUT1rb-QlU/UaktEuW-hGI/AAAAAAAAAUk/AFibhRba1gQ/s640/r5.png)](/sites/default/files/images/blogs/-BNUT1rb-QlU/UaktEuW-hGI/AAAAAAAAAUk/AFibhRba1gQ/s640/r5.png)  The Java Sandbox bypass exploit is carried out leveraging an unsigned applet with the suspicious parameter "\_\_applet\_ssv\_validated" passed, which exploits the following vulnerabilities:  [CVE-2013-1493](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-1493) / [CVE-2013-2423](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2423) / [CVE-2012-1723](http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1723).  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-TE-VMvHjJc4/UakVuCZ4obI/AAAAAAAAATg/hFX0QfuProQ/s640/r4.png)](/sites/default/files/images/blogs/-TE-VMvHjJc4/UakVuCZ4obI/AAAAAAAAATg/hFX0QfuProQ/s640/r4.png)  The jar applet gets the obfuscated URL from the parameter "name", which is passed by the jnlp as shown above.  It is then decoded into the final URL through the following code:   [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-Z6det-grD9c/Uaka2t_OKfI/AAAAAAAAATw/i2OCNOQlrE8/s400/c1.png)](/sites/default/files/images/blogs/-Z6det-grD9c/Uaka2t_OKfI/AAAAAAAAATw/i2OCNOQlrE8/s400/c1.png)  This URL contains the encrypted binary payload.  The applet creates a URL Connection Steam to download the encrypted binary stream.  The binary stream is then decrypted using the AES CBC 128 bit cipher block chaining scheme.  The IV (Initial Vector) and the decryption key are stored inside the applet.  After decryption, it stores the binary file onto the temporary folder with a random filename by making a call to java.io.tmpdir.  The snapshot below summarizes some of the important routines involved in the decryption process.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-EDrlPMsw004/Uakt3DoW_YI/AAAAAAAAAU0/89xiulb7CmA/s400/c4.png)](/sites/default/files/images/blogs/-EDrlPMsw004/Uakt3DoW_YI/AAAAAAAAAU0/89xiulb7CmA/s400/c4.png)  The binary file was packed using UPX and has anti-vm/anti-debugging detection routines.  The binary is a Keylogger Tojan that steals credentials such as credit card numbers, passwords etc. and sends it over to a remote location.  Currently, the binary is being detected only by three AV vendors as malicious.  Binary Reports:   [https://www.virustotal.com/en/file/33dca051d6ad48d09fdee7a14dfacc32c174616743ea16421d6fa4ccb77aeb71/analysis/](https://www.virustotal.com/#/file/33dca051d6ad48d09fdee7a14dfacc32c174616743ea16421d6fa4ccb77aeb71/analysis/)    Jar File Report:    [https://www.virustotal.com/en/file/13bfc250788893efaf9f8ad7d98fe1f01e5eb28f025fcdac9013470c7c9635fb/analysis/](https://www.virustotal.com/#/file/13bfc250788893efaf9f8ad7d98fe1f01e5eb28f025fcdac9013470c7c9635fb/analysis/)   It is always a good practice to keep vulnerable browser plugins such as Adobe/Java constantly updated.  This protects the end user from malicious EKs leveraging known vulnerabilities.  For more specfic information related to Java Plugins and how to disable them, please refer this great [blog post](/blogs/research/are-you-vulnerable-yet-another-java-0day-exploit) from my colleague [Julien Sobrier](http://www.blogger.com/profile/06741851635998994926).  
</TEXT>
</TimeML>