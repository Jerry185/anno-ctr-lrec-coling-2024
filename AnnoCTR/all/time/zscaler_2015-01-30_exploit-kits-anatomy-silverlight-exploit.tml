<?xml version="1.0"?>
<TimeML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://timeml.org/timeMLdocs/TimeML_1.2.1.xsd">
<DCT><TIMEX3 functionInDocument="CREATION_TIME" temporalFunction="false" tid="t0" type="DATE" value="2015-01-30">2015-01-30</TIMEX3></DCT>
<TEXT>
Exploit Kits: Anatomy Of A Silverlight Exploit    <TIMEX3 tid="t1" type="DATE" value="2015-01-30">January 30, 2015</TIMEX3>       With the significant adoption of Silverlight technology in today’s market, it has become one of the popular targets for the hacker community.  We have observed many popular exploit kits (EKs) like Nuclear and Fiesta, serving specially crafted exploits targeting Silverlight vulnerabilities.  Recently, we [blogged](/blogs/research/nuclear-exploit-kit-complete-infection-cycle) about the Nuclear Exploit kit live infection cycle, which was leveraging Silverlight vulnerabilities to infect the victim’s computer.  In this blog, we will take a look at the Silverlight exploit payloads and how they are embedded in the Exploit kit.  A Silverlight file is a zip archive with an ".xap" extension and it is written in the .NET language.  This XAP file containsa list of one or more .NET managed assemblies (.DLL files) along with the AppManifest.XAML file.  We have observed that Exploit kits are generally targeting following Silverlight vulnerabilities:  * ***CVE-2013-0074**: Memory Dereference Arbitrary Code Execution Vulnerability.*    This vulnerability is due to an improper boundary checking of the user supplied input which leads to arbitrary code execution.  * ***CVE-2013-3896**: Information (memory) disclosure Vulnerability*    By exploiting this vulnerability an unauthorized attacker can gain access to the sensitive information.  This bug is used to bypass the exploit mitigation technologies.  The following is a typical infection cycle involving Silverlight exploits in EKs:  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-fY1EM0INDQ0/VMnLlBTfLmI/AAAAAAAAAHY/Cv9EoHS88LE/s1600/image_final.png)](/sites/default/files/images/blogs/-fY1EM0INDQ0/VMnLlBTfLmI/AAAAAAAAAHY/Cv9EoHS88LE/s1600/image_final.png)    **Dissection of the Infection Cycle and Silverlight Exploit**:  As we discussed in our [previous blog](/blogs/research/nuclear-exploit-kit-complete-infection-cycle), the landing page of the Nuclear Exploit kit is heavily obfuscated to evade Anti-virus detection.  The function highlighted below is invoking the Silverlight exploit:   [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-a55jVHXmr2Y/VMk_i-ZK3gI/AAAAAAAAAGM/3nSM7Jfna_E/s1600/image2.png)](/sites/default/files/images/blogs/-a55jVHXmr2Y/VMk_i-ZK3gI/AAAAAAAAAGM/3nSM7Jfna_E/s1600/image2.png)   As we stepped through the deobfuscated code, we found that the exploit author has implemented multiple unused variables to possibly confuse analysts.  We saw a parameter named “tuti” which contains the base64 encoded data that decodes the shellcode.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-CJZKVx9gVJQ/VMk_jV0b2bI/AAAAAAAAAGU/uw-Z70M8nsc/s1600/image3.png)](/sites/default/files/images/blogs/-CJZKVx9gVJQ/VMk_jV0b2bI/AAAAAAAAAGU/uw-Z70M8nsc/s1600/image3.png)   Upon successful execution of the silver\_run() function, the Exploit kit will download a malicious XAP file with the following GET request.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-dZhXdCr33z4/VMk_jRtacgI/AAAAAAAAAGQ/x3sgHLchEyA/s1600/image4.png)](/sites/default/files/images/blogs/-dZhXdCr33z4/VMk_jRtacgI/AAAAAAAAAGQ/x3sgHLchEyA/s1600/image4.png)   The downloaded XAP exploit consists of three files as shown below.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-dFvV1n80x3U/VMk_kFcvKWI/AAAAAAAAAGY/SE9xD2R-qHQ/s1600/image5.png)](/sites/default/files/images/blogs/-dFvV1n80x3U/VMk_kFcvKWI/AAAAAAAAAGY/SE9xD2R-qHQ/s1600/image5.png)   The *AppManifest.xaml* file contains the deployment details needed to run the Silverlight application.  The first element of it starts with a deployment node which defines the Assembly information, Runtime version, Application Entry point and the assembly extension parts.  In this file, There is an attribute called 'RuntimeVersion' through which we can target a specific version of Silverlight.  There are two other important attributes, namely EntryPointAssembly & EntryPointType which are mainly used for loading the XAP file.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-2C8SUl7CtLY/VMk_kXBDajI/AAAAAAAAAGc/SvWvJ0BWvP8/s1600/image6.png)](/sites/default/files/images/blogs/-2C8SUl7CtLY/VMk_kXBDajI/AAAAAAAAAGc/SvWvJ0BWvP8/s1600/image6.png)   Reverse engineering the .NET DLL file is straightforward, because it is MSIL (Microsoft Intermediate Language) and there are multiple tools at our disposal.  We used the Telerik JustDecompile tool to decompile the DLL.   The following screenshot shows us the list of the classes used by the *asdgsd*.dll.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-SuZM1hlRmrw/VMk_lXx4ZTI/AAAAAAAAAG4/bfz7nv2j26U/s1600/image7.png)](/sites/default/files/images/blogs/-SuZM1hlRmrw/VMk_lXx4ZTI/AAAAAAAAAG4/bfz7nv2j26U/s1600/image7.png)   The screenshot below shows the entry point routine *asdgsd.App*.  The constructor of *asdgsd.App* is used to call the *shlyapa* class.  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-ceczwf03aBY/VMk_l_rQGOI/AAAAAAAAAGs/oBZyzLt74gI/s1600/image8.png)](/sites/default/files/images/blogs/-ceczwf03aBY/VMk_l_rQGOI/AAAAAAAAAGs/oBZyzLt74gI/s1600/image8.png)   The following activity is performed by the *shlyapa* class which attempts to exploit multiple silverlight vulnerabilities:  * Get the .NET run time environment version and store it in the “mild” variable.  * Get the base64 encoded stream from aforementioned “tuti” parameter and store it in “brae” variable and invoke the "dips" function.  * In parallel, the function “lout” generates the “numArray” leveraging  class “*chaiki”.*  *[![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-00nYpqj4YBs/VMucfYnswFI/AAAAAAAAAJg/tQWpN4OWfSk/s1600/image9.png)](/sites/default/files/images/blogs/-00nYpqj4YBs/VMucfYnswFI/AAAAAAAAAJg/tQWpN4OWfSk/s1600/image9.png)*  * Function "lout" generates the "BitmapImage" instance by calling function "game" from "alupka"  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-iHgHsSLN31c/VMuPNlonMNI/AAAAAAAAAIk/vm-nOawxfg4/s1600/BitmapImage.png)](/sites/default/files/images/blogs/-iHgHsSLN31c/VMuPNlonMNI/AAAAAAAAAIk/vm-nOawxfg4/s1600/BitmapImage.png)       * The function "huts" is leveraging *CVE [2013-3896](tel:2013-3896)* (*A memory disclosure vulnerability in the public WritableBitMap class)* to calculate the base-address of "mscorlib.ni.dll" as seen below:  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-OtwGJv4o4K4/VMuPNlfabsI/AAAAAAAAAIo/TZP3pHgiAaU/s1600/WritableBitMap.png)](/sites/default/files/images/blogs/-OtwGJv4o4K4/VMuPNlfabsI/AAAAAAAAAIo/TZP3pHgiAaU/s1600/WritableBitMap.png)          * Finally, the "dips" function executes the "spca" function that takes the base-address of "mscorlib.ni.dll" as an argument.  The "spca" function is triggering *CVE-2013-0074 (**Dereference Vulnerability during HTML object rendering)* as shown below:  [![](/cdn-cgi/image/format=auto/sites/default/files/images/blogs/-mhs2uoFO-3Q/VMuQ8V7HdfI/AAAAAAAAAJI/CajrBGT1F1E/s1600/html_object.png)](/sites/default/files/images/blogs/-mhs2uoFO-3Q/VMuQ8V7HdfI/AAAAAAAAAJI/CajrBGT1F1E/s1600/html_object.png)     The following is a sample of live Nuclear Exploit Kit domains that we have seen in past 24 hours:   **Nuclear EK Domains** indyresident[.]gqmacropromise[.]mlhybridvertex[.]gqmacropromise[.]gauthunilaej[.]co[.]vudaviddaniel[.]cfbrightrolling[.]mlculturemerge[.]ga    **Conclusion**:  We continue to see the Silverlight vulnerabilities mentioned in this blog being exploited by many other popular exploit kits.  Zscaler is actively monitoring and protecting end users against this threat.  *Credit for Analysis & Guidance : Dhruval Gandhi*         
</TEXT>
</TimeML>