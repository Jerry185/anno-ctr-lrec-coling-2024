<?xml version="1.0"?>
<TimeML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://timeml.org/timeMLdocs/TimeML_1.2.1.xsd">
<DCT><TIMEX3 functionInDocument="CREATION_TIME" temporalFunction="false" tid="t0" type="DATE" value="2021-07-20">2021-07-20</TIMEX3></DCT>
<TEXT>
Joker Joking in Google Play   <TIMEX3 tid="t1" type="DATE" value="2021-07-20">July 20, 2021</TIMEX3>       Joker is one of the most prominent malware families targeting Android devices.  Despite public awareness of this particular malware, it keeps finding its way into Google’s official application market by employing changes in its code, execution methods, or payload-retrieving techniques.  This spyware is designed to steal SMS messages, contact lists, and device information, and to sign the victim up for premium wireless application protocol (WAP) services.  Zscaler’s ThreatLabz research team has been [constantly monitoring the Joker malware](/blogs/security-research/joker-playing-hide-and-seek-google-play?utm_source=google&utm_medium=cpc&utm_campaign=dynamic-search-na&gclid=Cj0KCQjwub-HBhCyARIsAPctr7zN_IC2q7DbicYJtt267zR5SRiTV39qZ_0yUynFjRl7PfTncNk10xMaAsOQEALw_wcB).  Recently, we observed regular uploads of it onto the Google Play store.  ThreatLabz notified the Google Android Security team, who have taken prompt action to remove the suspicious apps (listed below) from the Google Play store.  This prompted us to evaluate how Joker is so successful at getting around the Google Play vetting process.  We saw 11 different samples regularly uploaded to Google Play recently clocking 30k installs.  ![](https://lh4.googleusercontent.com/6RZPV7_cePSf4cW-KKecraM-Pm9UEfzIoVXjr0J-eF9TzXPWRrXq1is6Jp9T2fkeAjVDxX_SGoqKHwLP8QhyXhIKSBVMkEOoHnRKHQPocQ0uptEdXmoVpsYHkgk5emvLd30uGePK)  #### **The following are the names of the infected apps we discovered on the Google Play store:**  * Free Affluent Message  * PDF Photo Scanner  * delux Keyboard  * Comply QR Scanner  * PDF Converter Scanner  * Font Style Keyboard  * Translate Free  * Saying Message  * Private Message  * Read Scanner  * Print Scanner  #### **Targeted Categories:**  Joker malware authors have targeted some categories of apps more than others.  Based on the 50+ payloads we have seen in the last 2.5 months, we have found the following 5 categories being targeted the most heavily:  * Health & Fitness  * Photography  * Tools  * Personalization  * Communication  The “Tools” category has been the favorite target of the Joker malware author, accounting for 41% of the total payloads we have seen.  “Communication” and “Personalization” are the next most affected categories with 28% and 22% of payload uploads respectively.  The “Photography” category saw 7% payloads.  “Health & Fitness” made up the final 2% of payloads; we believe this category is a new addition as we have not seen this category targeted previously.  ![](https://lh3.googleusercontent.com/esPYnY32aqEN-OcRKrF8fZ5r0COEuQ_fb1IkhpVaeuZgwizCOc6qA07qxpxB8y4Ewif9mq5QOT8wyQYyvNLqDk3ycOc8-OkS52ISgV7RnOwIuw5bEEUFFxVIfJDak9wAB2-_V9ae "Chart")  #### **Publisher Names:**  Joker authors appear to use a name dictionary system to derive the publisher names for their malicious apps.  All the Joker [dropper malware](https://www.techopedia.com/definition/54/dropper) have used full (first and last) names for developers, as shown below.  Each developer has only one app registered to them as well.  Such information serves as indicators to help us identify potential Joker malware -- though these criteria can certainly apply to legitimate apps as well.  ![Publisher Names](https://lh4.googleusercontent.com/TZDninj5vsHVrehnQOWGLeA3aA3n-_OIbW6VvKsy4Gasg7L_W1vxQp8vLYvFfazHqchDW08vhuAEACcjD_5RtM67Zxh321C9pFKMOJ0N2QtWRozDP2HfoeXg3yRwoY26_Wn46j-m)  **New Tactics From Joker Malware Authors:**  -------------------------------------------  Joker is well known for changing its tactics to bypass the Google Play store vetting process.  This time we saw Joker using URL shortener services to retrieve the first level of payload.  Unlike the previous campaign where the payloads were retrieved from the Alibaba Cloud, in this campaign we saw the Joker-infected apps download the mediator payload with URL shortener services like TinyURL, bit.ly, Rebrand.ly, zws.im or 27url.cn to hide the known Cloud service URLs serving stage payloads.  ![](https://lh5.googleusercontent.com/_PCfT0JOBUSWCfr4rq5-ShKbaVQnjox7WyWrrcd6piszZnMMGBkTYexN7DzN4aV3cBfM6oZy3H20BqWpcuqwb8p-BB7HQMNFQRb8LoZRTgIEJO4T1Zzw43d-wHOR0vayU-cRMyi5)  Fig 1: URL shortener service TinyURL  ![](https://lh3.googleusercontent.com/qDF7m1NruVcziisQhlybU2yWMZYJEHAB343krA3gWrYzYumbD4Wux0qmsCjsnu7Z8A3NQhhMbKKxF2XB50cZBBrCflQV-NGOOcbLruwzP77lrG2_OL7rDA0AgBILLA_f6mxbbMxp)  Fig 2: URL shortener service Rebrand.ly  #### **Example execution flow:**  **![](https://lh4.googleusercontent.com/kIPuv3Z5AfcTocowX31cKmqQtxsf889NTAIJnm2rHhkdSc01duUbnSGn6-YOcfmhdUybo9JCOQEf2fiRoxUQ8OQbk8_RxbJtk8IUlH2YV-TxI350lmpETlxAXmwTd76zgrVxR5dE)**  #### **C2 Changes:**  From the previous encounter, we also observed updated command and control center (C2) URIs.   In the previous campaign, we saw the C&C URI pattern was “/k3z0/B9MO/” which changed in the newer payload to “/svhyqj/mjcxzy”.  ![](https://lh3.googleusercontent.com/Mikiaf3lOYLjrKYQvoh_IMDw1m4Z7H3MW9DtptVGUfTnzckkBdo3LwFFJxbDzjRqKJW909TDaP2I1KB-JHvYOLY4LzCfsv8wxiybOMr57RqJtvflZ2f5XAMrqh1CJKXwhRsOHYBM)  Fig 3: Old C2 communication  ![](https://lh4.googleusercontent.com/bFjFpbH9GfrGZRJ-qehHPFLhBkiFbpahe0kxyzu9FEbEF3aNoAi_oMo_QYK4Tim7pbfBZ57NjJGsBCg0MrPQOtoPEB7VMgJ0J5jNAVdw1a43MmKZu_QMiE0e-5YtEH-W4O0X7Mq4)  Fig 4: New C2 communication  #### **String Obfuscation Key Changes:**  In the previous campaign, we saw the end payload use the string “nus106ba” to obfuscate the important information.  It has been changed to “nus35ba” which can be observed in the below screenshot.  We have also observed that the string which obfuscates sensitive strings such as C2 addresses keeps changing with the format “nus*ba” (where * represents a 2 or 3 digit number).  ![](https://lh3.googleusercontent.com/aElg52iIh8lNWBqwJKVPK5cVAiAXi7TdABDihEDmG-b-8gr52Y0lgt36W2DYtRmJB4sHfA5iGbib-vbAdvCXsph4T1XM-HicnjVY6H2DlXwg2wPBgh2Gc4LgruWsdyPZroyJ_S3d)  Fig 5: String Obfuscation examples  ![](https://lh6.googleusercontent.com/gfJ1dCC-_2xhsaTKNHNxD_NmEFi940af8TiE8DrBf51pqOXf05GunMYyHYaIc6JZT8SWF40MYF8hgDoVFxkfdenUOX4hM5zW_Zpyqbn2S2VppDY1cDTBQWSBQVJxdhO_8cZTvr4X)   Fig 6:String Obfuscation examples  #### **Abusing The Notification Access:**  In this campaign, the Joker malware payloads abuse the notification access functionality.  Once installed, the malware prompts for notification access to the user as shown in the below screenshot.  The notification access grants permissions to potentially read all notifications posted by the device and any other installed applications.  Once these settings have been allowed by the user, the malware has the control it needs to carry out its malicious activities.  ![Notification Access](https://lh5.googleusercontent.com/7lfH3hk2z4ZmESHCXxDpg7IHPJ0nBXk6szCEa-2RxqG05k6Op83-WJFKgQFuf8jlXTSTpy6XZ1liwLfjDmOUQxcDQoEeJax7llmOqCLANdtRyjItPYyNCNfYET_Vl5NmMMQv5VeS)  Fig 7: Notification Access  Following is the code routine for Notification access by stager payload.  ![](https://lh5.googleusercontent.com/5TpkY0B8F-OsF2Lol2bVjjb6UGxMY1wd-jH2NEHbAJBp9auxRBCIS-_IrnMCtTzfXvHIQ-UIj72jl4_Jn9M_s7ZpUUTUnpii4r5e31F40GVdk6Jv9Tv4KXoFjjj0kJgLrU33uSXa)  Fig 8: Code Routine for Notificationation Access Abuse  Following is the code routine for Notification access by the final payload.  ![](https://lh5.googleusercontent.com/_mvte2J66mCRpN0sreVHv10Ek6pvH1jtwQgaeNho-SBYSDh23XeExS8R7sSnFpkI4nTMf5pI5ch5u5Nn2ZI_qF6IwZPPonlf33nx8kWuNrqUznZxIa5b5wucScbVwwkAnMO5uBko)  ![](https://lh4.googleusercontent.com/3o6-EILWZS-en3D_CPISfrQ08MkpS6hgNfEEFv712SHcfqy0zTfY4I0jLURCkxkyWVsZJO1AiFzMwtVgZ1zXwp7ciCZ5p9NPdHj9-ShH-qeRcw17nVbfedKaHEfO5aqtLh_MEH9T)  Fig 9: Code Routine for Notification Access Abuse  **New Variant Or Smart New Stage Payload?**  -------------------------------------------  In analyzing the Joker campaign from the past two months, we came across two instances of what we consider to be the newest variant, which has substantial differences.  The app Font Style Keyboard is found to incorporate new changes from the older payloads.  ![New variant](https://lh5.googleusercontent.com/fVzY9v_A85UPxUvHKsblqU1y7wCWH6rmOQ2ydEZpvxExP4TO5QZqmo5bG1sFfN-ZzKDRuKYTM4gZeBroA41MC2vdkWum6mhE4bT0If8ABODlLozdfwSpijODKezy9Le8EuPBWphc)  In this Joker downloader app, we observed that the zws.im URL shortening service was leveraged to download the stage 1 payload.  ![](https://lh6.googleusercontent.com/TqCwKxfJTivah80RmG8aMLWrIRdtAf2rdlKYi-h9ib4ARnpDDnBmyxldz4rd33N34p1WIP7VIwBk3ZtO-YJv1M7Le0ae2lb8GOBxdCv3i6BOxBVn5kWDeQ9IYRFiHjYNaJWHAB11)  Fig 10: Stage 1 Payload delivery URL  The Google Play store app connects to the zws.im URL shortener service which then responds with the URL to download the stage 1 payload.  ![](https://lh4.googleusercontent.com/-eaqRxTTDsC4DDO6JBbgbfwpmsekDOV7DOfSWMNmFNAsUqPRV5TIAHUhfXXDhRQeUAircKqUjXNJOMKjm24GfO9SAjYxczAAb_SBgFHjqEw4BimHilJ5_5PzLA1nXNG2EEO0ZfZ0)  Fig 11: Stage 1 download from Google Play Store app  Like the normal Joker campaign, this stage 1 payload has an embedded URL to download the next stage payload or the final stage payload.  In this piece of malware, we saw the end payload was retrieved from the stage 1 payload as shown below.  ![](https://lh5.googleusercontent.com/J9wNvmtkqyllIsCa7-mYdbgRrAfaZjYc_ukgFw94yseCT2DSpu8n0A8MxnI7v_K2uFU1Hrrk6_KjGMk_0enFppFj7lq9rRhqL8t2R8c2SQFXfC-YBwA1ZDPKrN0MJi-iNheOKQ6J)  Fig 12: Embedded second-stage payload.  ![](https://lh6.googleusercontent.com/bDAzPiGYKPEsF3Q6gFjUlQEPtWqmQcidwrqPWJr9cxZmdaw8J2DJ_RAD8n200r1EkHaKgDscxHkMVOOgz6Jx6jrgjnZrAAf5360XNNDkmhGnKBm2ANb-Upmxo6By_cXhmF6d473r)  Fig 13: Download of a second-stage payload.  From this point on, this variant deviates quite a bit from the normal routine of the Joker Campaign.  In the previous Joker campaigns (or even the recent examples shown at the start of the writeup), the embedded URL in stage one was directly serving the Dalvik executables which are loaded by the stage one payload for further execution.  In the new variant, the embedded URLs now serve the raw data which is later converted to the next stage payload via an [XOR operation](https://www.techopedia.com/definition/3472/exclusive-or-xor) with a hardcoded key as shown in the below figure.  ![](https://lh6.googleusercontent.com/YxdoWevcGYKGI7i41JAD9kZCee1oRDu24jgosDAQhJzABgk7R1hd4qPrWxwFOY4Ez4tmLbiOC5LZg_JVJb9hMvcNpsZOIHHYBF15vZNKHMjManCTn10y1GiunCmqqHPXZzKeYw3C)  Fig 14: XORed with hardcoded key  Along with the XORed stage payload, another change to the stage binaries is that now the Joker stage payload also checks to see if specific apps are installed on the infected devices.  Observe below.  ![](https://lh6.googleusercontent.com/VMwHM_DzGLPTBDovoCHSeoDs1PhcX6pTRCgROjCbmXOhkAJgaRwqaGj54ODFP0qQ2cuGDt_3dmOj95KzsMRNFg3Xc9pEpCKSfb6swf_NnJYj8GOuLDxif-3WhaOcx7m3CVsm9UEG)  Fig 15: Checks for the installed apps  The following are the apps that the stage payload checks for.  These are also available on the Google Play store.  ![](https://lh3.googleusercontent.com/KzPvnnZNI_tjBQupJzKL0dFibWNv9XOJZk0DFq5n-zUMBy9KEfW2kMihTYLcm7hjYXqGpokoVMFU_y-7qKoitKtIKmv48_r8BWNEpMoLhO6ZaTgq_vMLJ2azaoECnWqSjLjNB8pt)  The stage payload will only continue certain activities if any of the above apps are not installed on the infected devices.  From the listed apps categories and developer names we assume that these are again Joker-related apps that can be used to assess the infected devices.  However, by the time of writing this, two of these apps have been taken down by the Google Play store and the rest are not working in our environment, so we cannot confirm that these are Joker malware.  Unlike the previous Joker campaigns, the stage payload is also doing command and control communication.  The below screenshot exhibits the  activity from the staged payload.  In the normal routine, we did not observe any network activity from the staged payload apart from straightforward downloads of the next stage payload.  In this sample, we have found the staged payload connects to the gaikai[.]work domain by sending device information and receiving the commands from the server.  ![](https://lh6.googleusercontent.com/6Pbfiu1MUFqtnvqLF2pR2tHdbiWI-9FbfDEbTeCtmZ0vIGJ7GaEi7d7Y2Rwsgt1ff0oHTrbfl-zTRGYWGy3sP8O62eowyTm5iNZwKolPmNLUTtbFGi4Q0RdpbUQkCrHAEI5OskgP)  Fig 16: C2 from stage payload  Along with this, we are also observing that the stage payload uses a XXTEA algorithm to encrypt the data being served to and by the C2 server.  Below is the code routine for encryption and decryption of data with the hard-coded key.  ![](https://lh3.googleusercontent.com/hGxaVtJ7L1Wufd8wnWp1PHbkwyhUl8N3v-w5KRT8MX2YLfqZN7x9X2wqpw0jEGItxTWa1clKTW8-wRSULob2DmntOY0Zfig3kB0rpsf9NoAwhVUH5N9MprF6IuSoQGmw4LetF-hs)  Fig 17: XXTEA encode and decode  We believe stage payload C2 activity is mainly used to screen the infected mobile phones that meet the trigger condition.  The C2 server can issue an error\_code field with a return value on which the malware will act accordingly to trigger certain malicious activities including SMS operations.  ![](https://lh3.googleusercontent.com/WkkoAd4UItlfv7aT1CM_S1KpHoAMPAZN7r8GeSSjJXjv0AkmVhV9MhwHHAlJ39X-HWyuw_rmQnLCMJWqbT4iurS0m7Fqsj0gDSL4dr7NH_2H9R9Td1rqVq4NZWO8lEmEEIRHbyUU)![](https://lh6.googleusercontent.com/LBfEIjNTW8IDKsY87WPD-GHca4ksvqU5rcLk3ZBNSbdrnIinbsimd6cx3wvjbLSEag9CKoexA_taBcXKfz0wCoZeb0FLi_zTphCGl0H2n36uBbL_laWeRWrsR7DlBBn0mW1HPokz)  Fig 18: XXTEA decode  In the normal Joker infection cycle the intermediate payloads will directly drop the final stage payload, whereas in this smart stage payload, we saw the final stage payload will only be downloaded if the infected device has a Thailand Mobile SIM card.  Observe the below screenshot.  ![](https://lh4.googleusercontent.com/4_sOZLMXTkFi94gw_h1xHHYE-X8R6RaanZCeAa-LZsNyfK-hzzCXycfJwgHEVp1n9YLqY4H72n7VjSZYYUqlfs1TUosCnum9-AVntoHdWRYgQIfoq7ulj1O3Ss96L0LBF70SdjrL)  Fig 19: Final stage download.  #### **Conclusion:**  The Joker malware authors are very active and innovating on their tactics in their attempts to bypass the vetting process of the Google Play store.  Judging by the number of payloads uploaded to Google Play, we can safely say that the Joker malware authors are succeeding in their efforts.  At ThreatLabz, we constantly monitor the newly added apps to the Google Play store for such incidents and help remove them from the Google Play store by collaborating with the Google Security Team.  The Google Play store is not the only place that Joker malware can be found.  These same apps are uploaded to other third-party app stores as well due to those stores’ regular crawling activities on the Google Play store.  Malicious apps have been promptly removed from the Play store upon being reported by the security community or caught by their vetting process, but these apps can live longer in the third-party app stores who do not perform these same actions.  Hence, we still recommend using Google Play store for downloading any mobile app.  #### **Package Names:**  | com.affluent.messenger | Free Affluent Message |  | com.tc.pdfscanner | PDF Photo Scanner |  | com.delux.Keyboard | delux Keyboard |  | com.comply.qrscan | Comply QR Scanner |  | com.converter.pdfscanner | PDF Converter Scanner |  | r4d236dTy.rc5a682Ty.r7a6011Ty | Font Style Keyboard |  | com.text.translate.freegp | Translate Free |  | say.freetext | Saying Message |  | messenger.message.private | Private Message |  | com.totalcomapp.barcodereader | Read Scanner |  | com.scanner.sad.msgf.wq | Print Scanner |  **IOCs:**  * aiyama[.]oss-eu-west-1[.]aliyuncs.com/comply  * aiyama[.]oss-eu-west-1[.]aliyuncs[.]com/P[.]pic  * aiyama[.]oss-eu-west-1[.]aliyuncs[.]com/ys[.]pic  * tatamm[.]oss-us-west-1[.]aliyuncs.com/halcy  * tatamm[.]oss-us-west-1[.]aliyuncs[.]com/bac[.]pic  * tatamm[.]oss-us-west-1[.]aliyuncs[.]com/tat[.]pic  * voicesp[.]oss-us-east-1.aliyuncs[.]com  * hd-background[.]oss-ap-southeast-1[.]aliyuncs[.]com/free  * aiyama[.]oss-eu-west-1[.]aliyuncs.com/aff  * 61toolll[.]oss-us-east-1[.]aliyuncs[.]com/funny\_sub  * 0701baibao-1305586011[.]cos[.]ap-nanjing[.]myqcloud.com/a  * 0701baibao-1305586011[.]cos[.]ap-nanjing[.]myqcloud[.]com/sub  * warriorss[.]oss-us-west-1[.]aliyuncs[.]com/xhw/sub[.]apk  * kadmg[.]oss-me-east-1[.]aliyuncs[.]com/apps  #### **C&C:**  * 161[.]117[.]46[.]64  * gaikai[.]work  * spotifyly[.]world  
</TEXT>
</TimeML>