<DOCSTART>	O	O	O	O	O	O

The	O	O	O	O	O	O
Story	O	O	O	O	O	O
Of	O	O	O	O	O	O
A	O	O	O	O	O	O
Trojan	O	O	O	O	O	O
Dropper	O	O	O	O	O	O
III	O	O	O	O	O	O

January	O	O	B-DATE	O	O	B-DATE
09	O	O	I-DATE	O	O	I-DATE
,	O	O	I-DATE	O	O	I-DATE
2014	O	O	I-DATE	O	O	I-DATE

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Introduction	O	O	O	O	O	O
:	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

In	O	O	O	O	O	O
previous	O	O	O	O	O	O
posts	O	O	O	O	O	O
(	O	O	O	O	O	O
story	O	O	O	O	O	O
of	O	O	O	O	O	O
Trojan	O	O	O	O	O	O
dropper	O	O	O	O	O	O
[	O	O	O	O	O	O
part	O	O	O	O	O	O
I	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
/	O	O	O	O	O	O
blogs	O	O	O	O	O	O
/	O	O	O	O	O	O
research	O	O	O	O	O	O
/	O	O	O	O	O	O
story-trojan-dropper-i	O	O	O	O	O	O
)	O	O	O	O	O	O
,	O	O	O	O	O	O
[	O	O	O	O	O	O
II	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
/	O	O	O	O	O	O
blogs	O	O	O	O	O	O
/	O	O	O	O	O	O
research	O	O	O	O	O	O
/	O	O	O	O	O	O
story-trojan-dropper-ii	O	O	O	O	O	O
)	O	O	O	O	O	O
)	O	O	O	O	O	O
we	O	O	O	O	O	O
performed	O	O	O	O	O	O
both	O	O	O	O	O	O
static	O	O	O	O	O	O
and	O	O	O	O	O	O
dynamic	O	O	O	O	O	O
analysis	O	O	O	O	O	O
 	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
threat	O	O	O	O	O	O
and	O	O	O	O	O	O
also	O	O	O	O	O	O
developed	O	O	O	O	O	O
a	O	O	O	O	O	O
broad	O	O	O	O	O	O
idea	O	O	O	O	O	O
of	O	O	O	O	O	O
what	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
was	O	O	O	O	O	O
doing	O	O	O	O	O	O
in	O	O	O	O	O	O
it	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
initial	O	O	O	O	O	O
stages	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
now	O	O	O	O	O	O
set	O	O	O	O	O	O
out	O	O	O	O	O	O
to	O	O	O	O	O	O
investigate	O	O	O	O	O	O
the	O	O	O	O	O	O
reason	O	O	O	O	O	O
behind	O	O	O	O	O	O
the	O	O	O	O	O	O
crash	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
dropped	O	O	O	O	O	O
file	O	O	O	O	O	O
(	O	O	O	O	O	O
“	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
”	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
same	O	O	O	O	O	O
time	O	O	O	O	O	O
we	O	O	O	O	O	O
want	O	O	O	O	O	O
to	O	O	O	O	O	O
retrieve	O	O	O	O	O	O
the	O	O	O	O	O	O
payload	O	O	O	O	O	O
from	O	O	O	O	O	O
this	O	O	O	O	O	O
particular	O	O	O	O	O	O
malware	O	O	O	O	O	O
sample	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Analysis	O	O	O	O	O	O
:	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

Let	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
go	O	O	O	O	O	O
ahead	O	O	O	O	O	O
and	O	O	O	O	O	O
debug	O	O	O	O	O	O
the	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
file	O	O	O	O	O	O
(	O	O	O	O	O	O
“	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
”	O	O	O	O	O	O
)	O	O	O	O	O	O
was	O	O	O	O	O	O
found	O	O	O	O	O	O
to	O	O	O	O	O	O
be	O	O	O	O	O	O
packed	O	O	O	O	O	O
(	O	O	O	O	O	O
custom	O	O	O	O	O	O
variant	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
the	O	O	O	O	O	O
unpacking	O	O	O	O	O	O
routine	O	O	O	O	O	O
is	O	O	O	O	O	O
similar	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
approach	O	O	O	O	O	O
detailed	O	O	O	O	O	O
in	O	O	O	O	O	O
[	O	O	O	O	O	O
part	O	O	O	O	O	O
II	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
/	O	O	O	O	O	O
blogs	O	O	O	O	O	O
/	O	O	O	O	O	O
research	O	O	O	O	O	O
/	O	O	O	O	O	O
story-trojan-dropper-ii	O	O	O	O	O	O
)	O	O	O	O	O	O
of	O	O	O	O	O	O
this	O	O	O	O	O	O
post	O	O	O	O	O	O
,	O	O	O	O	O	O
so	O	O	O	O	O	O
let	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
skip	O	O	O	O	O	O
all	O	O	O	O	O	O
the	O	O	O	O	O	O
gory	O	O	O	O	O	O
details	O	O	O	O	O	O
and	O	O	O	O	O	O
dive	O	O	O	O	O	O
right	O	O	O	O	O	O
into	O	O	O	O	O	O
it	O	O	O	O	O	O
.	O	O	O	O	O	O

After	O	O	O	O	O	O
unpacking	O	O	O	O	O	O
the	O	O	O	O	O	O
entire	O	O	O	O	O	O
binary	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
a	O	O	O	O	O	O
newly	O	O	O	O	O	O
unpacked	O	O	O	O	O	O
region	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
"	O	O	O	O	O	O
0x401634	O	O	O	O	O	O
"	O	O	O	O	O	O
.	O	O	O	O	O	O

Now	O	O	O	O	O	O
the	O	O	O	O	O	O
action	O	O	O	O	O	O
begins	O	O	O	O	O	O
from	O	O	O	O	O	O
here	O	O	O	O	O	O
and	O	O	O	O	O	O
we	O	O	O	O	O	O
get	O	O	O	O	O	O
our	O	O	O	O	O	O
first	O	O	O	O	O	O
decryption	O	O	O	O	O	O
routine	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
a	O	O	O	O	O	O
simple	O	O	O	O	O	O
1	O	O	O	O	O	O
-	O	O	O	O	O	O
byte	O	O	O	O	O	O
XOR	O	O	O	O	O	O
with	O	O	O	O	O	O
a	O	O	O	O	O	O
static	O	O	O	O	O	O
key	O	O	O	O	O	O
as	O	O	O	O	O	O
seen	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
image	O	O	O	O	O	O
below	O	O	O	O	O	O
which	O	O	O	O	O	O
reveals	O	O	O	O	O	O
more	O	O	O	O	O	O
code	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
1	O	O	O	O	O	O
:	O	O	O	O	O	O
Decrypt	O	O	O	O	O	O
code	O	O	O	O	O	O
|	O	O	O	O	O	O

If	O	O	O	O	O	O
we	O	O	O	O	O	O
carefully	O	O	O	O	O	O
look	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
new	O	O	O	O	O	O
code	O	O	O	O	O	O
below	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
observe	O	O	O	O	O	O
that	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
riddled	O	O	O	O	O	O
with	O	O	O	O	O	O
JMP	O	O	O	O	O	O
instructions	O	O	O	O	O	O
and	O	O	O	O	O	O
occasionally	O	O	O	O	O	O
we	O	O	O	O	O	O
find	O	O	O	O	O	O
a	O	O	O	O	O	O
few	O	O	O	O	O	O
garbage	O	O	O	O	O	O
values	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
code	O	O	O	O	O	O
is	O	O	O	O	O	O
crafted	O	O	O	O	O	O
in	O	O	O	O	O	O
such	O	O	O	O	O	O
a	O	O	O	O	O	O
way	O	O	O	O	O	O
that	O	O	O	O	O	O
it	O	O	O	O	O	O
resists	O	O	O	O	O	O
disassemble	O	O	O	O	O	O
attempts	O	O	O	O	O	O
which	O	O	O	O	O	O
makes	O	O	O	O	O	O
reverse	O	O	O	O	O	O
engineering	O	O	O	O	O	O
the	O	O	O	O	O	O
sample	O	O	O	O	O	O
more	O	O	O	O	O	O
difficult	O	O	O	O	O	O
and	O	O	O	O	O	O
somewhat	O	O	O	O	O	O
painful	O	O	O	O	O	O
.	O	O	O	O	O	O

Hidden	O	O	O	O	O	O
in	O	O	O	O	O	O
between	O	O	O	O	O	O
these	O	O	O	O	O	O
JMP	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
in	O	O	O	O	O	O
plain	O	O	O	O	O	O
sight	O	O	O	O	O	O
is	O	O	O	O	O	O
an	O	O	O	O	O	O
instruction	O	O	O	O	O	O
that	O	O	O	O	O	O
is	O	O	O	O	O	O
familiar	O	O	O	O	O	O
to	O	O	O	O	O	O
us	O	O	O	O	O	O
by	O	O	O	O	O	O
now	O	O	O	O	O	O
(	O	O	O	O	O	O
i.e	O	O	O	O	O	O
the	O	O	O	O	O	O
instruction	O	O	O	O	O	O
to	O	O	O	O	O	O
fetch	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
PEB	O	O	O	O	O	O
(	O	O	O	O	O	O
Process	O	O	O	O	O	O
Environment	O	O	O	O	O	O
Block	O	O	O	O	O	O
)	O	O	O	O	O	O
)	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
2	O	O	O	O	O	O
:	O	O	O	O	O	O
Fetch	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
PEB	O	O	O	O	O	O
|	O	O	O	O	O	O

At	O	O	O	O	O	O
this	O	O	O	O	O	O
point	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
only	O	O	O	O	O	O
speculate	O	O	O	O	O	O
on	O	O	O	O	O	O
why	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
needs	O	O	O	O	O	O
the	O	O	O	O	O	O
PEB	O	O	O	O	O	O
address	O	O	O	O	O	O
.	O	O	O	O	O	O

Moving	O	O	O	O	O	O
further	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
encounter	O	O	O	O	O	O
another	O	O	O	O	O	O
decryption	O	O	O	O	O	O
point	O	O	O	O	O	O
that	O	O	O	O	O	O
is	O	O	O	O	O	O
exactly	O	O	O	O	O	O
same	O	O	O	O	O	O
as	O	O	O	O	O	O
the	O	O	O	O	O	O
first	O	O	O	O	O	O
one	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
decrypts	O	O	O	O	O	O
more	O	O	O	O	O	O
code	O	O	O	O	O	O
.	O	O	O	O	O	O

Now	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
newly	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
code	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
3	O	O	O	O	O	O
:	O	O	O	O	O	O
 	O	O	O	O	O	O
NtGlobalFlag	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
image	O	O	O	O	O	O
above	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
have	O	O	O	O	O	O
an	O	O	O	O	O	O
interesting	O	O	O	O	O	O
bit	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
.	O	O	O	O	O	O

Recall	O	O	O	O	O	O
that	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
already	O	O	O	O	O	O
collected	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
PEB	O	O	O	O	O	O
.	O	O	O	O	O	O

At	O	O	O	O	O	O
this	O	O	O	O	O	O
point	O	O	O	O	O	O
,	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
instruction	O	O	O	O	O	O
CMP	O	O	O	O	O	O
DWORD	O	O	O	O	O	O
PTR	O	O	O	O	O	O
DS	O	O	O	O	O	O
:	O	O	O	O	O	O
[	O	O	O	O	O	O
EDI	O	O	O	O	O	O
+	O	O	O	O	O	O
68	O	O	O	O	O	O
]	O	O	O	O	O	O
,	O	O	O	O	O	O
ECX	O	O	O	O	O	O
(	O	O	O	O	O	O
here	O	O	O	O	O	O
EDI	O	O	O	O	O	O
holds	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
PEB	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
"	O	O	O	O	O	O
0x7FFD4000	O	O	O	O	O	O
"	O	O	O	O	O	O
and	O	O	O	O	O	O
ECX	O	O	O	O	O	O
holds	O	O	O	O	O	O
a	O	O	O	O	O	O
constant	O	O	O	O	O	O
0x70	O	O	O	O	O	O
)	O	O	O	O	O	O
a	O	O	O	O	O	O
comparison	O	O	O	O	O	O
is	O	O	O	O	O	O
performed	O	O	O	O	O	O
,	O	O	O	O	O	O
after	O	O	O	O	O	O
which	O	O	O	O	O	O
a	O	O	O	O	O	O
JNZ	O	O	O	O	O	O
instruction	O	O	O	O	O	O
decides	O	O	O	O	O	O
the	O	O	O	O	O	O
fate	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
flow	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
we	O	O	O	O	O	O
get	O	O	O	O	O	O
our	O	O	O	O	O	O
first	O	O	O	O	O	O
glimpse	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
anti-debugging	O	O	O	O	O	O
technique	O	O	O	O	O	O
employed	O	O	O	O	O	O
by	O	O	O	O	O	O
this	O	O	O	O	O	O
malware	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
instruction	O	O	O	O	O	O
CMP	O	O	O	O	O	O
DWORD	O	O	O	O	O	O
PTR	O	O	O	O	O	O
DS	O	O	O	O	O	O
:	O	O	O	O	O	O
[	O	O	O	O	O	O
EDI	O	O	O	O	O	O
+	O	O	O	O	O	O
68	O	O	O	O	O	O
]	O	O	O	O	O	O
,	O	O	O	O	O	O
ECX	O	O	O	O	O	O
compares	O	O	O	O	O	O
the	O	O	O	O	O	O
value	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
ECX	O	O	O	O	O	O
register	O	O	O	O	O	O
(	O	O	O	O	O	O
i.e	O	O	O	O	O	O
.	O	O	O	O	O	O
0x70	O	O	O	O	O	O
)	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
location	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
PEB	O	O	O	O	O	O
structure	O	O	O	O	O	O
known	O	O	O	O	O	O
as	O	O	O	O	O	O
“	O	O	O	O	O	O
NtGlobalFlag	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
field	O	O	O	O	O	O
is	O	O	O	O	O	O
set	O	O	O	O	O	O
to	O	O	O	O	O	O
a	O	O	O	O	O	O
value	O	O	O	O	O	O
of	O	O	O	O	O	O
“	O	O	O	O	O	O
0x70	O	O	O	O	O	O
”	O	O	O	O	O	O
,	O	O	O	O	O	O
if	O	O	O	O	O	O
the	O	O	O	O	O	O
process	O	O	O	O	O	O
is	O	O	O	O	O	O
spawned	O	O	O	O	O	O
under	O	O	O	O	O	O
a	O	O	O	O	O	O
debugger	O	O	O	O	O	O
.	O	O	O	O	O	O

In	O	O	O	O	O	O
our	O	O	O	O	O	O
case	O	O	O	O	O	O
,	O	O	O	O	O	O
this	O	O	O	O	O	O
is	O	O	O	O	O	O
true	O	O	O	O	O	O
since	O	O	O	O	O	O
we	O	O	O	O	O	O
are	O	O	O	O	O	O
debugging	O	O	O	O	O	O
the	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

Finally	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
JNZ	O	O	O	O	O	O
instruction	O	O	O	O	O	O
at	O	O	O	O	O	O
"	O	O	O	O	O	O
0x401511	O	O	O	O	O	O
"	O	O	O	O	O	O
is	O	O	O	O	O	O
not	O	O	O	O	O	O
taken	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
lands	O	O	O	O	O	O
us	O	O	O	O	O	O
in	O	O	O	O	O	O
an	O	O	O	O	O	O
invalid	O	O	O	O	O	O
region	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
,	O	O	O	O	O	O
thus	O	O	O	O	O	O
triggering	O	O	O	O	O	O
the	O	O	O	O	O	O
anti-debugging	O	O	O	O	O	O
.	O	O	O	O	O	O

Let	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
jump	O	O	O	O	O	O
here	O	O	O	O	O	O
and	O	O	O	O	O	O
continue	O	O	O	O	O	O
with	O	O	O	O	O	O
our	O	O	O	O	O	O
analysis	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
now	O	O	O	O	O	O
have	O	O	O	O	O	O
another	O	O	O	O	O	O
layer	O	O	O	O	O	O
of	O	O	O	O	O	O
decryption	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
reveals	O	O	O	O	O	O
more	O	O	O	O	O	O
code	O	O	O	O	O	O
after	O	O	O	O	O	O
which	O	O	O	O	O	O
,	O	O	O	O	O	O
as	O	O	O	O	O	O
usual	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
this	O	O	O	O	O	O
region	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
then	O	O	O	O	O	O
reach	O	O	O	O	O	O
another	O	O	O	O	O	O
piece	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
revealed	O	O	O	O	O	O
only	O	O	O	O	O	O
if	O	O	O	O	O	O
we	O	O	O	O	O	O
keep	O	O	O	O	O	O
up	O	O	O	O	O	O
with	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
flow	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
4	O	O	O	O	O	O
:	O	O	O	O	O	O
File-path	O	O	O	O	O	O
,	O	O	O	O	O	O
name	O	O	O	O	O	O
identification	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
above	O	O	O	O	O	O
code	O	O	O	O	O	O
uses	O	O	O	O	O	O
“	O	O	O	O	O	O
strstr	O	O	O	O	O	O
”	O	O	O	O	O	O
to	O	O	O	O	O	O
look	O	O	O	O	O	O
for	O	O	O	O	O	O
a	O	O	O	O	O	O
string	O	O	O	O	O	O
named	O	O	O	O	O	O
“	O	O	O	O	O	O
sample	O	O	O	O	O	O
”	O	O	O	O	O	O
anywhere	O	O	O	O	O	O
in	O	O	O	O	O	O
file	O	O	O	O	O	O
path	O	O	O	O	O	O
of	O	O	O	O	O	O
our	O	O	O	O	O	O
currently	O	O	O	O	O	O
debugged	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
found	O	O	O	O	O	O
,	O	O	O	O	O	O
“	O	O	O	O	O	O
strstr	O	O	O	O	O	O
”	O	O	O	O	O	O
returns	O	O	O	O	O	O
a	O	O	O	O	O	O
pointer	O	O	O	O	O	O
to	O	O	O	O	O	O
 	O	O	O	O	O	O
first	O	O	O	O	O	O
occurrence	O	O	O	O	O	O
 	O	O	O	O	O	O
of	O	O	O	O	O	O
 	O	O	O	O	O	O
search	O	O	O	O	O	O
string	O	O	O	O	O	O
(	O	O	O	O	O	O
i.e	O	O	O	O	O	O
"	O	O	O	O	O	O
sample	O	O	O	O	O	O
"	O	O	O	O	O	O
)	O	O	O	O	O	O
in	O	O	O	O	O	O
 	O	O	O	O	O	O
file-path	O	O	O	O	O	O
,	O	O	O	O	O	O
or	O	O	O	O	O	O
else	O	O	O	O	O	O
it	O	O	O	O	O	O
returns	O	O	O	O	O	O
zero	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
malware	O	O	O	O	O	O
then	O	O	O	O	O	O
checks	O	O	O	O	O	O
the	O	O	O	O	O	O
return	O	O	O	O	O	O
value	O	O	O	O	O	O
in	O	O	O	O	O	O
EAX	O	O	O	O	O	O
and	O	O	O	O	O	O
takes	O	O	O	O	O	O
a	O	O	O	O	O	O
conditional	O	O	O	O	O	O
jump	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
form	O	O	O	O	O	O
of	O	O	O	O	O	O
JE	O	O	O	O	O	O
instruction	O	O	O	O	O	O
at	O	O	O	O	O	O
"	O	O	O	O	O	O
0x401135	O	O	O	O	O	O
"	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
the	O	O	O	O	O	O
jump	O	O	O	O	O	O
is	O	O	O	O	O	O
not	O	O	O	O	O	O
taken	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
lands	O	O	O	O	O	O
in	O	O	O	O	O	O
“	O	O	O	O	O	O
ExitProcess	O	O	O	O	O	O
”	O	O	O	O	O	O
,	O	O	O	O	O	O
a	O	O	O	O	O	O
call	O	O	O	O	O	O
which	O	O	O	O	O	O
terminates	O	O	O	O	O	O
the	O	O	O	O	O	O
process	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
is	O	O	O	O	O	O
the	O	O	O	O	O	O
second	O	O	O	O	O	O
anti-debugging	O	O	O	O	O	O
technique	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
employs	O	O	O	O	O	O
,	O	O	O	O	O	O
although	O	O	O	O	O	O
not-an	O	O	O	O	O	O
effective	O	O	O	O	O	O
one	O	O	O	O	O	O
in	O	O	O	O	O	O
my	O	O	O	O	O	O
opinion	O	O	O	O	O	O
 	O	O	O	O	O	O
considering	O	O	O	O	O	O
the	O	O	O	O	O	O
odds	O	O	O	O	O	O
of	O	O	O	O	O	O
a	O	O	O	O	O	O
file-path	O	O	O	O	O	O
or	O	O	O	O	O	O
malware	O	O	O	O	O	O
name	O	O	O	O	O	O
containing	O	O	O	O	O	O
the	O	O	O	O	O	O
name	O	O	O	O	O	O
“	O	O	O	O	O	O
sample	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
5	O	O	O	O	O	O
:	O	O	O	O	O	O
 	O	O	O	O	O	O
GetVolumeinformation	O	O	O	O	O	O
,	O	O	O	O	O	O
Volumeserial	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

Again	O	O	O	O	O	O
,	O	O	O	O	O	O
here	O	O	O	O	O	O
we	O	O	O	O	O	O
have	O	O	O	O	O	O
another	O	O	O	O	O	O
anti-debugging	O	O	O	O	O	O
technique	O	O	O	O	O	O
where	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
Volumeserial	O	O	O	O	O	O
number	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
API	O	O	O	O	O	O
GetVolumeinformation	O	O	O	O	O	O
and	O	O	O	O	O	O
compares	O	O	O	O	O	O
it	O	O	O	O	O	O
with	O	O	O	O	O	O
 	O	O	O	O	O	O
“	O	O	O	O	O	O
0CD1A40	O	O	O	O	O	O
”	O	O	O	O	O	O
and	O	O	O	O	O	O
“	O	O	O	O	O	O
70144646	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
either	O	O	O	O	O	O
comparison	O	O	O	O	O	O
matches	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
jumps	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
ExitProcess	O	O	O	O	O	O
call	O	O	O	O	O	O
.	O	O	O	O	O	O

Another	O	O	O	O	O	O
anti-debugging	O	O	O	O	O	O
technique	O	O	O	O	O	O
follows	O	O	O	O	O	O
immediately	O	O	O	O	O	O
thereafter	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
form	O	O	O	O	O	O
of	O	O	O	O	O	O
“	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
first	O	O	O	O	O	O
argument	O	O	O	O	O	O
that	O	O	O	O	O	O
"	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
"	O	O	O	O	O	O
accepts	O	O	O	O	O	O
is	O	O	O	O	O	O
a	O	O	O	O	O	O
pointer	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
callback	O	O	O	O	O	O
function	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
does	O	O	O	O	O	O
a	O	O	O	O	O	O
neat	O	O	O	O	O	O
trick	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
we	O	O	O	O	O	O
look	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
below	O	O	O	O	O	O
,	O	O	O	O	O	O
at	O	O	O	O	O	O
address	O	O	O	O	O	O
“	O	O	O	O	O	O
0x401179	O	O	O	O	O	O
”	O	O	O	O	O	O
a	O	O	O	O	O	O
constant	O	O	O	O	O	O
“	O	O	O	O	O	O
0x2	O	O	O	O	O	O
”	O	O	O	O	O	O
is	O	O	O	O	O	O
pushed	O	O	O	O	O	O
onto	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
followed	O	O	O	O	O	O
immediately	O	O	O	O	O	O
by	O	O	O	O	O	O
a	O	O	O	O	O	O
CALL	O	O	O	O	O	O
.	O	O	O	O	O	O

When	O	O	O	O	O	O
this	O	O	O	O	O	O
CALL	O	O	O	O	O	O
is	O	O	O	O	O	O
executed	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
pushes	O	O	O	O	O	O
the	O	O	O	O	O	O
return	O	O	O	O	O	O
address	O	O	O	O	O	O
onto	O	O	O	O	O	O
the	O	O	O	O	O	O
top	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
(	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
"	O	O	O	O	O	O
0x401180	O	O	O	O	O	O
"	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
the	O	O	O	O	O	O
EIP	O	O	O	O	O	O
(	O	O	O	O	O	O
Instruction	O	O	O	O	O	O
pointer	O	O	O	O	O	O
)	O	O	O	O	O	O
now	O	O	O	O	O	O
lands	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
"	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
"	O	O	O	O	O	O
call	O	O	O	O	O	O
.	O	O	O	O	O	O

Now	O	O	O	O	O	O
if	O	O	O	O	O	O
we	O	O	O	O	O	O
observe	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
value	O	O	O	O	O	O
on	O	O	O	O	O	O
top	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
is	O	O	O	O	O	O
the	O	O	O	O	O	O
return	O	O	O	O	O	O
address	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
naturally	O	O	O	O	O	O
becomes	O	O	O	O	O	O
the	O	O	O	O	O	O
callback	O	O	O	O	O	O
function	O	O	O	O	O	O
address	O	O	O	O	O	O
for	O	O	O	O	O	O
"	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
"	O	O	O	O	O	O
.	O	O	O	O	O	O

When	O	O	O	O	O	O
the	O	O	O	O	O	O
"	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
"	O	O	O	O	O	O
API	O	O	O	O	O	O
is	O	O	O	O	O	O
executed	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
falls	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
callback	O	O	O	O	O	O
function	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
 	O	O	O	O	O	O
continues	O	O	O	O	O	O
the	O	O	O	O	O	O
execution	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
6	O	O	O	O	O	O
:	O	O	O	O	O	O
 	O	O	O	O	O	O
EnumSystemLocalesA	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

Let's	O	O	O	O	O	O
now	O	O	O	O	O	O
continue	O	O	O	O	O	O
our	O	O	O	O	O	O
debugging	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
“	O	O	O	O	O	O
0x401180	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

Not	O	O	O	O	O	O
far	O	O	O	O	O	O
from	O	O	O	O	O	O
here	O	O	O	O	O	O
,	O	O	O	O	O	O
yet	O	O	O	O	O	O
another	O	O	O	O	O	O
anti	O	O	O	O	O	O
-	O	O	O	O	O	O
debugging	O	O	O	O	O	O
technique	O	O	O	O	O	O
is	O	O	O	O	O	O
uncovered	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
time	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
‘	O	O	O	O	O	O
Diskname	O	O	O	O	O	O
’	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
registry	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
7	O	O	O	O	O	O
:	O	O	O	O	O	O
 	O	O	O	O	O	O
Diskname	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

"	O	O	O	O	O	O
RegOpenKeyExA	O	O	O	O	O	O
"	O	O	O	O	O	O
(	O	O	O	O	O	O
HKEY	O	O	O	O	O	O
\	O	O	O	O	O	O
_	O	O	O	O	O	O
LOCAL	O	O	O	O	O	O
\	O	O	O	O	O	O
_	O	O	O	O	O	O
MACHINE	O	O	O	O	O	O
\	O	O	O	O	O	O
SYSTEM	O	O	O	O	O	O
\	O	O	O	O	O	O
CurrentControlSet	O	O	O	O	O	O
\	O	O	O	O	O	O
services	O	O	O	O	O	O
\	O	O	O	O	O	O
Disk	O	O	O	O	O	O
\	O	O	O	O	O	O
Enum	O	O	O	O	O	O
)	O	O	O	O	O	O
 	O	O	O	O	O	O
and	O	O	O	O	O	O
 	O	O	O	O	O	O
"	O	O	O	O	O	O
RegQueryValueExA	O	O	O	O	O	O
"	O	O	O	O	O	O
then	O	O	O	O	O	O
uses	O	O	O	O	O	O
“	O	O	O	O	O	O
strstr	O	O	O	O	O	O
”	O	O	O	O	O	O
and	O	O	O	O	O	O
searches	O	O	O	O	O	O
for	O	O	O	O	O	O
signs	O	O	O	O	O	O
of	O	O	O	O	O	O
a	O	O	O	O	O	O
virtual	O	O	O	O	O	O
environment	O	O	O	O	O	O
such	O	O	O	O	O	O
as	O	O	O	O	O	O
“	O	O	O	O	O	O
Xen	O	O	O	O	O	O
”	O	O	O	O	O	O
,	O	O	O	O	O	O
“	O	O	O	O	O	O
Vmware	O	O	O	O	O	O
”	O	O	O	O	O	O
,	O	O	O	O	O	O
“	O	O	O	O	O	O
Qemu	O	O	O	O	O	O
”	O	O	O	O	O	O
and	O	O	O	O	O	O
also	O	O	O	O	O	O
looks	O	O	O	O	O	O
for	O	O	O	O	O	O
string	O	O	O	O	O	O
“	O	O	O	O	O	O
virtual	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
8	O	O	O	O	O	O
:	O	O	O	O	O	O
Search	O	O	O	O	O	O
vm	O	O	O	O	O	O
strings	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

Once	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
detects	O	O	O	O	O	O
a	O	O	O	O	O	O
virtual	O	O	O	O	O	O
environment	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
changes	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
flow	O	O	O	O	O	O
and	O	O	O	O	O	O
land	O	O	O	O	O	O
us	O	O	O	O	O	O
in	O	O	O	O	O	O
an	O	O	O	O	O	O
invalid	O	O	O	O	O	O
memory	O	O	O	O	O	O
region	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
we	O	O	O	O	O	O
play	O	O	O	O	O	O
along	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
observe	O	O	O	O	O	O
something	O	O	O	O	O	O
interesting	O	O	O	O	O	O
here	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
9	O	O	O	O	O	O
:	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
crash	O	O	O	O	O	O
|	O	O	O	O	O	O

There	O	O	O	O	O	O
we	O	O	O	O	O	O
go	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
can	O	O	O	O	O	O
finally	O	O	O	O	O	O
reproduce	O	O	O	O	O	O
the	O	O	O	O	O	O
crash	O	O	O	O	O	O
that	O	O	O	O	O	O
happened	O	O	O	O	O	O
during	O	O	O	O	O	O
the	O	O	O	O	O	O
first	O	O	O	O	O	O
stage	O	O	O	O	O	O
of	O	O	O	O	O	O
our	O	O	O	O	O	O
analysis	O	O	O	O	O	O
.	O	O	O	O	O	O

Ok	O	O	O	O	O	O
,	O	O	O	O	O	O
so	O	O	O	O	O	O
a	O	O	O	O	O	O
through	O	O	O	O	O	O
binary	O	O	O	O	O	O
analysis	O	O	O	O	O	O
is	O	O	O	O	O	O
often	O	O	O	O	O	O
not	O	O	O	O	O	O
so	O	O	O	O	O	O
straight	O	O	O	O	O	O
forward	O	O	O	O	O	O
after	O	O	O	O	O	O
all	O	O	O	O	O	O
!	O	O	O	O	O	O
!	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
10	O	O	O	O	O	O
:	O	O	O	O	O	O
sandbox	O	O	O	O	O	O
identification	O	O	O	O	O	O
(	O	O	O	O	O	O
anti-debug	O	O	O	O	O	O
)	O	O	O	O	O	O
|	O	O	O	O	O	O

Let	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
move	O	O	O	O	O	O
on	O	O	O	O	O	O
and	O	O	O	O	O	O
see	O	O	O	O	O	O
what	O	O	O	O	O	O
surprises	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
has	O	O	O	O	O	O
this	O	O	O	O	O	O
time	O	O	O	O	O	O
.	O	O	O	O	O	O

Below	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
see	O	O	O	O	O	O
anotherpiece	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
that	O	O	O	O	O	O
checks	O	O	O	O	O	O
for	O	O	O	O	O	O
a	O	O	O	O	O	O
DLL	O	O	O	O	O	O
name	O	O	O	O	O	O
called	O	O	O	O	O	O
“	O	O	O	O	O	O
sbiedll	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
checks	O	O	O	O	O	O
whether	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
run	O	O	O	O	O	O
in	O	O	O	O	O	O
a	O	O	O	O	O	O
popular	O	O	O	O	O	O
sandbox	O	O	O	O	O	O
called	O	O	O	O	O	O
“	O	O	O	O	O	O
sandboxie	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
found	O	O	O	O	O	O
,	O	O	O	O	O	O
as	O	O	O	O	O	O
usual	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
bails	O	O	O	O	O	O
out	O	O	O	O	O	O
.	O	O	O	O	O	O

Immediately	O	O	O	O	O	O
afterward	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
performs	O	O	O	O	O	O
a	O	O	O	O	O	O
decryption	O	O	O	O	O	O
routine	O	O	O	O	O	O
to	O	O	O	O	O	O
reveal	O	O	O	O	O	O
compressed	O	O	O	O	O	O
data	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
again	O	O	O	O	O	O
packed	O	O	O	O	O	O
with	O	O	O	O	O	O
[	O	O	O	O	O	O
aplib	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
http	O	O	O	O	O	O
:	O	O	O	O	O	O
/	O	O	O	O	O	O
/	O	O	O	O	O	O
ibsensoftware.com	O	O	O	O	O	O
/	O	O	O	O	O	O
products_aPLib.html	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
below	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
observe	O	O	O	O	O	O
the	O	O	O	O	O	O
[	O	O	O	O	O	O
aplib	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
http	O	O	O	O	O	O
:	O	O	O	O	O	O
/	O	O	O	O	O	O
/	O	O	O	O	O	O
ibsensoftware.com	O	O	O	O	O	O
/	O	O	O	O	O	O
products_aPLib.html	O	O	O	O	O	O
)	O	O	O	O	O	O
unpacking	O	O	O	O	O	O
routine	O	O	O	O	O	O
which	O	O	O	O	O	O
decompresses	O	O	O	O	O	O
the	O	O	O	O	O	O
data	O	O	O	O	O	O
to	O	O	O	O	O	O
a	O	O	O	O	O	O
PE	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
11	O	O	O	O	O	O
:	O	O	O	O	O	O
Aplib	O	O	O	O	O	O
decompression	O	O	O	O	O	O
routine	O	O	O	O	O	O
|	O	O	O	O	O	O

Soon	O	O	O	O	O	O
after	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
passed	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
newly	O	O	O	O	O	O
decompressed	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

Below	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
see	O	O	O	O	O	O
the	O	O	O	O	O	O
new	O	O	O	O	O	O
file	O	O	O	O	O	O
being	O	O	O	O	O	O
executed	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
12	O	O	O	O	O	O
:	O	O	O	O	O	O
New	O	O	O	O	O	O
PE-file	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
|	O	O	O	O	O	O

Debugging	O	O	O	O	O	O
further	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
observe	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
revealing	O	O	O	O	O	O
the	O	O	O	O	O	O
final	O	O	O	O	O	O
trick	O	O	O	O	O	O
that	O	O	O	O	O	O
it	O	O	O	O	O	O
has	O	O	O	O	O	O
up	O	O	O	O	O	O
it	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
sleeve	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
I	O	O	O	O	O	O
will	O	O	O	O	O	O
explain	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
next	O	O	O	O	O	O
post	O	O	O	O	O	O
in	O	O	O	O	O	O
this	O	O	O	O	O	O
series	O	O	O	O	O	O
.	O	O	O	O	O	O

