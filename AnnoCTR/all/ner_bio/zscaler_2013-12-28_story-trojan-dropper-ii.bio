<DOCSTART>	O	O	O	O	O	O

The	O	O	O	O	O	O
Story	O	O	O	O	O	O
Of	O	O	O	O	O	O
A	O	O	O	O	O	O
Trojan	O	O	O	O	O	O
Dropper	O	O	O	O	O	O
II	O	O	O	O	O	O

December	O	O	B-DATE	O	O	B-DATE
28	O	O	I-DATE	O	O	I-DATE
,	O	O	I-DATE	O	O	I-DATE
2013	O	O	I-DATE	O	O	I-DATE

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Analysis	O	O	O	O	O	O
:	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

Lets	O	O	O	O	O	O
analyze	O	O	O	O	O	O
the	O	O	O	O	O	O
PE	O	O	O	O	O	O
file	O	O	O	O	O	O
in	O	O	O	O	O	O
detail	O	O	O	O	O	O
and	O	O	O	O	O	O
see	O	O	O	O	O	O
what	O	O	O	O	O	O
it	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
up	O	O	O	O	O	O
to	O	O	O	O	O	O
.	O	O	O	O	O	O

Like	O	O	O	O	O	O
most	O	O	O	O	O	O
malware	O	O	O	O	O	O
,	O	O	O	O	O	O
this	O	O	O	O	O	O
sample	O	O	O	O	O	O
was	O	O	O	O	O	O
packed	O	O	O	O	O	O
and	O	O	O	O	O	O
in	O	O	O	O	O	O
order	O	O	O	O	O	O
to	O	O	O	O	O	O
properly	O	O	O	O	O	O
analyze	O	O	O	O	O	O
it	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
must	O	O	O	O	O	O
begin	O	O	O	O	O	O
by	O	O	O	O	O	O
unpacking	O	O	O	O	O	O
the	O	O	O	O	O	O
binary	O	O	O	O	O	O
.	O	O	O	O	O	O

Keeping	O	O	O	O	O	O
this	O	O	O	O	O	O
in	O	O	O	O	O	O
mind	O	O	O	O	O	O
,	O	O	O	O	O	O
I	O	O	O	O	O	O
began	O	O	O	O	O	O
by	O	O	O	O	O	O
debugging	O	O	O	O	O	O
the	O	O	O	O	O	O
file	O	O	O	O	O	O
,	O	O	O	O	O	O
hoping	O	O	O	O	O	O
to	O	O	O	O	O	O
find	O	O	O	O	O	O
the	O	O	O	O	O	O
reference	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
data	O	O	O	O	O	O
section	O	O	O	O	O	O
in	O	O	O	O	O	O
order	O	O	O	O	O	O
to	O	O	O	O	O	O
determine	O	O	O	O	O	O
precisely	O	O	O	O	O	O
where	O	O	O	O	O	O
the	O	O	O	O	O	O
encrypted	O	O	O	O	O	O
portion	O	O	O	O	O	O
of	O	O	O	O	O	O
data	O	O	O	O	O	O
was	O	O	O	O	O	O
to	O	O	O	O	O	O
be	O	O	O	O	O	O
found	O	O	O	O	O	O
.	O	O	O	O	O	O

Fortunately	O	O	O	O	O	O
,	O	O	O	O	O	O
I	O	O	O	O	O	O
was	O	O	O	O	O	O
not	O	O	O	O	O	O
disappointed	O	O	O	O	O	O
and	O	O	O	O	O	O
was	O	O	O	O	O	O
soon	O	O	O	O	O	O
able	O	O	O	O	O	O
to	O	O	O	O	O	O
find	O	O	O	O	O	O
the	O	O	O	O	O	O
reference	O	O	O	O	O	O
point	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
1	O	O	O	O	O	O
:	O	O	O	O	O	O
Obfuscated	O	O	O	O	O	O
data	O	O	O	O	O	O
 	O	O	O	O	O	O
|	O	O	O	O	O	O

After	O	O	O	O	O	O
further	O	O	O	O	O	O
debugging	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
are	O	O	O	O	O	O
able	O	O	O	O	O	O
to	O	O	O	O	O	O
see	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
decryption	O	O	O	O	O	O
occurs	O	O	O	O	O	O
in	O	O	O	O	O	O
multiple	O	O	O	O	O	O
iterations	O	O	O	O	O	O
,	O	O	O	O	O	O
until	O	O	O	O	O	O
the	O	O	O	O	O	O
data	O	O	O	O	O	O
is	O	O	O	O	O	O
completely	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
2	O	O	O	O	O	O
:	O	O	O	O	O	O
Decryption	O	O	O	O	O	O
of	O	O	O	O	O	O
obfuscated	O	O	O	O	O	O
data	O	O	O	O	O	O
|	O	O	O	O	O	O

Now	O	O	O	O	O	O
we	O	O	O	O	O	O
have	O	O	O	O	O	O
a	O	O	O	O	O	O
full	O	O	O	O	O	O
view	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
code	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
portion	O	O	O	O	O	O
that	O	O	O	O	O	O
was	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
contains	O	O	O	O	O	O
position	O	O	O	O	O	O
independent	O	O	O	O	O	O
code	O	O	O	O	O	O
(	O	O	O	O	O	O
i.e	O	O	O	O	O	O
shellcode	O	O	O	O	O	O
)	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
3	O	O	O	O	O	O
:	O	O	O	O	O	O
Decrypted	O	O	O	O	O	O
data	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
|	O	O	O	O	O	O

Since	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
is	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
assume	O	O	O	O	O	O
that	O	O	O	O	O	O
at	O	O	O	O	O	O
some	O	O	O	O	O	O
point	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
will	O	O	O	O	O	O
be	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
that	O	O	O	O	O	O
region	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
in	O	O	O	O	O	O
this	O	O	O	O	O	O
case	O	O	O	O	O	O
happens	O	O	O	O	O	O
immediately	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
also	O	O	O	O	O	O
can	O	O	O	O	O	O
see	O	O	O	O	O	O
that	O	O	O	O	O	O
the	O	O	O	O	O	O
VirtualProtectEx	O	O	O	O	O	O
API	O	O	O	O	O	O
is	O	O	O	O	O	O
used	O	O	O	O	O	O
to	O	O	O	O	O	O
change	O	O	O	O	O	O
the	O	O	O	O	O	O
protection	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
memory	O	O	O	O	O	O
region	O	O	O	O	O	O
and	O	O	O	O	O	O
by	O	O	O	O	O	O
doing	O	O	O	O	O	O
so	O	O	O	O	O	O
 	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
will	O	O	O	O	O	O
be	O	O	O	O	O	O
able	O	O	O	O	O	O
to	O	O	O	O	O	O
execute	O	O	O	O	O	O
and	O	O	O	O	O	O
manipulate	O	O	O	O	O	O
the	O	O	O	O	O	O
memory	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
4	O	O	O	O	O	O
:	O	O	O	O	O	O
Change	O	O	O	O	O	O
memory	O	O	O	O	O	O
protection	O	O	O	O	O	O
|	O	O	O	O	O	O

After	O	O	O	O	O	O
this	O	O	O	O	O	O
occurs	O	O	O	O	O	O
,	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
region	O	O	O	O	O	O
by	O	O	O	O	O	O
an	O	O	O	O	O	O
instruction	O	O	O	O	O	O
of	O	O	O	O	O	O
JMP	O	O	O	O	O	O
EDI	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
,	O	O	O	O	O	O
EDI	O	O	O	O	O	O
will	O	O	O	O	O	O
hold	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
to	O	O	O	O	O	O
which	O	O	O	O	O	O
EIP	O	O	O	O	O	O
(	O	O	O	O	O	O
instruction	O	O	O	O	O	O
pointer	O	O	O	O	O	O
)	O	O	O	O	O	O
lands	O	O	O	O	O	O
and	O	O	O	O	O	O
we	O	O	O	O	O	O
can	O	O	O	O	O	O
see	O	O	O	O	O	O
that	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
the	O	O	O	O	O	O
same	O	O	O	O	O	O
portion	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
 	O	O	O	O	O	O
code	O	O	O	O	O	O
that	O	O	O	O	O	O
was	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
earlier	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
5	O	O	O	O	O	O
:	O	O	O	O	O	O
Control	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
new	O	O	O	O	O	O
code	O	O	O	O	O	O
|	O	O	O	O	O	O

There's	O	O	O	O	O	O
an	O	O	O	O	O	O
interesting	O	O	O	O	O	O
bit	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
here	O	O	O	O	O	O
if	O	O	O	O	O	O
we	O	O	O	O	O	O
look	O	O	O	O	O	O
at	O	O	O	O	O	O
first	O	O	O	O	O	O
couple	O	O	O	O	O	O
of	O	O	O	O	O	O
instructions	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
landed	O	O	O	O	O	O
region	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
can	O	O	O	O	O	O
see	O	O	O	O	O	O
a	O	O	O	O	O	O
NOP	O	O	O	O	O	O
instruction	O	O	O	O	O	O
,	O	O	O	O	O	O
followed	O	O	O	O	O	O
by	O	O	O	O	O	O
SUB	O	O	O	O	O	O
EAX	O	O	O	O	O	O
,	O	O	O	O	O	O
EAX	O	O	O	O	O	O
and	O	O	O	O	O	O
a	O	O	O	O	O	O
CALL	O	O	O	O	O	O
and	O	O	O	O	O	O
POP	O	O	O	O	O	O
EBX	O	O	O	O	O	O
.	O	O	O	O	O	O

If	O	O	O	O	O	O
we	O	O	O	O	O	O
carefully	O	O	O	O	O	O
observe	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
that	O	O	O	O	O	O
is	O	O	O	O	O	O
called	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
that	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
POP	O	O	O	O	O	O
EBX	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
is	O	O	O	O	O	O
a	O	O	O	O	O	O
common	O	O	O	O	O	O
technique	O	O	O	O	O	O
found	O	O	O	O	O	O
in	O	O	O	O	O	O
shellcode	O	O	O	O	O	O
and	O	O	O	O	O	O
file	O	O	O	O	O	O
infectors	O	O	O	O	O	O
where	O	O	O	O	O	O
one	O	O	O	O	O	O
needs	O	O	O	O	O	O
to	O	O	O	O	O	O
get	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
region	O	O	O	O	O	O
that	O	O	O	O	O	O
is	O	O	O	O	O	O
currently	O	O	O	O	O	O
being	O	O	O	O	O	O
executed	O	O	O	O	O	O
.	O	O	O	O	O	O

When	O	O	O	O	O	O
this	O	O	O	O	O	O
CALL	O	O	O	O	O	O
is	O	O	O	O	O	O
executed	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
pushes	O	O	O	O	O	O
the	O	O	O	O	O	O
return	O	O	O	O	O	O
address	O	O	O	O	O	O
onto	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
(	O	O	O	O	O	O
in	O	O	O	O	O	O
this	O	O	O	O	O	O
case	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
POP	O	O	O	O	O	O
EBX	O	O	O	O	O	O
)	O	O	O	O	O	O
.	O	O	O	O	O	O

Now	O	O	O	O	O	O
POP	O	O	O	O	O	O
EBX	O	O	O	O	O	O
is	O	O	O	O	O	O
executed	O	O	O	O	O	O
,	O	O	O	O	O	O
as	O	O	O	O	O	O
that	O	O	O	O	O	O
instruction	O	O	O	O	O	O
pops	O	O	O	O	O	O
the	O	O	O	O	O	O
value	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
top	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
stack	O	O	O	O	O	O
to	O	O	O	O	O	O
EBX	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
address	O	O	O	O	O	O
is	O	O	O	O	O	O
then	O	O	O	O	O	O
added	O	O	O	O	O	O
to	O	O	O	O	O	O
a	O	O	O	O	O	O
constant	O	O	O	O	O	O
of	O	O	O	O	O	O
0x33	O	O	O	O	O	O
,	O	O	O	O	O	O
to	O	O	O	O	O	O
point	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
region	O	O	O	O	O	O
that	O	O	O	O	O	O
is	O	O	O	O	O	O
then	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
by	O	O	O	O	O	O
the	O	O	O	O	O	O
decryption	O	O	O	O	O	O
loop	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
reveals	O	O	O	O	O	O
more	O	O	O	O	O	O
code	O	O	O	O	O	O
,	O	O	O	O	O	O
after	O	O	O	O	O	O
which	O	O	O	O	O	O
a	O	O	O	O	O	O
JMP	O	O	O	O	O	O
instruction	O	O	O	O	O	O
transfers	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
newly	O	O	O	O	O	O
revealed	O	O	O	O	O	O
code	O	O	O	O	O	O
.	O	O	O	O	O	O

Further	O	O	O	O	O	O
,	O	O	O	O	O	O
I	O	O	O	O	O	O
was	O	O	O	O	O	O
able	O	O	O	O	O	O
to	O	O	O	O	O	O
identify	O	O	O	O	O	O
another	O	O	O	O	O	O
interesting	O	O	O	O	O	O
piece	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
here	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
code	O	O	O	O	O	O
below	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
PEB	O	O	O	O	O	O
(	O	O	O	O	O	O
process	O	O	O	O	O	O
environment	O	O	O	O	O	O
block	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
navigates	O	O	O	O	O	O
to	O	O	O	O	O	O
PEB	O	O	O	O	O	O
\	O	O	O	O	O	O
_	O	O	O	O	O	O
LDR	O	O	O	O	O	O
\	O	O	O	O	O	O
_	O	O	O	O	O	O
DATA	O	O	O	O	O	O
-	O	O	O	O	O	O
>	O	O	O	O	O	O
InLoadOrderModuleList	O	O	O	O	O	O
,	O	O	O	O	O	O
where	O	O	O	O	O	O
it	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
names	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
loaded	O	O	O	O	O	O
modules	O	O	O	O	O	O
(	O	O	O	O	O	O
DLL	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
)	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
6	O	O	O	O	O	O
:	O	O	O	O	O	O
Fetch	O	O	O	O	O	O
base	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
|	O	O	O	O	O	O

There's	O	O	O	O	O	O
another	O	O	O	O	O	O
catch	O	O	O	O	O	O
here	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
malware	O	O	O	O	O	O
looks	O	O	O	O	O	O
for	O	O	O	O	O	O
specific	O	O	O	O	O	O
DLL	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
(	O	O	O	O	O	O
in	O	O	O	O	O	O
this	O	O	O	O	O	O
case	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
)	O	O	O	O	O	O
,	O	O	O	O	O	O
but	O	O	O	O	O	O
instead	O	O	O	O	O	O
of	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
string	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
to	O	O	O	O	O	O
compare	O	O	O	O	O	O
with	O	O	O	O	O	O
retrieved	O	O	O	O	O	O
module	O	O	O	O	O	O
names	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
PEB	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
carries	O	O	O	O	O	O
the	O	O	O	O	O	O
hash	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
DLL	O	O	O	O	O	O
names	O	O	O	O	O	O
and	O	O	O	O	O	O
then	O	O	O	O	O	O
calculates	O	O	O	O	O	O
the	O	O	O	O	O	O
hash	O	O	O	O	O	O
value	O	O	O	O	O	O
for	O	O	O	O	O	O
the	O	O	O	O	O	O
retrieved	O	O	O	O	O	O
module	O	O	O	O	O	O
names	O	O	O	O	O	O
and	O	O	O	O	O	O
compares	O	O	O	O	O	O
them	O	O	O	O	O	O
.	O	O	O	O	O	O

This	O	O	O	O	O	O
allows	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
to	O	O	O	O	O	O
make	O	O	O	O	O	O
minimum	O	O	O	O	O	O
noise	O	O	O	O	O	O
and	O	O	O	O	O	O
avoid	O	O	O	O	O	O
some	O	O	O	O	O	O
antivirus	O	O	O	O	O	O
rules	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
7	O	O	O	O	O	O
:	O	O	O	O	O	O
Dll	O	O	O	O	O	O
name	O	O	O	O	O	O
hash	O	O	O	O	O	O
 	O	O	O	O	O	O
|	O	O	O	O	O	O

Once	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
gets	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
,	O	O	O	O	O	O
it	O	O	O	O	O	O
then	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
base	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
in	O	O	O	O	O	O
this	O	O	O	O	O	O
case	O	O	O	O	O	O
is	O	O	O	O	O	O
0x7c800000	O	O	O	O	O	O
.	O	O	O	O	O	O

Now	O	O	O	O	O	O
,	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
PE	O	O	O	O	O	O
file	O	O	O	O	O	O
format	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
moves	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
export	O	O	O	O	O	O
table	O	O	O	O	O	O
of	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
,	O	O	O	O	O	O
as	O	O	O	O	O	O
illustrated	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
code	O	O	O	O	O	O
below	O	O	O	O	O	O
,	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
8	O	O	O	O	O	O
:	O	O	O	O	O	O
 	O	O	O	O	O	O
Finding	O	O	O	O	O	O
exportaddresstable	O	O	O	O	O	O
of	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
|	O	O	O	O	O	O

Looking	O	O	O	O	O	O
at	O	O	O	O	O	O
code	O	O	O	O	O	O
above	O	O	O	O	O	O
the	O	O	O	O	O	O
instruction	O	O	O	O	O	O
MOV	O	O	O	O	O	O
EBX	O	O	O	O	O	O
,	O	O	O	O	O	O
DWORD	O	O	O	O	O	O
PTR	O	O	O	O	O	O
DS	O	O	O	O	O	O
:	O	O	O	O	O	O
[	O	O	O	O	O	O
EAX	O	O	O	O	O	O
+	O	O	O	O	O	O
78	O	O	O	O	O	O
]	O	O	O	O	O	O
,	O	O	O	O	O	O
lands	O	O	O	O	O	O
us	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
datadirectory	O	O	O	O	O	O
-	O	O	O	O	O	O
-	O	O	O	O	O	O
>	O	O	O	O	O	O
exportaddresstable	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
kernel32	O	O	O	O	O	O
.	O	O	O	O	O	O
dll	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
malware	O	O	O	O	O	O
then	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
value	O	O	O	O	O	O
and	O	O	O	O	O	O
adds	O	O	O	O	O	O
it	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
imagebase	O	O	O	O	O	O
(	O	O	O	O	O	O
ie	O	O	O	O	O	O
0x7c800000	O	O	O	O	O	O
)	O	O	O	O	O	O
in	O	O	O	O	O	O
order	O	O	O	O	O	O
to	O	O	O	O	O	O
reach	O	O	O	O	O	O
the	O	O	O	O	O	O
export	O	O	O	O	O	O
table	O	O	O	O	O	O
,	O	O	O	O	O	O
where	O	O	O	O	O	O
it	O	O	O	O	O	O
retrieves	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
exported	O	O	O	O	O	O
function	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
too	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
never	O	O	O	O	O	O
uses	O	O	O	O	O	O
the	O	O	O	O	O	O
names	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
function	O	O	O	O	O	O
,	O	O	O	O	O	O
but	O	O	O	O	O	O
instead	O	O	O	O	O	O
it	O	O	O	O	O	O
uses	O	O	O	O	O	O
a	O	O	O	O	O	O
stored	O	O	O	O	O	O
hash	O	O	O	O	O	O
.	O	O	O	O	O	O

After	O	O	O	O	O	O
further	O	O	O	O	O	O
analysis	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
stumble	O	O	O	O	O	O
onto	O	O	O	O	O	O
another	O	O	O	O	O	O
piece	O	O	O	O	O	O
of	O	O	O	O	O	O
code	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
copies	O	O	O	O	O	O
data	O	O	O	O	O	O
again	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
data	O	O	O	O	O	O
section	O	O	O	O	O	O
to	O	O	O	O	O	O
a	O	O	O	O	O	O
newly	O	O	O	O	O	O
allocated	O	O	O	O	O	O
memory	O	O	O	O	O	O
region	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
9	O	O	O	O	O	O
:	O	O	O	O	O	O
Copy	O	O	O	O	O	O
more	O	O	O	O	O	O
data	O	O	O	O	O	O
 	O	O	O	O	O	O
|	O	O	O	O	O	O

Investigating	O	O	O	O	O	O
further	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
see	O	O	O	O	O	O
that	O	O	O	O	O	O
this	O	O	O	O	O	O
data	O	O	O	O	O	O
is	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
to	O	O	O	O	O	O
reveal	O	O	O	O	O	O
what	O	O	O	O	O	O
looks	O	O	O	O	O	O
like	O	O	O	O	O	O
some	O	O	O	O	O	O
sort	O	O	O	O	O	O
of	O	O	O	O	O	O
an	O	O	O	O	O	O
address	O	O	O	O	O	O
table	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
10	O	O	O	O	O	O
:	O	O	O	O	O	O
Address	O	O	O	O	O	O
table	O	O	O	O	O	O
 	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
table	O	O	O	O	O	O
has	O	O	O	O	O	O
significance	O	O	O	O	O	O
as	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
used	O	O	O	O	O	O
as	O	O	O	O	O	O
an	O	O	O	O	O	O
address	O	O	O	O	O	O
calculator	O	O	O	O	O	O
,	O	O	O	O	O	O
To	O	O	O	O	O	O
calculate	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
ofthe	O	O	O	O	O	O
region	O	O	O	O	O	O
from	O	O	O	O	O	O
where	O	O	O	O	O	O
it	O	O	O	O	O	O
copies	O	O	O	O	O	O
bulk	O	O	O	O	O	O
data	O	O	O	O	O	O
,	O	O	O	O	O	O
Which	O	O	O	O	O	O
is	O	O	O	O	O	O
further	O	O	O	O	O	O
decrypted	O	O	O	O	O	O
to	O	O	O	O	O	O
form	O	O	O	O	O	O
what	O	O	O	O	O	O
looks	O	O	O	O	O	O
likea	O	O	O	O	O	O
compressed	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
11	O	O	O	O	O	O
:	O	O	O	O	O	O
Compressed	O	O	O	O	O	O
data	O	O	O	O	O	O
|	O	O	O	O	O	O

And	O	O	O	O	O	O
there	O	O	O	O	O	O
it	O	O	O	O	O	O
is	O	O	O	O	O	O
.	O	O	O	O	O	O

Moving	O	O	O	O	O	O
ahead	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
land	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
decompression	O	O	O	O	O	O
routine	O	O	O	O	O	O
,	O	O	O	O	O	O
which	O	O	O	O	O	O
quickly	O	O	O	O	O	O
reveals	O	O	O	O	O	O
thatthe	O	O	O	O	O	O
data	O	O	O	O	O	O
is	O	O	O	O	O	O
compressed	O	O	O	O	O	O
using	O	O	O	O	O	O
“	O	O	O	O	O	O
[	O	O	O	O	O	O
aplib	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
http	O	O	O	O	O	O
:	O	O	O	O	O	O
/	O	O	O	O	O	O
/	O	O	O	O	O	O
ibsensoftware.com	O	O	O	O	O	O
/	O	O	O	O	O	O
products_aPLib.html	O	O	O	O	O	O
)	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
12	O	O	O	O	O	O
:	O	O	O	O	O	O
Aplib	O	O	O	O	O	O
decompression	O	O	O	O	O	O
routine	O	O	O	O	O	O
|	O	O	O	O	O	O

Once	O	O	O	O	O	O
the	O	O	O	O	O	O
decompression	O	O	O	O	O	O
is	O	O	O	O	O	O
completed	O	O	O	O	O	O
it	O	O	O	O	O	O
does	O	O	O	O	O	O
some	O	O	O	O	O	O
familiar	O	O	O	O	O	O
actions	O	O	O	O	O	O
by	O	O	O	O	O	O
flushing	O	O	O	O	O	O
out	O	O	O	O	O	O
the	O	O	O	O	O	O
bytes	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
original	O	O	O	O	O	O
EXE	O	O	O	O	O	O
file	O	O	O	O	O	O
starting	O	O	O	O	O	O
from	O	O	O	O	O	O
the	O	O	O	O	O	O
imagebase	O	O	O	O	O	O
0x400000	O	O	O	O	O	O
and	O	O	O	O	O	O
copy	O	O	O	O	O	O
the	O	O	O	O	O	O
decompressed	O	O	O	O	O	O
data	O	O	O	O	O	O
to	O	O	O	O	O	O
its	O	O	O	O	O	O
new	O	O	O	O	O	O
imagebase	O	O	O	O	O	O
(	O	O	O	O	O	O
i.e	O	O	O	O	O	O
0x400000	O	O	O	O	O	O
)	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
13	O	O	O	O	O	O
:	O	O	O	O	O	O
Copy	O	O	O	O	O	O
decompressed	O	O	O	O	O	O
PE	O	O	O	O	O	O
-	O	O	O	O	O	O
file	O	O	O	O	O	O
 	O	O	O	O	O	O
|	O	O	O	O	O	O

Finally	O	O	O	O	O	O
using	O	O	O	O	O	O
“	O	O	O	O	O	O
LoadlibraryEx	O	O	O	O	O	O
”	O	O	O	O	O	O
and	O	O	O	O	O	O
Getprocaddress	O	O	O	O	O	O
the	O	O	O	O	O	O
IAT	O	O	O	O	O	O
is	O	O	O	O	O	O
rebuild	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
memory	O	O	O	O	O	O
after	O	O	O	O	O	O
which	O	O	O	O	O	O
the	O	O	O	O	O	O
control	O	O	O	O	O	O
is	O	O	O	O	O	O
transferred	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
new	O	O	O	O	O	O
code	O	O	O	O	O	O
at	O	O	O	O	O	O
the	O	O	O	O	O	O
address	O	O	O	O	O	O
0x401021	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure14	O	O	O	O	O	O
:	O	O	O	O	O	O
Rebuild	O	O	O	O	O	O
IAT	O	O	O	O	O	O
in	O	O	O	O	O	O
memory	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
job	O	O	O	O	O	O
of	O	O	O	O	O	O
this	O	O	O	O	O	O
code	O	O	O	O	O	O
is	O	O	O	O	O	O
limited	O	O	O	O	O	O
.	O	O	O	O	O	O

It	O	O	O	O	O	O
writes	O	O	O	O	O	O
a	O	O	O	O	O	O
PE-file	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
embedded	O	O	O	O	O	O
within	O	O	O	O	O	O
itself	O	O	O	O	O	O
into	O	O	O	O	O	O
the	O	O	O	O	O	O
temporary	O	O	O	O	O	O
folder	O	O	O	O	O	O
as	O	O	O	O	O	O
“	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
”	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
api	O	O	O	O	O	O
“	O	O	O	O	O	O
GetTempPathA	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
15	O	O	O	O	O	O
:	O	O	O	O	O	O
Transfer	O	O	O	O	O	O
control	O	O	O	O	O	O
to	O	O	O	O	O	O
OEP	O	O	O	O	O	O
|	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
end	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
file	O	O	O	O	O	O
(	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
)	O	O	O	O	O	O
is	O	O	O	O	O	O
dropped	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
temp	O	O	O	O	O	O
folder	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
using	O	O	O	O	O	O
the	O	O	O	O	O	O
API	O	O	O	O	O	O
“	O	O	O	O	O	O
ShellExecuteA	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Figure	O	O	O	O	O	O
16	O	O	O	O	O	O
:	O	O	O	O	O	O
Execute	O	O	O	O	O	O
dropped	O	O	O	O	O	O
"	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
"	O	O	O	O	O	O
|	O	O	O	O	O	O

A	O	O	O	O	O	O
dummy	O	O	O	O	O	O
PDF	O	O	O	O	O	O
file	O	O	O	O	O	O
is	O	O	O	O	O	O
also	O	O	O	O	O	O
written	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
current	O	O	O	O	O	O
directory	O	O	O	O	O	O
named	O	O	O	O	O	O
“	O	O	O	O	O	O
Bestellung.pdf	O	O	O	O	O	O
”	O	O	O	O	O	O
.	O	O	O	O	O	O

In	O	O	O	O	O	O
a	O	O	O	O	O	O
subsequent	O	O	O	O	O	O
blog	O	O	O	O	O	O
post	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
will	O	O	O	O	O	O
see	O	O	O	O	O	O
why	O	O	O	O	O	O
the	O	O	O	O	O	O
malware	O	O	O	O	O	O
dropped	O	O	O	O	O	O
this	O	O	O	O	O	O
PDF	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

That	O	O	O	O	O	O
’	O	O	O	O	O	O
s	O	O	O	O	O	O
all	O	O	O	O	O	O
for	O	O	O	O	O	O
now	O	O	O	O	O	O
.	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
next	O	O	O	O	O	O
post	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
’	O	O	O	O	O	O
ll	O	O	O	O	O	O
continue	O	O	O	O	O	O
the	O	O	O	O	O	O
analysis	O	O	O	O	O	O
of	O	O	O	O	O	O
the	O	O	O	O	O	O
dropped	O	O	O	O	O	O
file	O	O	O	O	O	O
“	O	O	O	O	O	O
Adobe.exe	O	O	O	O	O	O
”	O	O	O	O	O	O

 	O	O	O	O	O	O

