<DOCSTART>	O	O	O	O	O	O

#	O	O	O	O	O	O
BASHed	O	O	O	O	O	O
Evolution	O	O	O	O	O	O
Of	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
Attack	O	O	O	O	O	O
Payloads	O	O	O	O	O	O

October	O	O	B-DATE	O	O	B-DATE
07	O	O	I-DATE	O	O	I-DATE
,	O	O	I-DATE	O	O	I-DATE
2014	O	O	I-DATE	O	O	I-DATE

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Background	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

We	O	O	O	O	O	O
recently	O	O	O	O	O	O
[	O	O	O	O	O	O
blogged	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
/	O	O	O	O	O	O
blogs	O	O	O	O	O	O
/	O	O	O	O	O	O
research	O	O	O	O	O	O
/	O	O	O	O	O	O
shellshock-attacks-spotted-wild-updated-sept	O	O	O	O	O	O
-	O	O	O	O	O	O
26	O	O	O	O	O	O
)	O	O	O	O	O	O
about	O	O	O	O	O	O
the	O	O	O	O	O	O
GNU	O	O	O	O	O	O
Bash	O	O	O	O	O	O
arbitrary	O	O	O	O	O	O
code	O	O	O	O	O	O
execution	O	O	O	O	O	O
vulnerability	O	O	O	O	O	O
(	O	O	O	O	O	O
CVE	O	O	O	O	O	O
-	O	O	O	O	O	O
2014	O	O	O	O	O	O
-	O	O	O	O	O	O
6271	O	O	O	O	O	O
)	O	O	O	O	O	O
dubbed	O	O	O	O	O	O
as	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
and	O	O	O	O	O	O
covered	O	O	O	O	O	O
some	O	O	O	O	O	O
initial	O	O	O	O	O	O
attacks	O	O	O	O	O	O
that	O	O	O	O	O	O
we	O	O	O	O	O	O
captured	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
wild	O	O	O	O	O	O
during	O	O	O	O	O	O
the	O	O	O	O	O	O
first	O	O	O	O	O	O
week	O	O	O	O	O	O
of	O	O	O	O	O	O
this	O	O	O	O	O	O
vulnerability	O	O	O	O	O	O
disclosure	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
have	O	O	O	O	O	O
continued	O	O	O	O	O	O
to	O	O	O	O	O	O
monitor	O	O	O	O	O	O
the	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attacks	O	O	O	O	O	O
and	O	O	O	O	O	O
the	O	O	O	O	O	O
malicious	O	O	O	O	O	O
payloads	O	O	O	O	O	O
that	O	O	O	O	O	O
were	O	O	O	O	O	O
getting	O	O	O	O	O	O
dropped	O	O	O	O	O	O
over	O	O	O	O	O	O
past	O	O	O	O	O	O
two	O	O	O	O	O	O
weeks	O	O	O	O	O	O
.	O	O	O	O	O	O

In	O	O	O	O	O	O
this	O	O	O	O	O	O
blog	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
wanted	O	O	O	O	O	O
to	O	O	O	O	O	O
share	O	O	O	O	O	O
a	O	O	O	O	O	O
summary	O	O	O	O	O	O
of	O	O	O	O	O	O
new	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attacks	O	O	O	O	O	O
and	O	O	O	O	O	O
new	O	O	O	O	O	O
tricks	O	O	O	O	O	O
that	O	O	O	O	O	O
cybercriminals	O	O	O	O	O	O
have	O	O	O	O	O	O
deployed	O	O	O	O	O	O
to	O	O	O	O	O	O
increase	O	O	O	O	O	O
the	O	O	O	O	O	O
chances	O	O	O	O	O	O
of	O	O	O	O	O	O
infection	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
Attack	O	O	O	O	O	O
analysis	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

The	O	O	O	O	O	O
first	O	O	O	O	O	O
attack	O	O	O	O	O	O
,	O	O	O	O	O	O
as	O	O	O	O	O	O
reported	O	O	O	O	O	O
in	O	O	O	O	O	O
our	O	O	O	O	O	O
previous	O	O	O	O	O	O
blog	O	O	O	O	O	O
,	O	O	O	O	O	O
involved	O	O	O	O	O	O
download	O	O	O	O	O	O
and	O	O	O	O	O	O
installation	O	O	O	O	O	O
of	O	O	O	O	O	O
a	O	O	O	O	O	O
Linux	O	O	O	O	O	O
Backdoor	O	O	O	O	O	O
Trojan	O	O	O	O	O	O
with	O	O	O	O	O	O
DDoS	O	O	O	O	O	O
capability	O	O	O	O	O	O
detected	O	O	O	O	O	O
by	O	O	O	O	O	O
us	O	O	O	O	O	O
as	O	O	O	O	O	O
 	O	O	O	O	O	O
[	O	O	O	O	O	O
Unix	O	O	O	O	O	O
/	O	O	O	O	O	O
Flooder.AN	O	O	O	O	O	O
]	O	O	O	O	O	O
(	O	O	O	O	O	O
https	O	O	O	O	O	O
:	O	O	O	O	O	O
/	O	O	O	O	O	O
/	O	O	O	O	O	O
www.virustotal.com	O	O	O	O	O	O
/	O	O	O	O	O	O
#	O	O	O	O	O	O
/	O	O	O	O	O	O
file	O	O	O	O	O	O
/	O	O	O	O	O	O
2d3e0be24ef668b85ed48e81ebb50dce50612fb8dce96879f80306701bc41614	O	O	O	O	O	O
/	O	O	O	O	O	O
analysis	O	O	O	O	O	O
/	O	O	O	O	O	O
)	O	O	O	O	O	O
.	O	O	O	O	O	O

Here	O	O	O	O	O	O
the	O	O	O	O	O	O
attack	O	O	O	O	O	O
pattern	O	O	O	O	O	O
was	O	O	O	O	O	O
straight	O	O	O	O	O	O
forward	O	O	O	O	O	O
,	O	O	O	O	O	O
if	O	O	O	O	O	O
the	O	O	O	O	O	O
bash	O	O	O	O	O	O
exploit	O	O	O	O	O	O
was	O	O	O	O	O	O
successful	O	O	O	O	O	O
then	O	O	O	O	O	O
a	O	O	O	O	O	O
malware	O	O	O	O	O	O
payload	O	O	O	O	O	O
was	O	O	O	O	O	O
getting	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
and	O	O	O	O	O	O
installed	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bots	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

Next	O	O	O	O	O	O
we	O	O	O	O	O	O
saw	O	O	O	O	O	O
a	O	O	O	O	O	O
series	O	O	O	O	O	O
of	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attempts	O	O	O	O	O	O
where	O	O	O	O	O	O
a	O	O	O	O	O	O
Perl	O	O	O	O	O	O
based	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
was	O	O	O	O	O	O
getting	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
target	O	O	O	O	O	O
server	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
will	O	O	O	O	O	O
share	O	O	O	O	O	O
two	O	O	O	O	O	O
sample	O	O	O	O	O	O
cases	O	O	O	O	O	O
here	O	O	O	O	O	O
.	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
first	O	O	O	O	O	O
case	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
saw	O	O	O	O	O	O
a	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
Base64	O	O	O	O	O	O
encoded	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
 	O	O	O	O	O	O
Perl	O	O	O	O	O	O
based	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
getting	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
,	O	O	O	O	O	O
decoded	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
target	O	O	O	O	O	O
machine	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
downloading	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Base64	O	O	O	O	O	O
encoded	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
|	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
second	O	O	O	O	O	O
case	O	O	O	O	O	O
,	O	O	O	O	O	O
we	O	O	O	O	O	O
saw	O	O	O	O	O	O
another	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
getting	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
with	O	O	O	O	O	O
a	O	O	O	O	O	O
command-line	O	O	O	O	O	O
argument	O	O	O	O	O	O
which	O	O	O	O	O	O
is	O	O	O	O	O	O
the	O	O	O	O	O	O
IRC	O	O	O	O	O	O
server	O	O	O	O	O	O
IP	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
downloading	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Perl	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
attacker	O	O	O	O	O	O
performs	O	O	O	O	O	O
following	O	O	O	O	O	O
action	O	O	O	O	O	O
here	O	O	O	O	O	O
before	O	O	O	O	O	O
downloading	O	O	O	O	O	O
and	O	O	O	O	O	O
running	O	O	O	O	O	O
the	O	O	O	O	O	O
bot	O	O	O	O	O	O
:	O	O	O	O	O	O

*	O	O	O	O	O	O
Terminate	O	O	O	O	O	O
all	O	O	O	O	O	O
the	O	O	O	O	O	O
PHP	O	O	O	O	O	O
and	O	O	O	O	O	O
PERL	O	O	O	O	O	O
instances	O	O	O	O	O	O
running	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
server	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
Attempts	O	O	O	O	O	O
to	O	O	O	O	O	O
delete	O	O	O	O	O	O
all	O	O	O	O	O	O
the	O	O	O	O	O	O
content	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
/	O	O	O	O	O	O
tmp	O	O	O	O	O	O
/	O	O	O	O	O	O
and	O	O	O	O	O	O
/	O	O	O	O	O	O
var	O	O	O	O	O	O
/	O	O	O	O	O	O
tmp	O	O	O	O	O	O
/	O	O	O	O	O	O
directory	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
Avoids	O	O	O	O	O	O
hardcoding	O	O	O	O	O	O
the	O	O	O	O	O	O
Command	O	O	O	O	O	O
and	O	O	O	O	O	O
Control	O	O	O	O	O	O
server	O	O	O	O	O	O
IP	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
bot	O	O	O	O	O	O
file	O	O	O	O	O	O
that	O	O	O	O	O	O
gets	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
.	O	O	O	O	O	O

Things	O	O	O	O	O	O
became	O	O	O	O	O	O
more	O	O	O	O	O	O
interesting	O	O	O	O	O	O
after	O	O	O	O	O	O
this	O	O	O	O	O	O
when	O	O	O	O	O	O
we	O	O	O	O	O	O
started	O	O	O	O	O	O
seeing	O	O	O	O	O	O
attacks	O	O	O	O	O	O
involving	O	O	O	O	O	O
tricks	O	O	O	O	O	O
to	O	O	O	O	O	O
add	O	O	O	O	O	O
stealth	O	O	O	O	O	O
and	O	O	O	O	O	O
persistence	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
infection	O	O	O	O	O	O
.	O	O	O	O	O	O

We	O	O	O	O	O	O
also	O	O	O	O	O	O
saw	O	O	O	O	O	O
tricks	O	O	O	O	O	O
used	O	O	O	O	O	O
to	O	O	O	O	O	O
prevent	O	O	O	O	O	O
any	O	O	O	O	O	O
further	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attempts	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
server	O	O	O	O	O	O
by	O	O	O	O	O	O
attempting	O	O	O	O	O	O
to	O	O	O	O	O	O
apply	O	O	O	O	O	O
security	O	O	O	O	O	O
patches	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
server	O	O	O	O	O	O
once	O	O	O	O	O	O
the	O	O	O	O	O	O
exploit	O	O	O	O	O	O
infection	O	O	O	O	O	O
was	O	O	O	O	O	O
successful	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Linux.Tsunami	O	O	O	O	O	O
C	O	O	O	O	O	O
source	O	O	O	O	O	O
code	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
attack	O	O	O	O	O	O
case	O	O	O	O	O	O
shown	O	O	O	O	O	O
below	O	O	O	O	O	O
,	O	O	O	O	O	O
a	O	O	O	O	O	O
bash	O	O	O	O	O	O
script	O	O	O	O	O	O
gets	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
target	O	O	O	O	O	O
server	O	O	O	O	O	O
upon	O	O	O	O	O	O
successful	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attempt	O	O	O	O	O	O
.	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
downloading	O	O	O	O	O	O
C	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shell	O	O	O	O	O	O
script	O	O	O	O	O	O
payload	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
upon	O	O	O	O	O	O
successful	O	O	O	O	O	O
exploit	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
shell	O	O	O	O	O	O
script	O	O	O	O	O	O
will	O	O	O	O	O	O
perform	O	O	O	O	O	O
the	O	O	O	O	O	O
following	O	O	O	O	O	O
actions	O	O	O	O	O	O
:	O	O	O	O	O	O

*	O	O	O	O	O	O
Downloads	O	O	O	O	O	O
an	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
written	O	O	O	O	O	O
in	O	O	O	O	O	O
C	O	O	O	O	O	O
programming	O	O	O	O	O	O
language	O	O	O	O	O	O

*	O	O	O	O	O	O
Attempts	O	O	O	O	O	O
to	O	O	O	O	O	O
compile	O	O	O	O	O	O
the	O	O	O	O	O	O
C	O	O	O	O	O	O
bot	O	O	O	O	O	O
program	O	O	O	O	O	O
using	O	O	O	O	O	O
gcc	O	O	O	O	O	O
compiler	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
victim	O	O	O	O	O	O
server	O	O	O	O	O	O

*	O	O	O	O	O	O
Executes	O	O	O	O	O	O
the	O	O	O	O	O	O
newly	O	O	O	O	O	O
generated	O	O	O	O	O	O
ELF	O	O	O	O	O	O
IRC	O	O	O	O	O	O
bot	O	O	O	O	O	O
binary	O	O	O	O	O	O

*	O	O	O	O	O	O
Creates	O	O	O	O	O	O
a	O	O	O	O	O	O
crontab	O	O	O	O	O	O
entry	O	O	O	O	O	O
to	O	O	O	O	O	O
download	O	O	O	O	O	O
and	O	O	O	O	O	O
infect	O	O	O	O	O	O
the	O	O	O	O	O	O
system	O	O	O	O	O	O
on	O	O	O	O	O	O
a	O	O	O	O	O	O
weekly	O	O	O	O	O	O
basis	O	O	O	O	O	O

This	O	O	O	O	O	O
is	O	O	O	O	O	O
a	O	O	O	O	O	O
way	O	O	O	O	O	O
of	O	O	O	O	O	O
establishing	O	O	O	O	O	O
persistence	O	O	O	O	O	O
,	O	O	O	O	O	O
even	O	O	O	O	O	O
if	O	O	O	O	O	O
the	O	O	O	O	O	O
system	O	O	O	O	O	O
administrator	O	O	O	O	O	O
identifies	O	O	O	O	O	O
and	O	O	O	O	O	O
removes	O	O	O	O	O	O
the	O	O	O	O	O	O
culprit	O	O	O	O	O	O
file	O	O	O	O	O	O
the	O	O	O	O	O	O
system	O	O	O	O	O	O
will	O	O	O	O	O	O
again	O	O	O	O	O	O
get	O	O	O	O	O	O
infected	O	O	O	O	O	O
when	O	O	O	O	O	O
the	O	O	O	O	O	O
cronjob	O	O	O	O	O	O
triggers	O	O	O	O	O	O
.	O	O	O	O	O	O

The	O	O	O	O	O	O
attacker	O	O	O	O	O	O
is	O	O	O	O	O	O
also	O	O	O	O	O	O
transferring	O	O	O	O	O	O
a	O	O	O	O	O	O
plain-text	O	O	O	O	O	O
file	O	O	O	O	O	O
as	O	O	O	O	O	O
oppose	O	O	O	O	O	O
to	O	O	O	O	O	O
an	O	O	O	O	O	O
ELF	O	O	O	O	O	O
binary	O	O	O	O	O	O
in	O	O	O	O	O	O
an	O	O	O	O	O	O
attempt	O	O	O	O	O	O
to	O	O	O	O	O	O
evade	O	O	O	O	O	O
network	O	O	O	O	O	O
perimeter	O	O	O	O	O	O
defenses	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Linux.Tsunami	O	O	O	O	O	O
ELF	O	O	O	O	O	O
binary	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

In	O	O	O	O	O	O
the	O	O	O	O	O	O
most	O	O	O	O	O	O
recent	O	O	O	O	O	O
case	O	O	O	O	O	O
,	O	O	O	O	O	O
the	O	O	O	O	O	O
attacker	O	O	O	O	O	O
first	O	O	O	O	O	O
ensures	O	O	O	O	O	O
that	O	O	O	O	O	O
the	O	O	O	O	O	O
current	O	O	O	O	O	O
bash	O	O	O	O	O	O
session	O	O	O	O	O	O
does	O	O	O	O	O	O
not	O	O	O	O	O	O
get	O	O	O	O	O	O
recorded	O	O	O	O	O	O
to	O	O	O	O	O	O
the	O	O	O	O	O	O
history	O	O	O	O	O	O
file	O	O	O	O	O	O
.	O	O	O	O	O	O

It	O	O	O	O	O	O
then	O	O	O	O	O	O
also	O	O	O	O	O	O
involved	O	O	O	O	O	O
a	O	O	O	O	O	O
shell	O	O	O	O	O	O
script	O	O	O	O	O	O
getting	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
and	O	O	O	O	O	O
executed	O	O	O	O	O	O
on	O	O	O	O	O	O
the	O	O	O	O	O	O
target	O	O	O	O	O	O
server	O	O	O	O	O	O
as	O	O	O	O	O	O
seen	O	O	O	O	O	O
below	O	O	O	O	O	O
:	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attempt	O	O	O	O	O	O
downloading	O	O	O	O	O	O
Linux.Tsunami	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
|	O	O	O	O	O	O

|	O	O	O	O	O	O
Shell	O	O	O	O	O	O
script	O	O	O	O	O	O
payload	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
upon	O	O	O	O	O	O
successful	O	O	O	O	O	O
exploit	O	O	O	O	O	O
|	O	O	O	O	O	O

The	O	O	O	O	O	O
shell	O	O	O	O	O	O
script	O	O	O	O	O	O
will	O	O	O	O	O	O
perform	O	O	O	O	O	O
the	O	O	O	O	O	O
following	O	O	O	O	O	O
actions	O	O	O	O	O	O
:	O	O	O	O	O	O

*	O	O	O	O	O	O
Downloads	O	O	O	O	O	O
and	O	O	O	O	O	O
executes	O	O	O	O	O	O
a	O	O	O	O	O	O
new	O	O	O	O	O	O
variant	O	O	O	O	O	O
of	O	O	O	O	O	O
Linux.Tsunami	O	O	O	O	O	O
DDoS	O	O	O	O	O	O
bot	O	O	O	O	O	O

*	O	O	O	O	O	O
Create	O	O	O	O	O	O
crontab	O	O	O	O	O	O
entry	O	O	O	O	O	O
to	O	O	O	O	O	O
ensure	O	O	O	O	O	O
future	O	O	O	O	O	O
update	O	O	O	O	O	O
and	O	O	O	O	O	O
persistence	O	O	O	O	O	O

*	O	O	O	O	O	O
Attempts	O	O	O	O	O	O
to	O	O	O	O	O	O
download	O	O	O	O	O	O
and	O	O	O	O	O	O
patch	O	O	O	O	O	O
the	O	O	O	O	O	O
Bash	O	O	O	O	O	O
vulnerability	O	O	O	O	O	O
in	O	O	O	O	O	O
an	O	O	O	O	O	O
attempt	O	O	O	O	O	O
to	O	O	O	O	O	O
prevent	O	O	O	O	O	O
new	O	O	O	O	O	O
infections	O	O	O	O	O	O
from	O	O	O	O	O	O
competitors	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
Uses	O	O	O	O	O	O
shred	O	O	O	O	O	O
command	O	O	O	O	O	O
before	O	O	O	O	O	O
deleting	O	O	O	O	O	O
itself	O	O	O	O	O	O
(	O	O	O	O	O	O
downloaded	O	O	O	O	O	O
shell	O	O	O	O	O	O
script	O	O	O	O	O	O
)	O	O	O	O	O	O

*	O	O	O	O	O	O
shred	O	O	O	O	O	O
command	O	O	O	O	O	O
Overwrite	O	O	O	O	O	O
the	O	O	O	O	O	O
specified	O	O	O	O	O	O
FILE	O	O	O	O	O	O
(	O	O	O	O	O	O
s	O	O	O	O	O	O
)	O	O	O	O	O	O
repeatedly	O	O	O	O	O	O
,	O	O	O	O	O	O
in	O	O	O	O	O	O
order	O	O	O	O	O	O
to	O	O	O	O	O	O
make	O	O	O	O	O	O
it	O	O	O	O	O	O
harder	O	O	O	O	O	O
for	O	O	O	O	O	O
even	O	O	O	O	O	O
very	O	O	O	O	O	O
expensive	O	O	O	O	O	O
hardware	O	O	O	O	O	O
probing	O	O	O	O	O	O
to	O	O	O	O	O	O
recover	O	O	O	O	O	O
the	O	O	O	O	O	O
data	O	O	O	O	O	O
.	O	O	O	O	O	O
*	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
Conclusion	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O

We	O	O	O	O	O	O
have	O	O	O	O	O	O
seen	O	O	O	O	O	O
a	O	O	O	O	O	O
quick	O	O	O	O	O	O
evolution	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
Shellshock	O	O	O	O	O	O
exploit	O	O	O	O	O	O
attack	O	O	O	O	O	O
payloads	O	O	O	O	O	O
that	O	O	O	O	O	O
can	O	O	O	O	O	O
be	O	O	O	O	O	O
broadly	O	O	O	O	O	O
classified	O	O	O	O	O	O
into	O	O	O	O	O	O
following	O	O	O	O	O	O
categories	O	O	O	O	O	O
:	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
Persistence	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
-	O	O	O	O	O	O
achieved	O	O	O	O	O	O
by	O	O	O	O	O	O
creating	O	O	O	O	O	O
cronjob	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
Evasion	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
-	O	O	O	O	O	O
payload	O	O	O	O	O	O
Base64	O	O	O	O	O	O
encoding	O	O	O	O	O	O
(	O	O	O	O	O	O
Perl	O	O	O	O	O	O
bot	O	O	O	O	O	O
)	O	O	O	O	O	O
and	O	O	O	O	O	O
plain-text	O	O	O	O	O	O
C	O	O	O	O	O	O
source	O	O	O	O	O	O
code	O	O	O	O	O	O
transfer	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
Stealth	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
-	O	O	O	O	O	O
prevents	O	O	O	O	O	O
recording	O	O	O	O	O	O
of	O	O	O	O	O	O
bash	O	O	O	O	O	O
session	O	O	O	O	O	O
history	O	O	O	O	O	O
,	O	O	O	O	O	O
usage	O	O	O	O	O	O
of	O	O	O	O	O	O
shred	O	O	O	O	O	O
and	O	O	O	O	O	O
rm	O	O	O	O	O	O
commands	O	O	O	O	O	O
.	O	O	O	O	O	O

*	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
Competitive	O	O	O	O	O	O
Advantage	O	O	O	O	O	O
*	O	O	O	O	O	O
*	O	O	O	O	O	O
-	O	O	O	O	O	O
removing	O	O	O	O	O	O
other	O	O	O	O	O	O
exploit	O	O	O	O	O	O
payloads	O	O	O	O	O	O
,	O	O	O	O	O	O
installing	O	O	O	O	O	O
new	O	O	O	O	O	O
payload	O	O	O	O	O	O
and	O	O	O	O	O	O
applying	O	O	O	O	O	O
security	O	O	O	O	O	O
patches	O	O	O	O	O	O
to	O	O	O	O	O	O
prevent	O	O	O	O	O	O
further	O	O	O	O	O	O
exploit	O	O	O	O	O	O
&	O	O	O	O	O	O
infection	O	O	O	O	O	O
attempts	O	O	O	O	O	O
.	O	O	O	O	O	O

It	O	O	O	O	O	O
is	O	O	O	O	O	O
extremely	O	O	O	O	O	O
important	O	O	O	O	O	O
for	O	O	O	O	O	O
the	O	O	O	O	O	O
system	O	O	O	O	O	O
administrators	O	O	O	O	O	O
to	O	O	O	O	O	O
test	O	O	O	O	O	O
if	O	O	O	O	O	O
their	O	O	O	O	O	O
server	O	O	O	O	O	O
is	O	O	O	O	O	O
vulnerable	O	O	O	O	O	O
and	O	O	O	O	O	O
apply	O	O	O	O	O	O
appropriate	O	O	O	O	O	O
security	O	O	O	O	O	O
patches	O	O	O	O	O	O
as	O	O	O	O	O	O
described	O	O	O	O	O	O
in	O	O	O	O	O	O
our	O	O	O	O	O	O
previous	O	O	O	O	O	O
blog	O	O	O	O	O	O
.	O	O	O	O	O	O

It	O	O	O	O	O	O
is	O	O	O	O	O	O
also	O	O	O	O	O	O
important	O	O	O	O	O	O
to	O	O	O	O	O	O
check	O	O	O	O	O	O
for	O	O	O	O	O	O
the	O	O	O	O	O	O
indicators	O	O	O	O	O	O
of	O	O	O	O	O	O
compromise	O	O	O	O	O	O
mentioned	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
above	O	O	O	O	O	O
attack	O	O	O	O	O	O
cases	O	O	O	O	O	O
.	O	O	O	O	O	O

Zscaler	B-ORG	O	O	O	O	B-ORG
customers	O	O	O	O	O	O
are	O	O	O	O	O	O
protected	O	O	O	O	O	O
from	O	O	O	O	O	O
this	O	O	O	O	O	O
threat	O	O	O	O	O	O
and	O	O	O	O	O	O
the	O	O	O	O	O	O
associated	O	O	O	O	O	O
malware	O	O	O	O	O	O
payloads	O	O	O	O	O	O
.	O	O	O	O	O	O

Zscaler	B-ORG	O	O	O	O	B-ORG
ThreatLabZ	O	O	O	O	O	O
is	O	O	O	O	O	O
actively	O	O	O	O	O	O
monitoring	O	O	O	O	O	O
this	O	O	O	O	O	O
threat	O	O	O	O	O	O
and	O	O	O	O	O	O
associated	O	O	O	O	O	O
attacks	O	O	O	O	O	O
in	O	O	O	O	O	O
the	O	O	O	O	O	O
wild	O	O	O	O	O	O
.	O	O	O	O	O	O

